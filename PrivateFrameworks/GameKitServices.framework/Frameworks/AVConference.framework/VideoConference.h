/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/GameKitServices.framework/Frameworks/AVConference.framework/AVConference
 */

@class CALayer, GKNATObserver, NSArray, NSLock, NSMutableDictionary, NSObject<VideoCaptureProtocol>, NSObject<VideoConferenceChannelQualityDelegate>, NSObject<VideoConferenceDelegate>, NSObject<VideoConferenceNotificationObserver>, NSObject<VideoConferenceRealTimeChannel>, NSObject<VideoConferenceSpeakingDelegate>, NSString, VCCallSession, VideoAttributes, VideoConferenceManager;

@interface VideoConference : NSObject <VCCallSessionDelegate, GKNATObserverDelegate> {
    struct _opaque_pthread_rwlock_t { 
        long __sig; 
        BOOL __opaque[124]; 
    struct _opaque_pthread_mutex_t { 
        long __sig; 
        BOOL __opaque[40]; 
    struct _opaque_pthread_mutex_t { 
        long __sig; 
        BOOL __opaque[40]; 
    struct _opaque_pthread_mutex_t { 
        long __sig; 
        BOOL __opaque[40]; 
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    struct _opaque_pthread_mutex_t { 
        long __sig; 
        BOOL __opaque[40]; 
    struct _opaque_pthread_cond_t { 
        long __sig; 
        BOOL __opaque[24]; 
    struct CGSize { 
        float width; 
        float height; 
    struct CGSize { 
        float width; 
        float height; 
    struct CGSize { 
        float width; 
        float height; 
    struct CGSize { 
        float width; 
        float height; 
    NSObject<VideoCaptureProtocol> *avCapture;
    struct dispatch_queue_s { } *avCaptureQueue;
    BOOL bweOperatingModeInitialized;
    BOOL canLocalResizePIP;
    BOOL canRemoteResizePIP;
    int chatMode;
    float conferenceVolume;
    NSArray *connectedPeers;
    NSString *currentFocus;
    VCCallSession *currentFocusSession;
    double dAudioHostTime;
    NSObject<VideoConferenceDelegate> *delegate;
    NSLock *delegateLock;
    BOOL disableVAD;
    int downstreamBandwidth;
    unsigned int dwAudioTS;
    int fecMode;
    struct __CFString { } *forceHWI;
    BOOL forceHWICheck;
    struct __CFString { } *forceNOLOG;
    BOOL forceNoICE;
    NSObject<VideoConferenceNotificationObserver> *genericObserver;
    struct tagHANDLE { int x1; } *hVR;
    struct tagHANDLE { int x1; } *hVT;
    BOOL hasMic;
    int iSoundBytes;
    float inputMeterLevel;
    BOOL inputMeteringEnabled;
    BOOL isAttemptingRelay;
    BOOL isFocus;
    BOOL isGKVoiceChat;
    BOOL isRecvVideo;
    BOOL isTalking;
    BOOL isUsingSuppression;
    unsigned int lastSentAudioSampleTime;
    double lastVideoThrottlingCheck;
    struct _CAImageQueue { } *localCAImageQueue;
    struct _CAImageQueue { } *localCAImageQueueBack;
    int localFrameHeight;
    int localFrameWidth;
    } localScreenLandscapeAspectRatio;
    } localScreenPortraitAspectRatio;
    VideoAttributes *localVideoAttributes;
    void *localVideoBackLayer;
    struct OpaqueFigImageQueue { } *localVideoImageQueue;
    struct OpaqueFigImageQueue { } *localVideoImageQueueBack;
    void *localVideoLayer;
    int localVideoSlot;
    int localVideoSlotBack;
    CALayer *localVideoSubLayer;
    float longTerm;
    VideoConferenceManager *manager;
    struct dispatch_queue_s { } *managerQueue;
    BOOL microphoneMuted;
    int mostRecentStartedCall;
    NSArray *mutedPeers;
    } natCond;
    } natMutex;
    GKNATObserver *natObserver;
    int natType;
    float outputMeterLevel;
    BOOL outputMeteringEnabled;
    int packetsPerBundle;
    unsigned int preferredCodec;
    struct __CVPixelBufferPool { } *previewBufferPool;
    NSObject<VideoConferenceChannelQualityDelegate> *qualityDelegate;
    BOOL receivedFirstPreviewFrame;
    BOOL receivedFirstRemoteFrame;
    int recvRTPBytes;
    double recvRTPTimeStamp;
    struct _CAImageQueue { } *remoteCAImageQueue;
    struct _CAImageQueue { } *remoteCAImageQueueBack;
    int remoteFrameHeight;
    int remoteFrameWidth;
    } remoteScreenLandscapeAspectRatio;
    } remoteScreenPortraitAspectRatio;
    BOOL remoteSupportsVisibleRect;
    VideoAttributes *remoteVideoAttributes;
    void *remoteVideoBackLayer;
    struct OpaqueFigImageQueue { } *remoteVideoImageQueue;
    struct OpaqueFigImageQueue { } *remoteVideoImageQueueBack;
    void *remoteVideoLayer;
    int remoteVideoSlot;
    int remoteVideoSlotBack;
    CALayer *remoteVideoSubLayer;
    CALayer *remoteVideoSubLayerBack;
    } remoteVideoVisibleRect;
    unsigned char requestedCameraType;
    BOOL requiresWifi;
    NSObject<VideoConferenceRealTimeChannel> *rtChannel;
    NSArray *sessionArray;
    NSMutableDictionary *sessionDict;
    float shortTerm;
    BOOL shouldPrioritizeParticipantIDForSIPInvite;
    BOOL shouldSendEmptyPacket;
    BOOL shouldStopPreviewOnClose;
    BOOL shouldTimeoutPackets;
    unsigned char speakingArray[16];
    NSObject<VideoConferenceSpeakingDelegate> *speakingDelegate;
    } stateLock;
    unsigned int talkTime;
    unsigned int talkingPeersLimit;
    int upstreamBandwidth;
    BOOL useAFRC;
    BOOL useActiveProbingSenderLog;
    BOOL useComplexRendering;
    BOOL useCompressedConnectionData;
    BOOL useFakeLargeFrameMode;
    BOOL useNewBWEMode;
    BOOL useViceroyBlobFormat;
    struct OpaqueVTPixelTransferSession { } *vtTransferSession;
    } xAudioTS;
    } xLocalLayer;
    } xRemoteLayer;
}

@property int chatMode;
@property float conferenceVolume;
@property(copy) NSString * currentFocus;
@property NSObject<VideoConferenceDelegate> * delegate;
@property BOOL disableVAD;
@property int downstreamBandwidth;
@property(getter=isSpeakerPhoneEnabled) BOOL enableSpeakerPhone;
@property NSObject<VideoConferenceNotificationObserver> * genericObserver;
@property BOOL hasMic;
@property(readonly) float inputMeterLevel;
@property(getter=isInputMeteringEnabled) BOOL inputMeteringEnabled;
@property BOOL isFocus;
@property BOOL isGKVoiceChat;
@property BOOL isUsingSuppression;
@property(getter=getLocalBitrate,readonly) double localBitrate;
@property(readonly) int localFrameHeight;
@property(readonly) int localFrameWidth;
@property(getter=getLocalFramerate,readonly) double localFramerate;
@property(readonly) double localPacketLossRate;
@property(retain) VideoAttributes * localVideoAttributes;
@property void* localVideoBackLayer;
@property void* localVideoLayer;
@property(getter=isMicrophoneMuted) BOOL microphoneMuted;
@property int natType;
@property(readonly) float outputMeterLevel;
@property(getter=isOutputMeteringEnabled) BOOL outputMeteringEnabled;
@property int packetsPerBundle;
@property unsigned int preferredCodec;
@property NSObject<VideoConferenceChannelQualityDelegate> * qualityDelegate;
@property(getter=getRemoteBitrate,readonly) double remoteBitrate;
@property(readonly) int remoteFrameHeight;
@property(readonly) int remoteFrameWidth;
@property(getter=getRemoteFramerate,readonly) double remoteFramerate;
@property(readonly) double remotePacketLossRate;
@property(retain) VideoAttributes * remoteVideoAttributes;
@property void* remoteVideoBackLayer;
@property void* remoteVideoLayer;
@property(readonly) CALayer * remoteVideoSubLayer;
@property(readonly) CALayer * remoteVideoSubLayerBack;
@property BOOL requiresWifi;
@property(readonly) double roundTripTime;
@property(setter=setRTChannel:) NSObject<VideoConferenceRealTimeChannel> * rtChannel;
@property BOOL setupAudioSession;
@property BOOL shouldPrioritizeParticipantIDForSIPInvite;
@property BOOL shouldTimeoutPackets;
@property NSObject<VideoConferenceSpeakingDelegate> * speakingDelegate;
@property unsigned int talkingPeersLimit;
@property int upstreamBandwidth;
@property BOOL useComplexRendering;
@property BOOL useCompressedConnectionData;
@property BOOL useViceroyBlobFormat;

- (void)NATTypeDidChange:(int)arg1;
- (void)bringupPDPContext;
- (void)calculateMixingArrays:(unsigned int*)arg1 talkingMask:(unsigned int)arg2;
- (unsigned int)calculateTalkingMaskAtTimeStamp:(unsigned int)arg1 samples:(short*)arg2 numSamples:(int)arg3;
- (int)callIDForOpenSessionWithParticipantID:(id)arg1;
- (int)callIDForParticipantID:(id)arg1;
- (int)captureAsFocus:(char *)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned int)arg4 timeStampDelta:(int)arg5 averagePower:(unsigned char)arg6;
- (int)captureAsFocusClient:(char *)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned int)arg4 timeStampDelta:(int)arg5 averagePower:(unsigned char)arg6;
- (int)captureMeshMode:(char *)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned int)arg4 timeStampDelta:(int)arg5 hostTime:(double)arg6;
- (int)chatMode;
- (void)checkVideoThrottleDuration;
- (void)cleanupManager;
- (void)cleanupProc:(id)arg1;
- (void)cleanupQueues;
- (void)cleanupSession:(id)arg1 didRemoteCancel:(BOOL)arg2;
- (void)cleanupSession:(id)arg1 withDelay:(unsigned int)arg2;
- (float)conferenceVolume;
- (id)connectionBlobForParticipantID:(id)arg1 callID:(int*)arg2 error:(id*)arg3;
- (unsigned int)connectionResultCallbackForCallID:(int)arg1 result:(struct tagCONNRESULT { int x1; int x2; int x3; int x4; unsigned short x5; unsigned short x6; struct tagIPPORT { int x_7_1_1; BOOL x_7_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_7_1_3; unsigned short x_7_1_4; } x7; struct tagIPPORT { int x_8_1_1; BOOL x_8_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_8_1_3; unsigned short x_8_1_4; } x8; struct tagIPPORT { int x_9_1_1; BOOL x_9_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { int x_10_1_1; BOOL x_10_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { int x_11_1_1; BOOL x_11_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { int x_12_1_1; BOOL x_12_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; unsigned int x13; int x14; int x15; int x16; int x17; }*)arg2 didReceiveICEPacket:(BOOL)arg3 didUseRelay:(BOOL)arg4;
- (long)createVideoCaptureWithWidth:(int)arg1 height:(int)arg2 frameRate:(int)arg3 useBackFacingCamera:(BOOL)arg4;
- (id)currentFocus;
- (void)dealloc;
- (void)defaultCleanupSession:(id)arg1;
- (id)delegate;
- (bool)didDetectBandwidth:(BOOL)arg1 upstreamBandwidth:(int)arg2 downstreamBandwidth:(int)arg3;
- (BOOL)disableVAD;
- (int)downstreamBandwidth;
- (bool)enqueueFrameToQueueFront:(BOOL)arg1 frame:(struct __CVBuffer { }*)arg2 frameTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3;
- (void)flushVideoQueuesLocal:(BOOL)arg1 remote:(BOOL)arg2;
- (void)forceNoICE:(BOOL)arg1;
- (id)genericObserver;
- (void)getDefaultsVideoSettings:(int*)arg1 height:(int*)arg2 frameRate:(int*)arg3 bitRate:(int*)arg4 useBFC:(BOOL*)arg5 enableBitstreamCapture:(BOOL*)arg6 enable2vuyCapture:(BOOL*)arg7 enableVPBLogging:(BOOL*)arg8;
- (BOOL)getIsAudioPaused:(BOOL*)arg1 callID:(int)arg2 error:(id*)arg3;
- (BOOL)getIsVideoPaused:(BOOL*)arg1 callID:(int)arg2 error:(id*)arg3;
- (double)getLocalBitrate;
- (double)getLocalFramerate;
- (void)getNSError:(id*)arg1 code:(int)arg2 detailedCode:(int)arg3 filePath:(id)arg4 description:(id)arg5 hResult:(long)arg6;
- (void)getNSError:(id*)arg1 code:(int)arg2 detailedCode:(int)arg3 filePath:(id)arg4 description:(id)arg5 reason:(id)arg6;
- (void)getPreviewSettings:(int*)arg1 height:(int*)arg2 framerate:(int*)arg3;
- (double)getRemoteBitrate;
- (double)getRemoteFramerate;
- (void)handleAVCaptureError:(long)arg1 error:(id)arg2;
- (void)handleCellDowngrade:(BOOL)arg1;
- (BOOL)hasMic;
- (BOOL)hasSessionWaitingForSIPInvite;
- (id)init;
- (float)inputMeterLevel;
- (BOOL)isFocus;
- (BOOL)isGKVoiceChat;
- (BOOL)isInputMeteringEnabled;
- (BOOL)isMicrophoneMuted;
- (BOOL)isOutputMeteringEnabled;
- (BOOL)isRunningPreview;
- (BOOL)isSpeakerPhoneEnabled;
- (BOOL)isUsingSuppression;
- (int)localFrameHeight;
- (int)localFrameWidth;
- (double)localPacketLossRate;
- (id)localScreenAttributesForVideoAttributes:(id)arg1;
- (id)localVideoAttributes;
- (void*)localVideoBackLayer;
- (void*)localVideoLayer;
- (int)localVideoSlot:(BOOL)arg1;
- (id)loopbackSessionWaitingForSIPInvite;
- (void)markUnfinishedSessions;
- (BOOL)matchesCallID:(int)arg1;
- (BOOL)matchesIncomingConnectionResult:(struct tagCONNRESULT { int x1; int x2; int x3; int x4; unsigned short x5; unsigned short x6; struct tagIPPORT { int x_7_1_1; BOOL x_7_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_7_1_3; unsigned short x_7_1_4; } x7; struct tagIPPORT { int x_8_1_1; BOOL x_8_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_8_1_3; unsigned short x_8_1_4; } x8; struct tagIPPORT { int x_9_1_1; BOOL x_9_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { int x_10_1_1; BOOL x_10_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { int x_11_1_1; BOOL x_11_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { int x_12_1_1; BOOL x_12_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; unsigned int x13; int x14; int x15; int x16; int x17; }*)arg1;
- (BOOL)matchesOpenSessionForParticipantID:(id)arg1;
- (BOOL)matchesParticipantID:(id)arg1;
- (int)natType;
- (double)networkQualityForCallID:(int)arg1;
- (bool)onCaptureSound:(char *)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned int)arg4 timeStampDelta:(int)arg5 hostTime:(double)arg6 averagePower:(float)arg7 voiceActivity:(unsigned long)arg8;
- (bool)onCaptureVideo:(struct __CVBuffer { }*)arg1 frameTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 preview:(bool)arg3 isSwitching:(bool)arg4 cameraType:(int)arg5;
- (bool)onPlaySound:(char *)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned int)arg4 averagePower:(float)arg5;
- (bool)onPlayVideo:(struct __CVBuffer { }*)arg1 frameTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 cameraStatusBits:(unsigned char)arg3;
- (id)openSessionForParticipant:(id)arg1;
- (float)outputMeterLevel;
- (void)packMeters:(char *)arg1 forSession:(id)arg2 len:(char *)arg3;
- (double)packetLossRateForCallID:(int)arg1;
- (int)packetsPerBundle;
- (id)participantIDForCallID:(int)arg1;
- (unsigned char)powerFloatToInt:(float)arg1;
- (float)powerIntToFloat:(unsigned char)arg1;
- (unsigned int)preferredCodec;
- (void)processRelayRequestResponse:(int)arg1 responseDict:(id)arg2 didOriginateRequest:(BOOL)arg3;
- (void)processRelayUpdate:(int)arg1 updateDict:(id)arg2 didOriginateRequest:(BOOL)arg3;
- (unsigned int)pruneQuietestPeers:(unsigned int)arg1 talking:(unsigned int)arg2 mask:(unsigned int)arg3 meters:(char *)arg4;
- (int)pullDecodedAsFocus:(short*)arg1 timestamp:(unsigned int)arg2 numBytes:(int)arg3 numSamples:(int)arg4;
- (int)pullDecodedAsFocusClient:(short*)arg1 timestamp:(unsigned int)arg2 numBytes:(int)arg3 numSamples:(int)arg4;
- (int)pullDecodedMeshMode:(short*)arg1 timestamp:(unsigned int)arg2 numBytes:(int)arg3 numSamples:(int)arg4;
- (void)pullStoreBagKeys;
- (id)qualityDelegate;
- (void)rdlock;
- (void)receivedRealTimeData:(id)arg1 fromParticipantID:(id)arg2;
- (BOOL)recvSamplesForSession:(id)arg1 samples:(short*)arg2 numSamples:(int)arg3 storeTimestamp:(unsigned int)arg4;
- (void)remoteAudioDidPause:(BOOL)arg1 callID:(int)arg2;
- (void)remoteCancelledCallID:(int)arg1;
- (int)remoteFrameHeight;
- (int)remoteFrameWidth;
- (double)remotePacketLossRate;
- (void)remoteScreenAspectRatioChangedForSession:(id)arg1 remoteScreenPortraitAspectRatio:(struct CGSize { float x1; float x2; })arg2 remoteScreenLandscapeAspectRatio:(struct CGSize { float x1; float x2; })arg3 remoteSupportsVisibleRect:(BOOL)arg4 canLocalResizePIP:(BOOL)arg5 canRemoteResizePIP:(BOOL)arg6;
- (id)remoteVideoAttributes;
- (void*)remoteVideoBackLayer;
- (void)remoteVideoDidPause:(BOOL)arg1 callID:(int)arg2;
- (void*)remoteVideoLayer;
- (int)remoteVideoSlot:(BOOL)arg1;
- (id)remoteVideoSubLayer;
- (id)remoteVideoSubLayerBack;
- (BOOL)requiresWifi;
- (void)resetCameraToPreviewSettings;
- (double)roundTripTime;
- (id)rtChannel;
- (int)sendBundle:(id)arg1 samples:(char *)arg2 numEncodedBytes:(int)arg3 timeStamp:(unsigned int)arg4 timeStampDelta:(int)arg5 hasNewSamples:(BOOL)arg6;
- (void)session:(id)arg1 cancelRelayRequest:(id)arg2;
- (void)session:(id)arg1 didStart:(BOOL)arg2 connectionType:(unsigned int)arg3 localUseCell:(unsigned int)arg4 remoteUseCell:(unsigned int)arg5 error:(id)arg6;
- (void)session:(id)arg1 didStopWithDelay:(int)arg2 error:(id)arg3;
- (void)session:(id)arg1 didStopWithError:(id)arg2;
- (void)session:(id)arg1 inititiateRelayRequest:(id)arg2;
- (void)session:(id)arg1 receivedNoPacketsForSeconds:(double)arg2;
- (void)session:(id)arg1 sendRelayResponse:(id)arg2;
- (void)session:(id)arg1 setUseNormalBitrate:(BOOL)arg2;
- (bool)session:(id)arg1 startVideoIO:(id*)arg2 rtpVideo:(struct tagHANDLE { int x1; }*)arg3 rtpAudio:(struct tagHANDLE { int x1; }*)arg4 actualVideoPayload:(int)arg5 enableUEP:(BOOL)arg6 enableControlByte:(BOOL)arg7 featuresListString:(char *)arg8 remoteVCCallInfo:(id)arg9 captureRule:(id)arg10 encodeRule:(id)arg11 usingCellular:(BOOL)arg12 isUnpausing:(BOOL)arg13;
- (id)sessionForIncomingConnectionResult:(struct tagCONNRESULT { int x1; int x2; int x3; int x4; unsigned short x5; unsigned short x6; struct tagIPPORT { int x_7_1_1; BOOL x_7_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_7_1_3; unsigned short x_7_1_4; } x7; struct tagIPPORT { int x_8_1_1; BOOL x_8_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_8_1_3; unsigned short x_8_1_4; } x8; struct tagIPPORT { int x_9_1_1; BOOL x_9_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { int x_10_1_1; BOOL x_10_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { int x_11_1_1; BOOL x_11_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { int x_12_1_1; BOOL x_12_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; unsigned int x13; int x14; int x15; int x16; int x17; }*)arg1;
- (id)sessionForIncomingParticipantID:(id)arg1;
- (id)sessionForParticipantID:(id)arg1;
- (BOOL)setActive:(BOOL)arg1;
- (void)setBWEOptions:(BOOL)arg1 UseNewBWEMode:(BOOL)arg2 FakeLargeFrameMode:(BOOL)arg3 ProbingSenderLog:(BOOL)arg4;
- (void)setCallReport:(int)arg1 withReport:(id)arg2;
- (void)setChatMode:(int)arg1;
- (void)setConferenceVolume:(float)arg1;
- (void)setCurrentFocus:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisableVAD:(BOOL)arg1;
- (void)setDownstreamBandwidth:(int)arg1;
- (void)setEnableSpeakerPhone:(BOOL)arg1;
- (void)setFECMode:(int)arg1;
- (void)setGenericObserver:(id)arg1;
- (void)setHasMic:(BOOL)arg1;
- (void)setInputMeteringEnabled:(BOOL)arg1;
- (void)setIsFocus:(BOOL)arg1;
- (void)setIsGKVoiceChat:(BOOL)arg1;
- (void)setIsUsingSuppression:(BOOL)arg1;
- (void)setLocalScreenAttributes:(id)arg1;
- (void)setLocalVideoAttributes:(id)arg1;
- (void)setLocalVideoBackLayer:(void*)arg1;
- (void)setLocalVideoLayer:(void*)arg1;
- (void)setMicrophoneMuted:(BOOL)arg1;
- (void)setNatType:(int)arg1;
- (void)setOutputMeteringEnabled:(BOOL)arg1;
- (void)setPacketsPerBundle:(int)arg1;
- (BOOL)setPauseAudio:(BOOL)arg1 callID:(int)arg2 error:(id*)arg3;
- (BOOL)setPauseAudio:(BOOL)arg1;
- (BOOL)setPauseVideo:(BOOL)arg1 callID:(int)arg2 error:(id*)arg3;
- (BOOL)setPauseVideo:(BOOL)arg1;
- (void)setPeerCN:(id)arg1 callID:(int)arg2;
- (void)setPreferredCodec:(unsigned int)arg1;
- (void)setQualityDelegate:(id)arg1;
- (void)setRTChannel:(id)arg1;
- (void)setRemoteVideoAttributes:(id)arg1;
- (void)setRemoteVideoBackLayer:(void*)arg1;
- (void)setRemoteVideoLayer:(void*)arg1;
- (void)setRequiresWifi:(BOOL)arg1;
- (void)setSendAudio:(BOOL)arg1 forCallID:(int)arg2;
- (void)setSessionID:(id)arg1 callID:(int)arg2;
- (void)setSetupAudioSession:(BOOL)arg1;
- (void)setShouldPrioritizeParticipantIDForSIPInvite:(BOOL)arg1;
- (void)setShouldTimeoutPackets:(BOOL)arg1;
- (void)setSpeakingDelegate:(id)arg1;
- (void)setTalkingPeersLimit:(unsigned int)arg1;
- (void)setUpstreamBandwidth:(int)arg1;
- (void)setUseComplexRendering:(BOOL)arg1;
- (void)setUseCompressedConnectionData:(BOOL)arg1;
- (void)setUseViceroyBlobFormat:(BOOL)arg1;
- (BOOL)setupAudioSession;
- (BOOL)shouldPrioritizeParticipantIDForSIPInvite;
- (BOOL)shouldSendAudioForCallID:(int)arg1;
- (BOOL)shouldTimeoutPackets;
- (int)sipCallbackNotification:(int)arg1 callID:(int)arg2 msgIn:(const char *)arg3 msgOut:(char *)arg4 optional:(void*)arg5 confIndex:(int*)arg6;
- (id)speakingDelegate;
- (BOOL)startConnectionWithParticipantID:(id)arg1 callID:(int)arg2 usingBlob:(id)arg3 isCaller:(BOOL)arg4 capabilities:(id)arg5 error:(id*)arg6;
- (BOOL)startPreview:(BOOL)arg1 withError:(id*)arg2;
- (BOOL)startPreviewWithError:(id*)arg1;
- (void)startVideoProc:(id)arg1;
- (int)stateForCallID:(int)arg1;
- (id)statsForCallID:(int)arg1;
- (void)stopCallID:(int)arg1 didRemoteCancel:(BOOL)arg2;
- (void)stopCallID:(int)arg1;
- (void)stopPreview;
- (bool)stopVideoIO:(BOOL)arg1 error:(id*)arg2;
- (unsigned int)talkingPeersLimit;
- (void)threadSafeCleanupSession:(id)arg1;
- (int)tryrdlock;
- (void)unlock;
- (void)updateAudioBitrate;
- (void)updateMeter:(unsigned char)arg1 forParticipant:(id)arg2 atIndex:(unsigned int)arg3;
- (void)updateMeters:(unsigned short)arg1;
- (BOOL)updateSpeaking:(unsigned long)arg1 timeStamp:(unsigned int)arg2;
- (void)updatedConnectedPeers:(id)arg1;
- (void)updatedMutedPeers:(id)arg1 forParticipantID:(id)arg2;
- (int)upstreamBandwidth;
- (BOOL)useComplexRendering;
- (BOOL)useCompressedConnectionData;
- (BOOL)useViceroyBlobFormat;
- (void)warmupForCall;
- (void)wrlock;

@end
