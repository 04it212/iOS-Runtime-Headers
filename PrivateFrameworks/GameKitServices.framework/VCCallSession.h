/* Generated by RuntimeBrowser on iPhone OS 4.2.1
   Image: /System/Library/PrivateFrameworks/GameKitServices.framework/GameKitServices
 */

@class NSArray, LoopbackSocketTunnel, NSString, NSObject<VideoConferenceChannelQualityDelegate>, VCCallLinkCongestionDetector, VCCapabilities, NSObject<VideoConferenceRealTimeChannel>, GKRingBuffer, VCCallInfo, NSObject<VCCallSessionDelegate>;



@interface VCCallSession : NSObject <LoopbackSocketTunnelDelegate>
{
    NSObject<VCCallSessionDelegate> *delegate;
    VCCallInfo *localCallInfo;
    VCCallInfo *remoteCallInfo;
    struct tagHANDLE { NSInteger x1; } *rtpHandle;
    struct tagHANDLE { NSInteger x1; } *rtpVideo;
    struct tagHANDLE { NSInteger x1; } *encodeHandle;
    struct tagHANDLE { NSInteger x1; } *decodeHandle;
    NSInteger numEncodedBytes;
    NSInteger numBufferBytesAvailable;
    BOOL didUseICE;
    struct tagCONNRESULT { 
        NSInteger iCallID; 
        NSInteger iRemoteCallID; 
        NSInteger proto; 
        NSInteger bIfRelay; 
        unsigned short wRelayServType; 
        unsigned short wChannelNumber; 
        struct tagIPPORT { 
            NSInteger iFlags; 
            BOOL szIfName[16]; 
            union { 
                NSUInteger dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbLocal; 
        struct tagIPPORT { 
            NSInteger iFlags; 
            BOOL szIfName[16]; 
            union { 
                NSUInteger dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbRemote; 
        struct tagIPPORT { 
            NSInteger iFlags; 
            BOOL szIfName[16]; 
            union { 
                NSUInteger dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbSrc; 
        struct tagIPPORT { 
            NSInteger iFlags; 
            BOOL szIfName[16]; 
            union { 
                NSUInteger dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbDst; 
        struct tagIPPORT { 
            NSInteger iFlags; 
            BOOL szIfName[16]; 
            union { 
                NSUInteger dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbRemoteSrc; 
        struct tagIPPORT { 
            NSInteger iFlags; 
            BOOL szIfName[16]; 
            union { 
                NSUInteger dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbRelayExt; 
        NSUInteger dwRTT; 
    } connectionResult;
    NSInteger state;
    NSInteger audioBundle;
    NSInteger payload;
    NSInteger videoPayload;
    NSInteger sampleRate;
    NSInteger samplesPerFrame;
    struct tagHANDLE { NSInteger x1; } *hAUIO;
    struct tagHANDLE { NSInteger x1; } *hSIP;
    double lastReceivedAudio;
    BOOL launchedShutdownThread;
    BOOL isAudioRunning;
    BOOL isWaitingForICEResult;
    BOOL didSend200OK;
    float remoteParticipantVolume;
    NSObject<VideoConferenceRealTimeChannel> *rtChannel;
    LoopbackSocketTunnel *tunnel;
    struct _opaque_pthread_mutex_t { 
        long __sig; 
        BOOL __opaque[40]; 
    } mutex;
    BOOL useLoopback;
    BOOL receivedSIPInvite;
    char *remoteSDP;
    char *localSDP;
    unsigned long dwRemoteRTPIP;
    NSInteger iRemoteRTPPort;
    NSInteger iRemoteRTCPPort;
    VCCapabilities *caps;
    struct tagHANDLE { NSInteger x1; } *hMediaQueue;
    struct tagHANDLE { NSInteger x1; } *hAFRC;
    GKRingBuffer *ringBuf;
    NSUInteger lastReceived;
    char *bundleBuffer;
    NSInteger bundledPackets;
    NSInteger packetsPerBundle;
    NSInteger preferredAudioCodec;
    NSInteger preferredAACELDBitRate;
    NSInteger audioTxBitrate;
    BOOL canBundleAudio;
    BOOL useControlByte;
    BOOL useUEP;
    char *featuresListString;
    BOOL matchedFeaturesString[1000];
    unsigned char inputMeter;
    NSInteger packetsSinceLastRTCPReport;
    BOOL audioIsPaused;
    BOOL videoIsPaused;
    NSInteger audioTimeStampDelta;
    NSArray *mutedPeers;
    NSInteger bandwidthUpstream;
    NSInteger bandwidthDownstream;
    NSInteger aacBlockSize;
    BOOL fInitialBandwidthDetection;
    struct AudioStreamBasicDescription { 
        double mSampleRate; 
        NSUInteger mFormatID; 
        NSUInteger mFormatFlags; 
        NSUInteger mBytesPerPacket; 
        NSUInteger mFramesPerPacket; 
        NSUInteger mBytesPerFrame; 
        NSUInteger mChannelsPerFrame; 
        NSUInteger mBitsPerChannel; 
        NSUInteger mReserved; 
    } encodedFormat;
    BOOL shouldDoEncoding;
    double lastReceivedPacketTimestamp;
    BOOL isAttemptingRelay;
    NSInteger relayState;
    BOOL allowsRelay;
    BOOL requiresWifi;
    BOOL useCompressedConnectionData;
    NSInteger natType;
    NSUInteger lastSentAudioSampleTime;
    struct dispatch_source_s { } *pausedAudioHeartBeat;
    double packetLossRate;
    double timeLastCheckedNetworkConditions;
    double timeLastKnowGoodNetworkConditions;
    double networkConditionsTimeoutInSeconds;
    NSString *peerCN;
    NSUInteger roundTripTime;
    float packetLateAndMissingRatio;
    float callerPreEmptiveTimeoutInSecs;
    NSInteger sampleLogCount;
    double timeSinceLastReportedNoPackets;
    double noRemotePacketsTimeout;
    BOOL didAttemptSIPInvite;
    NSObject<VideoConferenceChannelQualityDelegate> *qualityDelegate;
    BOOL shouldTimeoutPackets;
    struct _opaque_pthread_mutex_t { 
        long __sig; 
        BOOL __opaque[40]; 
    } srtpLock;
    BOOL didPrepareSRTP;
    BOOL useAFRC;
    VCCallLinkCongestionDetector *congestionDetector;
    BOOL shouldSendAudio;
    BOOL isRemoteDevice4x;
}

@property(readonly) double networkQuality;
@property BOOL shouldSendAudio;
@property BOOL useAFRC;
@property BOOL shouldTimeoutPackets;
@property float packetLateAndMissingRatio;
@property NSObject<VideoConferenceChannelQualityDelegate> *qualityDelegate;
@property NSUInteger roundTripTime;
@property double networkConditionsTimeoutInSeconds;
@property double packetLossRate;
@property(retain) NSString *peerCN;
@property NSInteger audioTimeStampDelta;
@property NSUInteger lastSentAudioSampleTime;
@property NSInteger natType;
@property BOOL requiresWifi;
@property(readonly) BOOL audioIsPaused;
@property(readonly) BOOL videoIsPaused;
@property(readonly) NSInteger audioTxBitrate;
@property(retain) NSArray *mutedPeers;
@property NSInteger bandwidthDownstream;
@property NSInteger bandwidthUpstream;
@property BOOL useCompressedConnectionData;
@property unsigned char inputMeter;
@property char* featuresListString;
@property BOOL useUEP;
@property BOOL useControlByte;
@property NSInteger preferredAudioCodec;
@property BOOL canBundleAudio;
@property NSInteger packetsPerBundle;
@property NSInteger bundledPackets;
@property(readonly) char* bundleBuffer;
@property NSUInteger lastReceived;
@property(retain) GKRingBuffer *ringBuf;
@property tagHANDLE *hAFRC;
@property tagHANDLE *hMediaQueue;
@property NSInteger numBufferBytesAvailable;
@property NSInteger numEncodedBytes;
@property tagHANDLE *decodeHandle;
@property tagHANDLE *encodeHandle;
@property NSObject<VideoConferenceRealTimeChannel> *rtChannel;
@property BOOL receivedSIPInvite;
@property BOOL isWaitingForICEResult;
@property(readonly) BOOL isAudioRunning;
@property(retain) NSObject<VCCallSessionDelegate> *delegate;
@property NSInteger samplesPerFrame;
@property NSInteger sampleRate;
@property NSInteger payload;
@property NSInteger videoPayload;
@property NSInteger audioBundle;
@property BOOL didUseICE;
@property NSInteger state;
@property tagCONNRESULT connectionResult;
@property tagHANDLE *rtpHandle;
@property(retain) VCCallInfo *remoteCallInfo;
@property(retain) VCCallInfo *localCallInfo;

+ (id)keyPathsForValuesAffectingNetworkQuality;

- (void)lock;
- (void)unlock;
- (id)description;
- (void)setState:(NSInteger)arg1;
- (NSInteger)state;
- (id)init;
- (void)dealloc;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (void)updateLastReceivedPacket:(BOOL)arg1;
- (NSInteger)rtcpDescriptor;
- (BOOL)isCallOngoing;
- (BOOL)stillWantsToRelay;
- (void)processCancelRelayRequest:(id)arg1 didOriginateRequest:(BOOL)arg2;
- (void)setPacketLateAndMissingRatio:(float)arg1;
- (void)setRoundTripTime:(NSUInteger)arg1;
- (void)setNetworkConditionsTimeoutInSeconds:(double)arg1;
- (void)setPacketLossRate:(double)arg1;
- (void)setBandwidthDownstream:(NSInteger)arg1;
- (void)setBandwidthUpstream:(NSInteger)arg1;
- (void)setUseUEP:(BOOL)arg1;
- (void)setUseControlByte:(BOOL)arg1;
- (void)setCanBundleAudio:(BOOL)arg1;
- (void)setRingBuf:(id)arg1;
- (void)setHAFRC:(struct tagHANDLE { NSInteger x1; }*)arg1;
- (void)setHMediaQueue:(struct tagHANDLE { NSInteger x1; }*)arg1;
- (void)setNumBufferBytesAvailable:(NSInteger)arg1;
- (void)setDecodeHandle:(struct tagHANDLE { NSInteger x1; }*)arg1;
- (void)setEncodeHandle:(struct tagHANDLE { NSInteger x1; }*)arg1;
- (void)setReceivedSIPInvite:(BOOL)arg1;
- (void)setIsWaitingForICEResult:(BOOL)arg1;
- (void)setSamplesPerFrame:(NSInteger)arg1;
- (void)setSampleRate:(NSInteger)arg1;
- (void)setPayload:(NSInteger)arg1;
- (void)setVideoPayload:(NSInteger)arg1;
- (void)setAudioBundle:(NSInteger)arg1;
- (void)setDidUseICE:(BOOL)arg1;
- (void)setConnectionResult:(struct tagCONNRESULT { NSInteger x1; NSInteger x2; NSInteger x3; NSInteger x4; unsigned short x5; unsigned short x6; struct tagIPPORT { NSInteger x_7_1_1; BOOL x_7_1_2[16]; union { NSUInteger x_3_2_1; unsigned char x_3_2_2[16]; } x_7_1_3; unsigned short x_7_1_4; } x7; struct tagIPPORT { NSInteger x_8_1_1; BOOL x_8_1_2[16]; union { NSUInteger x_3_2_1; unsigned char x_3_2_2[16]; } x_8_1_3; unsigned short x_8_1_4; } x8; struct tagIPPORT { NSInteger x_9_1_1; BOOL x_9_1_2[16]; union { NSUInteger x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { NSInteger x_10_1_1; BOOL x_10_1_2[16]; union { NSUInteger x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { NSInteger x_11_1_1; BOOL x_11_1_2[16]; union { NSUInteger x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { NSInteger x_12_1_1; BOOL x_12_1_2[16]; union { NSUInteger x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; NSUInteger x13; })arg1;
- (void)setRtpHandle:(struct tagHANDLE { NSInteger x1; }*)arg1;
- (void)setRemoteCallInfo:(id)arg1;
- (void)setLocalCallInfo:(id)arg1;
- (float)packetLateAndMissingRatio;
- (NSUInteger)roundTripTime;
- (id)peerCN;
- (double)networkConditionsTimeoutInSeconds;
- (NSInteger)bandwidthDownstream;
- (NSInteger)bandwidthUpstream;
- (BOOL)useUEP;
- (BOOL)useControlByte;
- (NSInteger)audioTxBitrate;
- (NSInteger)preferredAudioCodec;
- (struct tagHANDLE { NSInteger x1; }*)hAFRC;
- (struct tagHANDLE { NSInteger x1; }*)hMediaQueue;
- (BOOL)isWaitingForICEResult;
- (NSInteger)videoPayload;
- (NSInteger)audioBundle;
- (struct tagCONNRESULT { NSInteger x1; NSInteger x2; NSInteger x3; NSInteger x4; unsigned short x5; unsigned short x6; struct tagIPPORT { NSInteger x_7_1_1; BOOL x_7_1_2[16]; union { NSUInteger x_3_2_1; unsigned char x_3_2_2[16]; } x_7_1_3; unsigned short x_7_1_4; } x7; struct tagIPPORT { NSInteger x_8_1_1; BOOL x_8_1_2[16]; union { NSUInteger x_3_2_1; unsigned char x_3_2_2[16]; } x_8_1_3; unsigned short x_8_1_4; } x8; struct tagIPPORT { NSInteger x_9_1_1; BOOL x_9_1_2[16]; union { NSUInteger x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { NSInteger x_10_1_1; BOOL x_10_1_2[16]; union { NSUInteger x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { NSInteger x_11_1_1; BOOL x_11_1_2[16]; union { NSUInteger x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { NSInteger x_12_1_1; BOOL x_12_1_2[16]; union { NSUInteger x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; NSUInteger x13; })connectionResult;
- (BOOL)didUseICE;
- (struct tagHANDLE { NSInteger x1; }*)decodeHandle;
- (struct tagHANDLE { NSInteger x1; }*)encodeHandle;
- (void)setupLoopback;
- (void)resetLoopback;
- (BOOL)startConnectionWithParticipantID:(id)arg1 callID:(NSInteger)arg2 usingBlob:(id)arg3 isCaller:(BOOL)arg4 capabilities:(id)arg5 doEncoding:(BOOL)arg6 useRelay:(BOOL)arg7 error:(id*)arg8;
- (void)startPausedHeartbeat;
- (void)stopPausedHeartbeat;
- (BOOL)createConnectionDataForParticipantID:(id)arg1 pCallID:(NSInteger*)arg2 error:(id*)arg3 useRelay:(BOOL)arg4;
- (void)processSIPMessage:(char *)arg1 msgOut:(char *)arg2 optional:(void*)arg3 confIndex:(NSInteger*)arg4;
- (void)resetState;
- (void)inviteeICEResultTimer:(float)arg1 shouldBailIfRelay:(BOOL)arg2;
- (BOOL)createSDP:(NSInteger*)arg1 audioPayloadCount:(NSInteger)arg2 videoPayloadTypes:(NSInteger*)arg3 videoPayloadCount:(NSInteger)arg4 sdp:(char *)arg5 numSDPBytes:(NSInteger*)arg6 error:(id*)arg7;
- (NSInteger)handleIncomingWithCallID:(NSInteger)arg1 msgIn:(const char *)arg2 msgOut:(char *)arg3 optional:(void*)arg4 confIndex:(NSInteger*)arg5 error:(id*)arg6;
- (BOOL)getForcedPayload:(NSInteger*)arg1;
- (void)getAllPayloadsForAudio:(NSInteger**)arg1 count:(NSInteger*)arg2;
- (void)getAllPayloadsForVideo:(NSInteger**)arg1 count:(NSInteger*)arg2;
- (BOOL)sendSIPInviteWithError:(id*)arg1;
- (BOOL)createRTPHandles:(id*)arg1;
- (BOOL)createMediaQueueHandle:(id*)arg1;
- (BOOL)startRTPWithError:(id*)arg1;
- (BOOL)matchFeatures:(char *)arg1 remoteFeaturesString:(char *)arg2 localFeaturesString:(char *)arg3;
- (BOOL)negotiatePayloadWithError:(id*)arg1;
- (BOOL)chooseVideoPayload:(NSInteger*)arg1 count:(NSInteger)arg2;
- (BOOL)setRTPDestinationWithError:(id*)arg1;
- (BOOL)setRTPPayloadWithError:(id*)arg1;
- (BOOL)setupCallerRTPChannelWithError:(id*)arg1;
- (BOOL)sipConnectWithError:(id*)arg1;
- (void)stopAudioIOProc:(id)arg1;
- (void)stopAudio;
- (BOOL)startAudio:(id*)arg1;
- (BOOL)setupAudioEncoder;
- (void)setupAACELDBitrate;
- (BOOL)allocateBundleBuffer;
- (BOOL)startVideo:(BOOL)arg1 error:(id*)arg2;
- (BOOL)stopVideo:(BOOL)arg1 error:(id*)arg2;
- (BOOL)startMediaQueue:(id*)arg1;
- (BOOL)stopMediaQueue:(id*)arg1;
- (BOOL)startAFRC:(id*)arg1;
- (BOOL)stopAFRC:(id*)arg1;
- (BOOL)setupAudioCodec;
- (BOOL)choosePayload:(NSInteger*)arg1 count:(NSInteger)arg2;
- (void)shutdownVoiceChatFromRemoteSIPSignal:(NSInteger)arg1;
- (void)sipConnectThreadProc:(id)arg1;
- (NSUInteger)getAudioRTPID;
- (NSUInteger)getVideoRTPID;
- (void)stopLoopback;
- (void)stopLoopbackProc:(id)arg1;
- (void)doSipEndProc:(id)arg1;
- (void)doSipEndAction:(NSInteger)arg1 callID:(NSInteger)arg2;
- (void)notifyDelegateSessionStarted;
- (BOOL)doBandwidthDetection:(struct tagHANDLE { NSInteger x1; }*)arg1 error:(id*)arg2;
- (void)initiateRelayRequest;
- (id)createInitiateRelayDictionary;
- (id)createRelayUpdateDictionary:(id)arg1;
- (double)packetLossRate;
- (double)networkQuality;
- (void)setUseAFRC:(BOOL)arg1;
- (struct tagHANDLE { NSInteger x1; }*)rtpHandle;
- (void)setPreferredAudioCodec:(NSInteger)arg1;
- (void)setRtChannel:(id)arg1;
- (BOOL)createConnectionDataForParticipantID:(id)arg1 pCallID:(NSInteger*)arg2 error:(id*)arg3;
- (id)localCallInfo;
- (BOOL)videoIsPaused;
- (BOOL)audioIsPaused;
- (BOOL)shouldSendAudio;
- (void)setShouldSendAudio:(BOOL)arg1;
- (BOOL)setPauseAudio:(BOOL)arg1 error:(id*)arg2;
- (BOOL)setPauseVideo:(BOOL)arg1 error:(id*)arg2;
- (void)setPeerCN:(id)arg1;
- (BOOL)startConnectionWithParticipantID:(id)arg1 callID:(NSInteger)arg2 usingBlob:(id)arg3 isCaller:(BOOL)arg4 capabilities:(id)arg5 doEncoding:(BOOL)arg6 error:(id*)arg7;
- (void)setMutedPeers:(id)arg1;
- (id)remoteCallInfo;
- (BOOL)canBundleAudio;
- (void)processRelayRequestResponseDict:(id)arg1 didOriginateRequest:(BOOL)arg2;
- (void)processRelayUpdateDict:(id)arg1 didOriginateRequest:(BOOL)arg2;
- (NSInteger)sampleRate;
- (BOOL)isAudioRunning;
- (id)ringBuf;
- (NSUInteger)lastReceived;
- (NSInteger)encodeAudio:(void*)arg1 numInputBytes:(NSInteger)arg2 outputBytes:(void*)arg3 numOutputBytes:(NSInteger)arg4;
- (void)setInputMeter:(unsigned char)arg1;
- (NSInteger)numBufferBytesAvailable;
- (unsigned char)inputMeter;
- (NSInteger)bundledPackets;
- (void)setAudioTimeStampDelta:(NSInteger)arg1;
- (void)setLastSentAudioSampleTime:(NSUInteger)arg1;
- (NSInteger)samplesPerFrame;
- (NSInteger)audioTimeStampDelta;
- (void)setBundledPackets:(NSInteger)arg1;
- (void)setNumEncodedBytes:(NSInteger)arg1;
- (NSInteger)numEncodedBytes;
- (BOOL)updateRTCPReport;
- (char *)bundleBuffer;
- (NSInteger)payload;
- (void)updateLastReceivedPacketWithTimestamp:(double)arg1;
- (void)setLastReceived:(NSUInteger)arg1;
- (NSInteger)sipCallback:(NSInteger)arg1 callID:(NSInteger)arg2 msgIn:(const char *)arg3 msgOut:(char *)arg4 optional:(void*)arg5 confIndex:(NSInteger*)arg6;
- (BOOL)receivedSIPInvite;
- (NSUInteger)connectionResultCallback:(struct tagCONNRESULT { NSInteger x1; NSInteger x2; NSInteger x3; NSInteger x4; unsigned short x5; unsigned short x6; struct tagIPPORT { NSInteger x_7_1_1; BOOL x_7_1_2[16]; union { NSUInteger x_3_2_1; unsigned char x_3_2_2[16]; } x_7_1_3; unsigned short x_7_1_4; } x7; struct tagIPPORT { NSInteger x_8_1_1; BOOL x_8_1_2[16]; union { NSUInteger x_3_2_1; unsigned char x_3_2_2[16]; } x_8_1_3; unsigned short x_8_1_4; } x8; struct tagIPPORT { NSInteger x_9_1_1; BOOL x_9_1_2[16]; union { NSUInteger x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { NSInteger x_10_1_1; BOOL x_10_1_2[16]; union { NSUInteger x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { NSInteger x_11_1_1; BOOL x_11_1_2[16]; union { NSUInteger x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { NSInteger x_12_1_1; BOOL x_12_1_2[16]; union { NSUInteger x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; NSUInteger x13; }*)arg1 didReceiveICEPacket:(BOOL)arg2 didUseRelay:(BOOL)arg3;
- (BOOL)disconnect:(id)arg1 didRemoteCancel:(BOOL)arg2;
- (void)setQualityDelegate:(id)arg1;
- (void)setPacketsPerBundle:(NSInteger)arg1;
- (void)receivedRealTimeData:(id)arg1 fromParticipantID:(id)arg2;
- (void)setRequiresWifi:(BOOL)arg1;
- (void)setNatType:(NSInteger)arg1;
- (void)setUseCompressedConnectionData:(BOOL)arg1;
- (void)setShouldTimeoutPackets:(BOOL)arg1;
- (NSUInteger)lastSentAudioSampleTime;
- (NSInteger)natType;
- (BOOL)useCompressedConnectionData;
- (BOOL)shouldTimeoutPackets;
- (BOOL)useAFRC;
- (BOOL)requiresWifi;
- (NSInteger)packetsPerBundle;
- (id)qualityDelegate;
- (id)mutedPeers;
- (id)rtChannel;
- (void)loopbackSocketTunnel:(id)arg1 receivedData:(id)arg2 from:(struct tagIPPORT { NSInteger x1; BOOL x2[16]; union { NSUInteger x_3_1_1; unsigned char x_3_1_2[16]; } x3; unsigned short x4; }*)arg3;
- (void)setFeaturesListString:(char *)arg1;
- (char *)featuresListString;

@end
