/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iAdCore.framework/iAdCore
 */

@class <ADJSODelegate>, ADResourceDownloader, MKMapView, NSLock, NSMutableArray, NSMutableDictionary, NSMutableSet, WebScriptObject;

@interface ADMapJSO : ADJavaScriptObject {
    struct { 
        double latitudeDelta; 
        double longitudeDelta; 
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    struct { 
        struct { 
            double latitude; 
            double longitude; 
        } center; 
        struct { 
            double latitudeDelta; 
            double longitudeDelta; 
        } span; 
    BOOL _clientDidResignActive;
    NSMutableArray *_deferredAnnotations;
    } _deferredSpan;
    <ADJSODelegate> *_delegate;
    NSMutableSet *_downloadsInProgress;
    BOOL _hidden;
    ADResourceDownloader *_imageDownloader;
    WebScriptObject *_listener;
    NSLock *_lock;
    NSMutableDictionary *_mapAnnotationImages;
    NSMutableDictionary *_mapAnnotations;
    } _mapFrame;
    } _mapRegion;
    MKMapView *_mapView;
    BOOL _observingUserLocation;
    BOOL _privilegedClient;
    BOOL _shouldShowUserLocationOnResume;
    BOOL _showsUserLocation;
}

@property BOOL clientDidResignActive;
@property(retain,readonly) NSMutableArray * deferredAnnotations;
@property struct { double latitudeDelta; double longitudeDelta; } deferredSpan;
@property <ADJSODelegate> * delegate;
@property(retain,readonly) NSMutableSet * downloadsInProgress;
@property BOOL hidden;
@property(retain,readonly) ADResourceDownloader * imageDownloader;
@property(retain) WebScriptObject * listener;
@property(retain) NSLock * lock;
@property(retain,readonly) NSMutableDictionary * mapAnnotationImages;
@property(retain,readonly) NSMutableDictionary * mapAnnotations;
@property struct CGRect { struct CGPoint { float x; float y; } origin; struct CGSize { float width; float height; } size; } mapFrame;
@property struct { struct { double latitude; double longitude; } center; struct { double latitudeDelta; double longitudeDelta; } span; } mapRegion;
@property(retain) MKMapView * mapView;
@property BOOL observingUserLocation;
@property(getter=isPrivilegedClient) BOOL privilegedClient;
@property BOOL shouldShowUserLocationOnResume;
@property BOOL showsUserLocation;

+ (void)initializeInContext:(struct OpaqueJSContext { }*)arg1;
+ (id)scriptSelectors;
+ (id)scriptingKeys;

- (id)_annotationFromWebScriptObject:(id)arg1;
- (void)_mainThreadAddAnnotation:(id)arg1;
- (void)addAnnotation:(id)arg1;
- (void)addAnnotations:(id)arg1;
- (void)allow;
- (void)clientApplicationDidBecomeActive;
- (void)clientApplicationDidResignActive;
- (BOOL)clientDidResignActive;
- (void)dealloc;
- (id)deferredAnnotations;
- (struct { double x1; double x2; })deferredSpan;
- (id)delegate;
- (void)deny;
- (id)downloadsInProgress;
- (id)frame;
- (BOOL)hidden;
- (id)imageDownloader;
- (id)init;
- (BOOL)isPrivilegedClient;
- (id)listener;
- (id)lock;
- (id)mapAnnotationImages;
- (id)mapAnnotations;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })mapFrame;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })mapRegion;
- (void)mapView:(id)arg1 annotationView:(id)arg2 calloutAccessoryControlTapped:(id)arg3;
- (void)mapView:(id)arg1 didUpdateUserLocation:(id)arg2;
- (void)mapView:(id)arg1 regionDidChangeAnimated:(BOOL)arg2;
- (id)mapView:(id)arg1 viewForAnnotation:(id)arg2;
- (id)mapView;
- (BOOL)observingUserLocation;
- (id)region;
- (void)removeAnnotation:(id)arg1;
- (void)setClientDidResignActive:(BOOL)arg1;
- (void)setDeferredSpan:(struct { double x1; double x2; })arg1;
- (void)setDelegate:(id)arg1;
- (void)setFrame:(id)arg1;
- (void)setHidden:(BOOL)arg1;
- (void)setListener:(id)arg1;
- (void)setLock:(id)arg1;
- (void)setMapFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setMapRegion:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setMapView:(id)arg1;
- (void)setObservingUserLocation:(BOOL)arg1;
- (void)setPrivilegedClient:(BOOL)arg1;
- (void)setRegion:(id)arg1;
- (void)setShouldShowUserLocationOnResume:(BOOL)arg1;
- (void)setShowsUserLocation:(BOOL)arg1;
- (BOOL)shouldShowUserLocationOnResume;
- (BOOL)showsUserLocation;
- (void)zoomToAnnotations:(BOOL)arg1;

@end
