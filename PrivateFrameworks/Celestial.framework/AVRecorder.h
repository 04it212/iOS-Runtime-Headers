/* Generated by RuntimeBrowser on iPhone OS 2.2.1
   Image: /System/Library/PrivateFrameworks/Celestial.framework/Celestial
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */



@interface AVRecorder : NSObject 
{

  /* Error parsing encoded ivar type info: ^{AVRecorderPrivate=@"NSURL"II@"NSMutableDictionary"qc{AudioStreamBasicDescription="mSampleRate"d"mFormatID"I"mFormatFlags"I"mBytesPerPacket"I"mFramesPerPacket"I"mBytesPerFrame"I"mChannelsPerFrame"I"mBitsPerChannel"I"mReserved"I}^{OpaqueAudioFileID}^{OpaqueAudioQueue}I^{AudioQueueLevelMeterState}^{AudioQueueLevelMeterState}III[3^{AudioQueueBuffer}][3c]ccc} */
    struct AVRecorderPrivate { id x1; /* Warning: Unrecognized filer type: '"' using 'void*' */ void*x2; inout unsigned short x3; void*x4; void*x5; unsigned long x6; void*x7; NSUInteger x8; NSUInteger x9; id x10; void*x11; inout unsigned short x12; void*x13; void*x14; void*x15; void*x16; unsigned int x17/* : ? */; long x18; void*x19; void*x20; NSInteger x21; BOOL x22; void*x23; NSInteger x24; out in void*x25; const void*x26; void*x27; long long x28; BOOL x29; struct AudioStreamBasicDescription { 
            double mSampleRate; 
            NSUInteger mFormatID; 
            NSUInteger mFormatFlags; 
            NSUInteger mBytesPerPacket; 
            NSUInteger mFramesPerPacket; 
            NSUInteger mBytesPerFrame; 
            NSUInteger mChannelsPerFrame; 
            NSUInteger mBitsPerChannel; 
            NSUInteger mReserved; 
        } x30; struct OpaqueAudioFileID {} *x31; struct OpaqueAudioQueue {} *x32; NSUInteger x33; struct AudioQueueLevelMeterState {} *x34; struct AudioQueueLevelMeterState {} *x35; NSUInteger x36; NSUInteger x37; NSUInteger x38; struct AudioQueueBuffer {} *x39[3]; BOOL x40[3]; BOOL x41; BOOL x42; BOOL x43; } *_priv;

}


- (id)init;
- (void)dealloc;
- (void)setFilePath:(id)arg1;
- (id)filePath;
- (void)setAttribute:(id)arg1 forKey:(id)arg2;
- (id)attributeForKey:(id)arg1;
- (BOOL)activate:(id*)arg1;
- (BOOL)start;
- (void)stop;
- (BOOL)isRecording;
- (BOOL)isActive;
- (void)deactivate;
- (float)micVolume;
- (void)setMicVolume:(float)arg1;
- (long long)recordedFileSizeInBytes;
- (double)recordedDuration;
- (NSUInteger)audioNumDeviceChannels;
- (BOOL)audioCurrentAverageVolumeLevels:(float*)arg1 andPeakVolumeLevels:(float*)arg2;
- (BOOL)audioCurrentAverageDecibelLevels:(float*)arg1 andPeakDecibelLevels:(float*)arg2;
- (void)copyEncoderCookieToFile;
- (void)haveABuffer:(struct AudioQueueBuffer { NSUInteger x1; void *x2; NSUInteger x3; void *x4; NSUInteger x5; struct AudioStreamPacketDescription {} *x6; NSUInteger x7; }*)arg1 withTimeStamp:(const struct AudioTimeStamp { double x1; unsigned long long x2; double x3; unsigned long long x4; struct SMPTETime { short x_5_1_1; short x_5_1_2; NSUInteger x_5_1_3; NSUInteger x_5_1_4; NSUInteger x_5_1_5; short x_5_1_6; short x_5_1_7; short x_5_1_8; short x_5_1_9; } x5; NSUInteger x6; NSUInteger x7; }*)arg2 andNumPackets:(unsigned long)arg3 andPacketDescs:(const struct AudioStreamPacketDescription { long long x1; NSUInteger x2; NSUInteger x3; }*)arg4;
- (void)makeError:(id*)arg1 withDescription:(id)arg2 code:(long)arg3;

@end
