/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/WebKit.framework/WebKit
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class <WebCaretChangeListener>, <WebFormDelegate>, NSMutableSet, NSString, NSURL, WAKWindow, WebInspector, WebNodeHighlight, WebPreferences;

@interface WebViewPrivate : NSObject {
    struct Page { struct OwnPtr<WTF::HashSet<WTF::RefPtr<WebCore::SchedulePair>, WebCore::SchedulePairHash, WTF::HashTraits<WTF::RefPtr<WebCore::SchedulePair> > > > { 
            struct HashSet<WTF::RefPtr<WebCore::SchedulePair>,WebCore::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WebCore::SchedulePair> > > {} *m_ptr; 
        } x1; struct OwnPtr<WebCore::Chrome> { 
            struct Chrome {} *m_ptr; 
        } x2; struct OwnPtr<WebCore::SelectionController> { 
            struct SelectionController {} *m_ptr; 
        } x3; struct OwnPtr<WebCore::FocusController> { 
            struct FocusController {} *m_ptr; 
        } x4; struct OwnPtr<WebCore::Settings> { 
            struct Settings {} *m_ptr; 
        } x5; struct OwnPtr<WebCore::ProgressTracker> { 
            struct ProgressTracker {} *m_ptr; 
        } x6; struct RefPtr<WebCore::BackForwardList> { 
            struct BackForwardList {} *m_ptr; 
        } x7; struct RefPtr<WebCore::Frame> { 
            struct Frame {} *m_ptr; 
        } x8; struct RefPtr<WebCore::HistoryItem> { 
            struct HistoryItem {} *m_ptr; 
        } x9; struct RefPtr<WebCore::PluginData> { 
            struct PluginData {} *m_ptr; 
        } x10; struct EditorClient {} *x11; NSInteger x12; struct String { 
            struct RefPtr<WebCore::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } x13; /* Warning: Unrecognized filer type: 'B' using 'void*' */ void*x14; void*x15; void*x16; void*x17; void*x18; float x19; void*x20; struct String { 
            struct RefPtr<WebCore::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } x21; struct String { 
            struct RefPtr<WebCore::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } x22; void*x23; NSInteger x24; struct OwnPtr<WebCore::PageGroup> { 
            struct PageGroup {} *m_ptr; 
        } x25; struct PageGroup {} *x26; struct Debugger {} *x27; NSUInteger x28; NSUInteger x29; double x30; NSInteger x31; struct RefPtr<WebCore::SessionStorage> { 
            struct SessionStorage {} *m_ptr; 
    struct String { 
        struct RefPtr<WebCore::StringImpl> { 
            struct StringImpl {} *m_ptr; 
        } m_impl; 
    struct _WebResourceDelegateImplementationCache { 
        int (*didCancelAuthenticationChallengeFunc)(); 
        int (*didReceiveAuthenticationChallengeFunc)(); 
        int (*canAuthenticateAgainstProtectionSpaceFunc)(); 
        int (*webThreadDidFinishLoadingFromDataSourceFunc)(); 
        int (*webThreadDidFailLoadingWithErrorFromDataSourceFunc)(); 
        int (*webThreadIdentifierForRequestFunc)(); 
        int (*identifierForRequestFunc)(); 
        int (*willSendRequestFunc)(); 
        int (*didReceiveResponseFunc)(); 
        int (*didReceiveContentLengthFunc)(); 
        int (*didFinishLoadingFromDataSourceFunc)(); 
        int (*didFailLoadingWithErrorFromDataSourceFunc)(); 
        int (*didLoadResourceFromMemoryCacheFunc)(); 
        int (*willCacheResponseFunc)(); 
        int (*plugInFailedWithErrorFunc)(); 
        int (*shouldUseCredentialStorageFunc)(); 
    struct _WebFrameLoadDelegateImplementationCache { 
        int (*didClearWindowObjectForFrameFunc)(); 
        int (*windowScriptObjectAvailableFunc)(); 
        int (*didHandleOnloadEventsForFrameFunc)(); 
        int (*didReceiveServerRedirectForProvisionalLoadForFrameFunc)(); 
        int (*didCancelClientRedirectForFrameFunc)(); 
        int (*willPerformClientRedirectToURLDelayFireDateForFrameFunc)(); 
        int (*didChangeLocationWithinPageForFrameFunc)(); 
        int (*willCloseFrameFunc)(); 
        int (*didStartProvisionalLoadForFrameFunc)(); 
        int (*didReceiveTitleForFrameFunc)(); 
        int (*didCommitLoadForFrameFunc)(); 
        int (*didFailProvisionalLoadWithErrorForFrameFunc)(); 
        int (*didFailLoadWithErrorForFrameFunc)(); 
        int (*didFinishLoadForFrameFunc)(); 
        int (*didFirstLayoutInFrameFunc)(); 
        int (*didFirstVisuallyNonEmptyLayoutInFrameFunc)(); 
        int (*didFinishDocumentLoadForFrameFunc)(); 
    struct _WebScriptDebugDelegateImplementationCache { 
        BOOL didParseSourceExpectsBaseLineNumber; 
        int (*didParseSourceFunc)(); 
        int (*failedToParseSourceFunc)(); 
        int (*didEnterCallFrameFunc)(); 
        int (*willExecuteStatementFunc)(); 
        int (*willLeaveCallFrameFunc)(); 
        int (*exceptionWasRaisedFunc)(); 
    struct CGSize { 
        float width; 
        float height; 
    struct HashMap<long unsigned int,WTF::RetainPtr<objc_object*>,WTF::IntHash<long unsigned int>,WTF::HashTraits<long unsigned int>,WTF::HashTraits<WTF::RetainPtr<objc_object*> > > { 
        struct HashTable<long unsigned int,std::pair<long unsigned int, WTF::RetainPtr<objc_object*> >,WTF::PairFirstExtractor<std::pair<long unsigned int, WTF::RetainPtr<objc_object*> > >,WTF::IntHash<long unsigned int>,WTF::PairHashTraits<WTF::HashTraits<long unsigned int>, WTF::HashTraits<WTF::RetainPtr<objc_object*> > >,WTF::HashTraits<long unsigned int> > { 
            struct pair<long unsigned int,WTF::RetainPtr<objc_object*> > {} *m_table; 
            NSInteger m_tableSize; 
            NSInteger m_tableSizeMask; 
            NSInteger m_keyCount; 
            NSInteger m_deletedCount; 
        } m_impl; 
    id UIDelegate;
    id UIDelegateForwarder;
    id UIKitDelegate;
    id UIKitDelegateForwarder;
    id WebMailDelegate;
    <WebCaretChangeListener> *_caretChangeListener;
    NSMutableSet *_caretChangeListeners;
    NSInteger _keyboardUIMode;
    BOOL _keyboardUIModeAccessed;
    BOOL allowsMessaging;
    BOOL allowsUndo;
    NSString *applicationNameForUserAgent;
    struct CGColor { } *backgroundColor;
    BOOL becomingFirstResponder;
    BOOL becomingFirstResponderFromOutside;
    BOOL catchesDelegateExceptions;
    BOOL closed;
    BOOL closing;
    WebNodeHighlight *currentNodeHighlight;
    id downloadDelegate;
    BOOL drawsBackground;
    BOOL editable;
    id editingDelegate;
    id editingDelegateForwarder;
    } fixedLayoutSize;
    <WebFormDelegate> *formDelegate;
    id formDelegateForwarder;
    id frameLoadDelegate;
    id frameLoadDelegateForwarder;
    } frameLoadDelegateImplementations;
    BOOL hasSpellCheckerDocumentTag;
    WAKWindow *hostWindow;
    BOOL hoverFeedbackSuspended;
    } identifierMap;
    WebInspector *inspector;
    BOOL isStopping;
    BOOL mainFrameDocumentReady;
    BOOL mainViewIsScrollingOrZooming;
    NSString *mediaStyle;
    BOOL needsOneShotDrawingSynchronization;
    void *observationInfo;
        } x32; } *page;
    id policyDelegate;
    id policyDelegateForwarder;
    WebPreferences *preferences;
    NSInteger programmaticFocusCount;
    } resourceLoadDelegateImplementations;
    id resourceProgressDelegate;
    id scriptDebugDelegate;
    } scriptDebugDelegateImplementations;
    BOOL selectTrailingWhitespaceEnabled;
    BOOL shouldCacheFileURLs;
    BOOL shouldCloseWithWindow;
    BOOL shouldUpdateWhileOffscreen;
    BOOL smartInsertDeleteEnabled;
    NSInteger spellCheckerDocumentTag;
    BOOL tabKeyCyclesThroughElementsChanged;
    BOOL useDocumentViews;
    BOOL useSiteSpecificSpoofing;
    } userAgent;
    BOOL userAgentOverridden;
    NSURL *userStyleSheetLocation;
    BOOL usesLoaderCache;
    BOOL usesPageCache;
    struct __CFRunLoopObserver { } *viewUpdateRunLoopObserver;
    float zoomMultiplier;
}

+ (void)initialize;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_clearViewUpdateRunLoopObserver;
- (void)dealloc;
- (void)finalize;
- (id)init;

@end
