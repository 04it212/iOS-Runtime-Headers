/* Generated by RuntimeBrowser on iPhone OS 2.2.1
   Image: /System/Library/PrivateFrameworks/WebKit.framework/WebKit
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class NSString, WebPreferences, WebInspector, WAKWindow, <WebFormDelegate>, NSURL;



@interface WebViewPrivate : NSObject 
{

  /* Error parsing encoded ivar type info: ^{Page={OwnPtr<WebCore::Chrome>="m_ptr"^{Chrome}}{OwnPtr<WebCore::SelectionController>="m_ptr"^{SelectionController}}{OwnPtr<WebCore::FocusController>="m_ptr"^{FocusController}}{OwnPtr<WebCore::ContextMenuController>="m_ptr"^{ContextMenuController}}{OwnPtr<WebCore::InspectorController>="m_ptr"^{InspectorController}}{OwnPtr<WebCore::Settings>="m_ptr"^{Settings}}{OwnPtr<WebCore::ProgressTracker>="m_ptr"^{ProgressTracker}}{RefPtr<WebCore::BackForwardList>="m_ptr"^{BackForwardList}}{RefPtr<WebCore::Frame>="m_ptr"^{Frame}}{RefPtr<WebCore::Node>="m_ptr"^{Node}}^{EditorClient}i{String="m_impl"{RefPtr<WebCore::StringImpl>="m_ptr"^{StringImpl}}}BBB^{InspectorController}{String="m_impl"{RefPtr<WebCore::StringImpl>="m_ptr"^{StringImpl}}}{String="m_impl"{RefPtr<WebCore::StringImpl>="m_ptr"^{StringImpl}}}Bi} */
    struct Page { struct OwnPtr<WebCore::Chrome> { 
            struct Chrome {} *m_ptr; 
        } x1; struct OwnPtr<WebCore::SelectionController> { 
            struct SelectionController {} *m_ptr; 
        } x2; struct OwnPtr<WebCore::FocusController> { 
            struct FocusController {} *m_ptr; 
        } x3; struct OwnPtr<WebCore::ContextMenuController> { 
            struct ContextMenuController {} *m_ptr; 
        } x4; struct OwnPtr<WebCore::InspectorController> { 
            struct InspectorController {} *m_ptr; 
        } x5; struct OwnPtr<WebCore::Settings> { 
            struct Settings {} *m_ptr; 
        } x6; struct OwnPtr<WebCore::ProgressTracker> { 
            struct ProgressTracker {} *m_ptr; 
        } x7; struct RefPtr<WebCore::BackForwardList> { 
            struct BackForwardList {} *m_ptr; 
        } x8; struct RefPtr<WebCore::Frame> { 
            struct Frame {} *m_ptr; 
        } x9; struct RefPtr<WebCore::Node> { 
            struct Node {} *m_ptr; 
        } x10; struct EditorClient {} *x11; NSInteger x12; struct String { 
            struct RefPtr<WebCore::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } x13; /* Warning: Unrecognized filer type: 'B' using 'void*' */ void*x14; void*x15; void*x16; struct InspectorController {} *x17; struct String { 
            struct RefPtr<WebCore::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } x18; struct String { 
            struct RefPtr<WebCore::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } x19; void*x20; NSInteger x21; } *page;

    id UIDelegate;
    id UIDelegateForwarder;
    id resourceProgressDelegate;
    id downloadDelegate;
    id policyDelegate;
    id policyDelegateForwarder;
    id frameLoadDelegate;
    id frameLoadDelegateForwarder;
    <WebFormDelegate> *formDelegate;
    id editingDelegate;
    id editingDelegateForwarder;
    id scriptDebugDelegate;
    id scriptDebugDelegateForwarder;
    id formDelegateForwarder;
    WebInspector *inspector;
    BOOL allowsUndo;
    float textSizeMultiplier;
    NSString *applicationNameForUserAgent;
    struct String { struct RefPtr<WebCore::StringImpl> { 
            struct StringImpl {} *m_ptr; 
        } x1; } *userAgent;
    BOOL userAgentOverridden;
    WebPreferences *preferences;
    BOOL useSiteSpecificSpoofing;
    NSURL *userStyleSheetLocation;
    BOOL telephoneNumberParsingEnabled;
    WAKWindow *hostWindow;
    NSInteger programmaticFocusCount;
    struct _WebResourceDelegateImplementationCache { 
        int (*didCancelAuthenticationChallengeFunc)(); 
        int (*didReceiveAuthenticationChallengeFunc)(); 
        int (*identifierForRequestFunc)(); 
        int (*willSendRequestFunc)(); 
        int (*didReceiveResponseFunc)(); 
        int (*didReceiveContentLengthFunc)(); 
        int (*didFinishLoadingFromDataSourceFunc)(); 
        int (*didFailLoadingWithErrorFromDataSourceFunc)(); 
        int (*didLoadResourceFromMemoryCacheFunc)(); 
        int (*willCacheResponseFunc)(); 
        int (*plugInFailedWithErrorFunc)(); 
    } resourceLoadDelegateImplementations;
    struct _WebFrameLoadDelegateImplementationCache { 
        int (*didClearWindowObjectForFrameFunc)(); 
        int (*windowScriptObjectAvailableFunc)(); 
        int (*didHandleOnloadEventsForFrameFunc)(); 
        int (*didReceiveServerRedirectForProvisionalLoadForFrameFunc)(); 
        int (*didCancelClientRedirectForFrameFunc)(); 
        int (*willPerformClientRedirectToURLDelayFireDateForFrameFunc)(); 
        int (*didChangeLocationWithinPageForFrameFunc)(); 
        int (*willCloseFrameFunc)(); 
        int (*didStartProvisionalLoadForFrameFunc)(); 
        int (*didReceiveTitleForFrameFunc)(); 
        int (*didCommitLoadForFrameFunc)(); 
        int (*didFailProvisionalLoadWithErrorForFrameFunc)(); 
        int (*didFailLoadWithErrorForFrameFunc)(); 
        int (*didFinishLoadForFrameFunc)(); 
        int (*didFirstLayoutInFrameFunc)(); 
        int (*didFinishDocumentLoadForFrameFunc)(); 
    } frameLoadDelegateImplementations;
    void *observationInfo;
    BOOL closed;
    BOOL closing;
    BOOL shouldCloseWithWindow;
    BOOL mainFrameDocumentReady;
    BOOL drawsBackground;
    BOOL editable;
    BOOL tabKeyCyclesThroughElementsChanged;
    BOOL becomingFirstResponder;
    BOOL becomingFirstResponderFromOutside;
    BOOL hoverFeedbackSuspended;
    BOOL usesPageCache;
    BOOL catchesDelegateExceptions;
    struct CGColor { } *backgroundColor;
    NSString *mediaStyle;
    BOOL hasSpellCheckerDocumentTag;
    NSInteger spellCheckerDocumentTag;
    BOOL smartInsertDeleteEnabled;
    BOOL windowState;
    BOOL usesLoaderCache;
    BOOL shouldCacheDecodedImages;
    BOOL shouldCacheFileURLs;
    id UIKitDelegate;
    id UIKitDelegateForwarder;
    id WebMailDelegate;
    NSInteger layoutInterval;
    double maxParseDuration;
    float minimumZoomFontSize;
    struct CGSize { 
        float width; 
        float height; 
    } visibleSize;
    BOOL allowsMessaging;
    NSInteger rotationDegrees;
    struct HashMap<long unsigned int,WTF::RetainPtr<objc_object*>,WTF::IntHash<uintptr_t>,WTF::HashTraits<long unsigned int>,WTF::HashTraits<WTF::RetainPtr<objc_object*> > > { struct HashTable<long unsigned int,std::pair<long unsigned int, WTF::RetainPtr<objc_object*> >,WTF::PairFirstExtractor<std::pair<long unsigned int, WTF::RetainPtr<objc_object*> > >,WTF::IntHash<uintptr_t>,WTF::PairHashTraits<WTF::HashTraits<long unsigned int>, WTF::HashTraits<WTF::RetainPtr<objc_object*> > >,WTF::HashTraits<long unsigned int> > { 
            struct pair<long unsigned int,WTF::RetainPtr<objc_object*> > {} *m_table; 
            NSInteger m_tableSize; 
            NSInteger m_tableSizeMask; 
            NSInteger m_keyCount; 
            NSInteger m_deletedCount; 
        } x1; } *identifierMap;
}

+ (void)initialize;

- (id)init;
- (void)dealloc;
- (void)finalize;

@end
