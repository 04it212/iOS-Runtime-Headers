/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/TextInput.framework/TextInput
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class NSMutableString;

@interface TIKeyboardInputManagerAlphabet : UIKeyboardInputManager {
    struct TIInputManagerAlphabet { int (**x1)(); struct StaticDictionaryAlphabet { 
            int (**_vptr$StaticDictionary)(); 
            struct WordTrie { 
                struct ReadOnlyDataFile {} *m_index; 
                struct ReadOnlyDataFile {} *m_words; 
                NSUInteger m_word_count; 
                struct RefPtr<KB::WordTrieNode> { 
                    struct WordTrieNode {} *m_ptr; 
                } m_root; 
                struct WordTrieSearch { 
                    struct Vector<WTF::RefPtr<KB::WordTrieNode>,0ul> { 
                        NSUInteger m_size; 
                        struct VectorBuffer<WTF::RefPtr<KB::WordTrieNode>,0ul> { 
                            struct RefPtr<KB::WordTrieNode> {} *m_buffer; 
                            NSUInteger m_capacity; 
                        } m_buffer; 
                    } m_states; 
                    NSInteger m_type; 
                    struct String { 
                        unsigned short m_size; 
                        unsigned short m_capacity; 
                        unsigned short m_length; 
                        unsigned short m_sort_key_length; 
                        unsigned char m_buffer_type; 
                        char *m_buffer; 
                        BOOL m_static_buffer[16]; 
                    } m_string; 
                    struct String { 
                        unsigned short m_size; 
                        unsigned short m_capacity; 
                        unsigned short m_length; 
                        unsigned short m_sort_key_length; 
                        unsigned char m_buffer_type; 
                        char *m_buffer; 
                        BOOL m_static_buffer[16]; 
                    } m_sort_key; 
                } m_search; 
                struct WordTrieSearch { 
                    struct Vector<WTF::RefPtr<KB::WordTrieNode>,0ul> { 
                        NSUInteger m_size; 
                        struct VectorBuffer<WTF::RefPtr<KB::WordTrieNode>,0ul> { 
                            struct RefPtr<KB::WordTrieNode> {} *m_buffer; 
                            NSUInteger m_capacity; 
                        } m_buffer; 
                    } m_states; 
                    NSInteger m_type; 
                    struct String { 
                        unsigned short m_size; 
                        unsigned short m_capacity; 
                        unsigned short m_length; 
                        unsigned short m_sort_key_length; 
                        unsigned char m_buffer_type; 
                        char *m_buffer; 
                        BOOL m_static_buffer[16]; 
                    } m_string; 
                    struct String { 
                        unsigned short m_size; 
                        unsigned short m_capacity; 
                        unsigned short m_length; 
                        unsigned short m_sort_key_length; 
                        unsigned char m_buffer_type; 
                        char *m_buffer; 
                        BOOL m_static_buffer[16]; 
                    } m_sort_key; 
                } m_saved_search; 
                /* Warning: Unrecognized filer type: 'B' using 'void*' */ void*m_returns_words_shorter_than_search; 
                void*m_valid; 
                struct TrieArrayCacheSet<KB::TrieArrayCache<KB::PackedTrieSibling, const char*>,const char*> { 
                    struct TrieArrayCache<KB::PackedTrieSibling,const char*> { 
                        char *m_loaded_for_parent; 
                        NSInteger m_num_tags; 
                        unsigned char m_tag_list[256]; 
                        struct PackedTrieSibling { 
                            union { 
                                NSUInteger whole; 
                                struct $_712 { 
                                    unsigned int child_offset : 24; 
                                    unsigned int patricia_key_size_1 : 2; 
                                    unsigned int has_child_offset_type : 2; 
                                    unsigned int has_word_termination_prob : 1; 
                                    unsigned int has_unigram_list_offset : 1; 
                                    unsigned int has_freq : 1; 
                                    unsigned int more_siblings : 1; 
                                } v2fields; 
                                struct $_713 { 
                                    unsigned int child_offset_byte0 : 8; 
                                    unsigned int child_offset_byte1 : 8; 
                                    unsigned int child_offset_byte2 : 8; 
                                    unsigned int flags_byte : 8; 
                                } v2bytes; 
                            } sortNchild; 
                            union { 
                                NSUInteger whole; 
                                struct $_715 { 
                                    unsigned int word_offset : 23; 
                                    unsigned int word_is_0freq : 1; 
                                    unsigned int compacted_freq : 8; 
                                } fields; 
                                struct $_716 { 
                                    unsigned int word_offset_or_prob_byte0 : 8; 
                                    unsigned int word_offset_byte1 : 8; 
                                    unsigned int word_offset_byte2 : 8; 
                                    unsigned int freq_byte : 8; 
                                } v2bytes; 
                            } freqNword; 
                            unsigned char patricia_key_bytes[4]; 
                        } m_values[256]; 
                        char *m_base_addr; 
                    } root; 
                    struct TrieArrayCache<KB::PackedTrieSibling,const char*> { 
                        char *m_loaded_for_parent; 
                        NSInteger m_num_tags; 
                        unsigned char m_tag_list[256]; 
                        struct PackedTrieSibling { 
                            union { 
                                NSUInteger whole; 
                                struct $_712 { 
                                    unsigned int child_offset : 24; 
                                    unsigned int patricia_key_size_1 : 2; 
                                    unsigned int has_child_offset_type : 2; 
                                    unsigned int has_word_termination_prob : 1; 
                                    unsigned int has_unigram_list_offset : 1; 
                                    unsigned int has_freq : 1; 
                                    unsigned int more_siblings : 1; 
                                } v2fields; 
                                struct $_713 { 
                                    unsigned int child_offset_byte0 : 8; 
                                    unsigned int child_offset_byte1 : 8; 
                                    unsigned int child_offset_byte2 : 8; 
                                    unsigned int flags_byte : 8; 
                                } v2bytes; 
                            } sortNchild; 
                            union { 
                                NSUInteger whole; 
                                struct $_715 { 
                                    unsigned int word_offset : 23; 
                                    unsigned int word_is_0freq : 1; 
                                    unsigned int compacted_freq : 8; 
                                } fields; 
                                struct $_716 { 
                                    unsigned int word_offset_or_prob_byte0 : 8; 
                                    unsigned int word_offset_byte1 : 8; 
                                    unsigned int word_offset_byte2 : 8; 
                                    unsigned int freq_byte : 8; 
                                } v2bytes; 
                            } freqNword; 
                            unsigned char patricia_key_bytes[4]; 
                        } m_values[256]; 
                        char *m_base_addr; 
                    } deep; 
                } m_trie_array_cache_set; 
                NSUInteger m_compilation_flags; 
                NSUInteger m_unigram_payload_offset; 
                NSUInteger m_trie_root_offset; 
                float m_root_usage_sum; 
                struct SortKeyByteConverter { 
                    int (**_vptr$SortKeyByteConverter)(); 
                    NSUInteger m_single_primaries_to_letter[256]; 
                    void*m_is_known_lead_primary[256]; 
                    struct Hashmap<KB::String,unsigned int> { 
                        NSUInteger m_size; 
                        NSUInteger m_capacity; 
                        NSUInteger m_table_size; 
                        NSUInteger m_extra_size; 
                        NSUInteger m_extra_index; 
                        void*m_rehashing; 
                        struct HashTraits<KB::String> { } m_traits; 
                        struct Bucket<KB::String,unsigned int> {} *m_table; 
                        struct Bucket<KB::String,unsigned int> {} *m_extra; 
                    } m_sort_keys_to_letter_forms; 
                } m_sort_key_converter; 
            } m_trie; 
            NSInteger m_log_level; 
        } x2; struct Vector<KB::Input> { 
            NSUInteger m_size; 
            NSUInteger m_capacity; 
            struct Input {} *m_elements; 
        } x3; struct String { 
            unsigned short m_size; 
            unsigned short m_capacity; 
            unsigned short m_length; 
            unsigned short m_sort_key_length; 
            unsigned char m_buffer_type; 
            char *m_buffer; 
            BOOL m_static_buffer[16]; 
        } x4; struct String { 
            unsigned short m_size; 
            unsigned short m_capacity; 
            unsigned short m_length; 
            unsigned short m_sort_key_length; 
            unsigned char m_buffer_type; 
            char *m_buffer; 
            BOOL m_static_buffer[16]; 
        } x5; struct Vector<KB::String> { 
            NSUInteger m_size; 
            NSUInteger m_capacity; 
            struct String {} *m_elements; 
        } x6; NSUInteger x7; NSUInteger x8; struct Hashmap<KB::String,KB::Word> { 
            NSUInteger m_size; 
            NSUInteger m_capacity; 
            NSUInteger m_table_size; 
            NSUInteger m_extra_size; 
            NSUInteger m_extra_index; 
            void*m_rehashing; 
            struct HashTraits<KB::String> { } m_traits; 
            struct Bucket<KB::String,KB::Word> {} *m_table; 
            struct Bucket<KB::String,KB::Word> {} *m_extra; 
        } x9; void*x10; void*x11; void*x12; void*x13; void*x14; void*x15; NSInteger x16; struct __CFString {} *x17; struct __CFLocale {} *x18; struct DynamicDictionary { 
            struct RefPtr<KB::DynamicDictionaryImpl> { 
                struct DynamicDictionaryImpl {} *m_ptr; 
            } m_impl; 
            NSInteger m_log_level; 
     /* Encoded args for previous method: ^{TIInputManagerAlphabet=^^?{StaticDictionaryAlphabet=^^?{WordTrie=^{ReadOnlyDataFile}^{ReadOnlyDataFile}I{RefPtr<KB::WordTrieNode>=^{WordTrieNode}}{WordTrieSearch={Vector<WTF::RefPtr<KB::WordTrieNode>,0ul>=I{VectorBuffer<WTF::RefPtr<KB::WordTrieNode>,0ul>=^{RefPtr<KB::WordTrieNode>}I}}i{String=SSSSC*[16c]}{String=SSSSC*[16c]}}{WordTrieSearch={Vector<WTF::RefPtr<KB::WordTrieNode>,0ul>=I{VectorBuffer<WTF::RefPtr<KB::WordTrieNode>,0ul>=^{RefPtr<KB::WordTrieNode>}I}}i{String=SSSSC*[16c]}{String=SSSSC*[16c]}}BB{TrieArrayCacheSet<KB::TrieArrayCache<KB::PackedTrieSibling, const char*>,const char*>={TrieArrayCache<KB::PackedTrieSibling,const char*>=*i[256C][256{PackedTrieSibling=(?=I{$_712=b24b2b2b1b1b1b1}{$_713=b8b8b8b8})(?=I{$_715=b23b1b8}{$_716=b8b8b8b8})[4C]}]*}{TrieArrayCache<KB::PackedTrieSibling,const char*>=*i[256C][256{PackedTrieSibling=(?=I{$_712=b24b2b2b1b1b1b1}{$_713=b8b8b8b8})(?=I{$_715=b23b1b8}{$_716=b8b8b8b8})[4C]}]*}}IIIf{SortKeyByteConverter=^^?[256I][256B]{Hashmap<KB::String,unsigned int>=IIIIIB{HashTraits<KB::String>=}^{Bucket<KB::String,unsigned int>}^{Bucket<KB::String,unsigned int>}}}}i}{Vector<KB::Input>=II^{Input}}{String=SSSSC*[16c]}{String=SSSSC*[16c]}{Vector<KB::String>=II^{String}}II{Hashmap<KB::String,KB::Word>=IIIIIB{HashTraits<KB::String>=}^{Bucket<KB::String,KB::Word>}^{Bucket<KB::String,KB::Word>}}BBBBBBi^{__CFString}^{__CFLocale}{DynamicDictionary={RefPtr<KB::DynamicDictionaryImpl>=^{DynamicDictionaryImpl}}i}B^{__CFDictionary}^{__CFArray}}8@0:4 */
    NSMutableString *m_composedText;
        } x19; void*x20; struct __CFDictionary {} *x21; struct __CFArray {} *x22; } *m_impl;
}

- (struct TIInputManagerAlphabet { int (**x1)(); struct StaticDictionaryAlphabet { int (**x_2_1_1)(); struct WordTrie { struct ReadOnlyDataFile {} *x_2_2_1; struct ReadOnlyDataFile {} *x_2_2_2; NSUInteger x_2_2_3; struct RefPtr<KB::WordTrieNode> { struct WordTrieNode {} *x_4_3_1; } x_2_2_4; struct WordTrieSearch { struct Vector<WTF::RefPtr<KB::WordTrieNode>,0ul> { NSUInteger x_1_4_1; struct VectorBuffer<WTF::RefPtr<KB::WordTrieNode>,0ul> { struct RefPtr<KB::WordTrieNode> {} *x_2_5_1; NSUInteger x_2_5_2; } x_1_4_2; } x_5_3_1; NSInteger x_5_3_2; struct String { unsigned short x_3_4_1; unsigned short x_3_4_2; unsigned short x_3_4_3; unsigned short x_3_4_4; unsigned char x_3_4_5; char *x_3_4_6; BOOL x_3_4_7[16]; } x_5_3_3; struct String { unsigned short x_4_4_1; unsigned short x_4_4_2; unsigned short x_4_4_3; unsigned short x_4_4_4; unsigned char x_4_4_5; char *x_4_4_6; BOOL x_4_4_7[16]; } x_5_3_4; } x_2_2_5; struct WordTrieSearch { struct Vector<WTF::RefPtr<KB::WordTrieNode>,0ul> { NSUInteger x_1_4_1; struct VectorBuffer<WTF::RefPtr<KB::WordTrieNode>,0ul> { struct RefPtr<KB::WordTrieNode> {} *x_2_5_1; NSUInteger x_2_5_2; } x_1_4_2; } x_6_3_1; NSInteger x_6_3_2; struct String { unsigned short x_3_4_1; unsigned short x_3_4_2; unsigned short x_3_4_3; unsigned short x_3_4_4; unsigned char x_3_4_5; char *x_3_4_6; BOOL x_3_4_7[16]; } x_6_3_3; struct String { unsigned short x_4_4_1; unsigned short x_4_4_2; unsigned short x_4_4_3; unsigned short x_4_4_4; unsigned char x_4_4_5; char *x_4_4_6; BOOL x_4_4_7[16]; } x_6_3_4; } x_2_2_6; /* Warning: Unrecognized filer type: 'B' using 'void*' */ void*x_2_2_7; void*x_2_2_8; struct TrieArrayCacheSet<KB::TrieArrayCache<KB::PackedTrieSibling, const char*>,const char*> { struct TrieArrayCache<KB::PackedTrieSibling,const char*> { char *x_1_4_1; NSInteger x_1_4_2; unsigned char x_1_4_3[256]; struct PackedTrieSibling { union { NSUInteger x_1_6_1; struct $_712 { unsigned int x_2_7_1 : 24; unsigned int x_2_7_2 : 2; unsigned int x_2_7_3 : 2; unsigned int x_2_7_4 : 1; unsigned int x_2_7_5 : 1; unsigned int x_2_7_6 : 1; unsigned int x_2_7_7 : 1; } x_1_6_2; struct $_713 { unsigned int x_3_7_1 : 8; unsigned int x_3_7_2 : 8; unsigned int x_3_7_3 : 8; unsigned int x_3_7_4 : 8; } x_1_6_3; } x_4_5_1; union { NSUInteger x_2_6_1; struct $_715 { unsigned int x_2_7_1 : 23; unsigned int x_2_7_2 : 1; unsigned int x_2_7_3 : 8; } x_2_6_2; struct $_716 { unsigned int x_3_7_1 : 8; unsigned int x_3_7_2 : 8; unsigned int x_3_7_3 : 8; unsigned int x_3_7_4 : 8; } x_2_6_3; } x_4_5_2; unsigned char x_4_5_3[4]; } x_1_4_4[256]; char *x_1_4_5; } x_9_3_1; struct TrieArrayCache<KB::PackedTrieSibling,const char*> { char *x_2_4_1; NSInteger x_2_4_2; unsigned char x_2_4_3[256]; struct PackedTrieSibling { union { NSUInteger x_1_6_1; struct $_712 { unsigned int x_2_7_1 : 24; unsigned int x_2_7_2 : 2; unsigned int x_2_7_3 : 2; unsigned int x_2_7_4 : 1; unsigned int x_2_7_5 : 1; unsigned int x_2_7_6 : 1; unsigned int x_2_7_7 : 1; } x_1_6_2; struct $_713 { unsigned int x_3_7_1 : 8; unsigned int x_3_7_2 : 8; unsigned int x_3_7_3 : 8; unsigned int x_3_7_4 : 8; } x_1_6_3; } x_4_5_1; union { NSUInteger x_2_6_1; struct $_715 { unsigned int x_2_7_1 : 23; unsigned int x_2_7_2 : 1; unsigned int x_2_7_3 : 8; } x_2_6_2; struct $_716 { unsigned int x_3_7_1 : 8; unsigned int x_3_7_2 : 8; unsigned int x_3_7_3 : 8; unsigned int x_3_7_4 : 8; } x_2_6_3; } x_4_5_2; unsigned char x_4_5_3[4]; } x_2_4_4[256]; char *x_2_4_5; } x_9_3_2; } x_2_2_9; NSUInteger x_2_2_10; NSUInteger x_2_2_11; NSUInteger x_2_2_12; float x_2_2_13; struct SortKeyByteConverter { int (**x_14_3_1)(); NSUInteger x_14_3_2[256]; void*x_14_3_3[256]; struct Hashmap<KB::String,unsigned int> { NSUInteger x_4_4_1; NSUInteger x_4_4_2; NSUInteger x_4_4_3; NSUInteger x_4_4_4; NSUInteger x_4_4_5; void*x_4_4_6; struct HashTraits<KB::String> { } x_4_4_7; struct Bucket<KB::String,unsigned int> {} *x_4_4_8; struct Bucket<KB::String,unsigned int> {} *x_4_4_9; } x_14_3_4; } x_2_2_14; } x_2_1_2; NSInteger x_2_1_3; } x2; struct Vector<KB::Input> { NSUInteger x_3_1_1; NSUInteger x_3_1_2; struct Input {} *x_3_1_3; } x3; struct String { unsigned short x_4_1_1; unsigned short x_4_1_2; unsigned short x_4_1_3; unsigned short x_4_1_4; unsigned char x_4_1_5; char *x_4_1_6; BOOL x_4_1_7[16]; } x4; struct String { unsigned short x_5_1_1; unsigned short x_5_1_2; unsigned short x_5_1_3; unsigned short x_5_1_4; unsigned char x_5_1_5; char *x_5_1_6; BOOL x_5_1_7[16]; } x5; struct Vector<KB::String> { NSUInteger x_6_1_1; NSUInteger x_6_1_2; struct String {} *x_6_1_3; } x6; NSUInteger x7; NSUInteger x8; struct Hashmap<KB::String,KB::Word> { NSUInteger x_9_1_1; NSUInteger x_9_1_2; NSUInteger x_9_1_3; NSUInteger x_9_1_4; NSUInteger x_9_1_5; void*x_9_1_6; struct HashTraits<KB::String> { } x_9_1_7; struct Bucket<KB::String,KB::Word> {} *x_9_1_8; struct Bucket<KB::String,KB::Word> {} *x_9_1_9; } x9; void*x10; void*x11; void*x12; void*x13; void*x14; void*x15; NSInteger x16; struct __CFString {} *x17; struct __CFLocale {} *x18; struct DynamicDictionary { struct RefPtr<KB::DynamicDictionaryImpl> { struct DynamicDictionaryImpl {} *x_1_2_1; } x_19_1_1; NSInteger x_19_1_2; } x19; void*x20; struct __CFDictionary {} *x21; struct __CFArray {} *x22; }*)initImplementation;
- (void)acceptInput;
- (id)addInput:(id)arg1 flags:(NSUInteger)arg2 point:(struct CGPoint { float x1; float x2; })arg3 firstDelete:(NSUInteger*)arg4 fromVariantKey:(BOOL)arg5;
- (void)addToTypingHistory:(id)arg1;
- (id)autocorrection;
- (struct __CFArray { }*)chargeableKeys;
- (struct __CFDictionary { }*)chargedKeyProbabilities;
- (void)clearAllCentroids;
- (void)clearDynamicDictionary;
- (void)clearInput;
- (void)dealloc;
- (void)decreaseUserFrequency:(id)arg1;
- (id)defaultCandidate;
- (id)deleteFromInput:(NSUInteger*)arg1;
- (BOOL)doesComposeText;
- (NSUInteger)externalIndexToInternal:(NSUInteger)arg1;
- (id)externalStringToInternal:(id)arg1;
- (void)increaseUserFrequency:(id)arg1;
- (id)init;
- (NSUInteger)inputCount;
- (BOOL)inputEmpty;
- (NSUInteger)inputIndex;
- (void)inputLocationChanged;
- (id)inputString;
- (NSUInteger)internalIndexToExternal:(NSUInteger)arg1;
- (id)internalStringToExternal:(id)arg1;
- (void)loadDictionaries;
- (void)registerCentroid:(struct CGPoint { float x1; float x2; })arg1 forKey:(id)arg2;
- (void)setAutoCorrects:(BOOL)arg1;
- (void)setAutoShift:(BOOL)arg1;
- (void)setCalculatesChargedKeyProbabilities:(BOOL)arg1;
- (void)setInput:(id)arg1;
- (void)setInputIndex:(NSUInteger)arg1;
- (void)setKeyboardMatchType:(NSInteger)arg1;
- (void)setShallowPrediction:(BOOL)arg1;
- (void)setShift:(BOOL)arg1;
- (id)shadowTyping;
- (void)textAccepted:(id)arg1;

@end
