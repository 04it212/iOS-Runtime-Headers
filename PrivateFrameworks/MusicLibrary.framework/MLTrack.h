/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

@interface MLTrack : NSObject <NSCopying> {
    void *_trackInfoContext;
}

@property(copy) NSString *lyrics;

- (id)_getImageDataForImageType:(NSInteger)arg1 artworkFormatID:(NSUInteger)arg2 size:(struct CGSize { float x1; float x2; })arg3 timeInMS:(NSUInteger)arg4 artworkInstanceInfo:(struct MLArtworkInstanceInfo { struct MLArtworkFormatSpec { NSUInteger x_1_1_1; NSUInteger x_1_1_2; NSUInteger x_1_1_3; NSUInteger x_1_1_4; NSInteger x_1_1_5; NSInteger x_1_1_6; } x1; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_2_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_2_1_2; } x2; }*)arg5;
- (BOOL)_isFilePathPlayable;
- (id)_libraryLinkArtist;
- (id)_libraryLinkKind;
- (id)_libraryLinkPlaylistName;
- (id)_libraryLinkURL:(BOOL)arg1;
- (unsigned long long)accountID;
- (id)album;
- (id)albumArtist;
- (unsigned long long)albumPID;
- (id)artist;
- (unsigned long long)artistPID;
- (unsigned long)audibleDRMGroupID;
- (id)audioBookName;
- (id)availableArtworkForImageType:(NSInteger)arg1 formatIDsForTimeInMS:(NSUInteger)arg2;
- (id)bestImageDataForImageType:(NSInteger)arg1 size:(struct CGSize { float x1; float x2; })arg2 timeInMS:(NSUInteger)arg3 artworkInstanceInfo:(struct MLArtworkInstanceInfo { struct MLArtworkFormatSpec { NSUInteger x_1_1_1; NSUInteger x_1_1_2; NSUInteger x_1_1_3; NSUInteger x_1_1_4; NSInteger x_1_1_5; NSInteger x_1_1_6; } x1; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_2_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_2_1_2; } x2; }*)arg4;
- (id)bestImageDataForImageType:(NSInteger)arg1 size:(struct CGSize { float x1; float x2; })arg2;
- (unsigned long)bpm;
- (id)chapterTOC;
- (void)clearLastPlayedBookmarkTime;
- (id)comments;
- (id)composer;
- (id)containerLibraryLinkURL;
- (id)contentRatingInfo;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)copyright;
- (NSInteger)customStopTimeInMS;
- (void)dealloc;
- (double)demoRentalDuration;
- (double)demoRentalPlaybackDuration;
- (double)demoRentalPlaybackStartTime;
- (double)demoRentalStartTime;
- (id)description;
- (id)directStoreURL;
- (unsigned long)discNumber;
- (NSInteger)duration;
- (NSInteger)durationInMS;
- (NSUInteger)episodeNumber;
- (id)eqPreset;
- (id)eqPresetName;
- (BOOL)fakeAsDemoRental;
- (id)filePath;
- (unsigned long long)fileSize;
- (void)gaplessHeuristicInfo:(NSUInteger*)arg1 duration:(NSUInteger*)arg2 lastPacketsResync:(NSUInteger*)arg3 encodingDelay:(NSUInteger*)arg4 encodingDrain:(NSUInteger*)arg5;
- (id)genre;
- (unsigned long long)genreID;
- (unsigned long long)globalID;
- (id)grouping;
- (BOOL)hasChapterArtwork;
- (BOOL)hasChapterData;
- (BOOL)hasDataForArtworkType:(NSInteger)arg1;
- (BOOL)hasLastPlayedBookmarkTime;
- (BOOL)hasLyrics;
- (BOOL)hasNominalAmountBeenPlayed;
- (BOOL)hasVideoData;
- (unsigned long)imageDBRecordID:(NSInteger)arg1;
- (id)imageDataForImageType:(NSInteger)arg1 artworkFormatID:(NSUInteger)arg2 timeInMS:(NSUInteger)arg3 artworkInstanceInfo:(struct MLArtworkInstanceInfo { struct MLArtworkFormatSpec { NSUInteger x_1_1_1; NSUInteger x_1_1_2; NSUInteger x_1_1_3; NSUInteger x_1_1_4; NSInteger x_1_1_5; NSInteger x_1_1_6; } x1; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_2_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_2_1_2; } x2; }*)arg4;
- (void)incrementPlayCountForPlayingToEnd;
- (BOOL)incrementPlayCountForStopTime:(double)arg1;
- (void)incrementSkipCount;
- (id)infoDescription;
- (id)infoShortDescription;
- (id)initWithTrackContext:(void*)arg1;
- (BOOL)isAudibleAudioBook;
- (BOOL)isCompilationTrack;
- (BOOL)isDemoRental;
- (BOOL)isEqualToTrack:(id)arg1;
- (BOOL)isExcludedFromShuffle;
- (BOOL)isExplicitBasedOnCurrentRestrictions;
- (BOOL)isHidden;
- (BOOL)isITunesU;
- (BOOL)isOTAPurchasedContent;
- (BOOL)isRental;
- (double)lastPlayedBookmarkTimeInSeconds;
- (double)lastPlayedDate;
- (double)lastSkippedDate;
- (id)libraryLinkURL;
- (id)lyrics;
- (BOOL)markAsDeleted;
- (BOOL)markHidden:(BOOL)arg1;
- (void)markNominalAmountHasBeenPlayed;
- (unsigned long)mediaType;
- (id)movieInfo;
- (double)nominalHasBeenPlayedThresholdInSeconds;
- (void)noteWasPlayedToTime:(double)arg1 skipped:(BOOL*)arg2;
- (unsigned long)number;
- (unsigned long)numberOfDiscs;
- (unsigned long)numberOfTracksInAlbum;
- (id)path;
- (unsigned long long)persistentUID;
- (NSUInteger)playCount;
- (id)podcastDirectStoreURL;
- (id)podcastName;
- (id)podcastStoreURL;
- (id)podcastURL;
- (BOOL)rating;
- (unsigned long)ratingLevel;
- (double)releaseDate;
- (id)seasonDisplayName;
- (NSUInteger)seasonNumber;
- (id)seriesDisplayName;
- (void)setLastPlayedBookmarkTimeInSeconds:(double)arg1;
- (void)setLyrics:(id)arg1;
- (void)setRating:(BOOL)arg1;
- (void)setVideoAudioTrackID:(NSUInteger)arg1;
- (void)setVideoSubtitleTrackID:(NSUInteger)arg1;
- (BOOL)sharesArtworkWithTrack:(id)arg1 artworkType:(NSInteger)arg2 formatID:(NSUInteger)arg3 timeInMS:(NSUInteger)arg4;
- (BOOL)shouldBookmarkLastPlayedTime;
- (NSUInteger)skipCount;
- (id)sortAlbum;
- (id)sortAlbumArtist;
- (id)sortArtist;
- (id)sortComposer;
- (id)sortSeriesDisplayName;
- (id)sortTitle;
- (NSInteger)startTimeInMS;
- (NSInteger)stopTimeInMS;
- (unsigned long long)storeItemAdamID;
- (unsigned long long)storePlaylistAdamID;
- (id)stringValueForProperty:(unsigned long)arg1;
- (double)timeValueForProperty:(unsigned long)arg1;
- (id)title;
- (NSInteger)totalTimeInMS;
- (unsigned long)trackIndexInAlbum;
- (void*)trackInfoContext;
- (unsigned long)uniqueID;
- (unsigned long long)unsignedValueForProperty:(unsigned long)arg1;
- (NSUInteger)videoAudioTrackID;
- (id)videoCodecs;
- (BOOL)videoHasAlternateAudio;
- (BOOL)videoHasSubtitles;
- (NSUInteger)videoSubtitleTrackID;
- (float)volumeAdjustment;
- (float)volumeNormalization;
- (unsigned long)year;

@end
