/* Generated by RuntimeBrowser on iPhone OS 4.0
   Image: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

@class NSMutableArray;



@interface MLMusicLibrary_SQL : MusicLibrary <MLMusicLibrarySubclassImpl>
{
    struct CPRecordStore { } *_storeRef;
    long long _lastRowid;
    BOOL _markAndDeleteTracksInProgress;
    NSMutableArray *_markAndDeleteTracksPendingQueue;
}

+ (void)recursiveEvaluationLockUnlock;
+ (struct CPRecordStore { }*)_sharedInstanceStoreRef;
+ (void)resetLibraryImpl;
+ (id)_nextFilepathForPlaylistOfType:(NSInteger)arg1;
+ (void)_dbSaveCoalesceEnd;
+ (void)noteItemTableWasModified;
+ (void)noteSharedRecordStoreChangedToStoreRef:(struct CPRecordStore { }*)arg1;
+ (void)_dbSyncWillBegin;
+ (void)_dbSyncDidEnd;
+ (void)_dbSaveCoalesceBegin;
+ (unsigned long long)syncGenerationID;
+ (BOOL)databaseDataFilesExist;
+ (void)beginDatabaseMigrationIfNecessary;
+ (id)geniusDatabasePath;
+ (Class)implClassForEvaluatingQuery:(id)arg1;
+ (void)recursiveEvaluationLockLock;
+ (BOOL)hasContent;

- (void)endPreloadingItems;
- (void)_loadMainStore;
- (void)memoryLevelDidChange;
- (void)_loadPurchaseData;
- (id)imageDataForTrack:(id)arg1 artworkType:(NSInteger)arg2 artworkFormatID:(NSUInteger)arg3 size:(struct CGSize { float x1; float x2; })arg4 artworkInstanceInfo:(struct MLArtworkInstanceInfo { struct MLArtworkFormatSpec { NSUInteger x_1_1_1; NSUInteger x_1_1_2; NSUInteger x_1_1_3; NSUInteger x_1_1_4; NSInteger x_1_1_5; NSInteger x_1_1_6; } x1; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_2_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_2_1_2; } x2; }*)arg5;
- (id)imageDataForTrack:(id)arg1 artworkType:(NSInteger)arg2 artworkFormatID:(NSUInteger)arg3 size:(struct CGSize { float x1; float x2; })arg4 chapterIndex:(NSUInteger)arg5 chapterTOC:(id)arg6 artworkInstanceInfo:(struct MLArtworkInstanceInfo { struct MLArtworkFormatSpec { NSUInteger x_1_1_1; NSUInteger x_1_1_2; NSUInteger x_1_1_3; NSUInteger x_1_1_4; NSInteger x_1_1_5; NSInteger x_1_1_6; } x1; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_2_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_2_1_2; } x2; }*)arg7;
- (id)availableArtworkFormatIDsForTrack:(id)arg1 artworkType:(NSInteger)arg2;
- (id)availableArtworkFormatIDsForTrack:(id)arg1 artworkType:(NSInteger)arg2 chapterIndex:(NSUInteger)arg3 chapterTOC:(id)arg4;
- (id)getTrackWithPersistentID:(unsigned long long)arg1 visibleOnly:(BOOL)arg2;
- (id)getRepresentativeTrackForAlbumPID:(unsigned long long)arg1;
- (id)preferredAudioTracks;
- (id)preferredSubtitleTracks;
- (BOOL)hasAnyVideos;
- (BOOL)hasMusicVideos;
- (BOOL)hasAudibleAudioBooks;
- (BOOL)hasAudioBooks;
- (BOOL)_hasEntitiesWithMediaType:(unsigned long)arg1 whenGroupedByProperty:(unsigned long)arg2 additionalPredicates:(id)arg3;
- (BOOL)_hasEntitiesWithMediaType:(unsigned long)arg1 whenGroupedByProperty:(unsigned long)arg2;
- (BOOL)hasCompilations;
- (BOOL)hasPodcasts;
- (BOOL)hasComposers;
- (BOOL)hasAlbums;
- (BOOL)hasArtists;
- (BOOL)hasGenres;
- (BOOL)hasPlaylists;
- (BOOL)hasITunesUContent;
- (BOOL)_hasPlaylistOfDistinguishedKind:(NSInteger)arg1 hidden:(BOOL)arg2;
- (BOOL)hasGeniusMixes;
- (BOOL)hasMovies;
- (BOOL)hasRentals;
- (BOOL)hasTVShows;
- (BOOL)hasVideoPodcasts;
- (void)_preloadNextItemChunk;
- (void)beginPreloadingItems;
- (void)_updateTrackDict:(id)arg1 withInformationFromTrackWithPersisentID:(id)arg2;
- (void)_saveTrackMetadata;
- (void)_savePlaylists;
- (BOOL)flushImplNow;
- (void)commitAllDeferredWork;
- (BOOL)markAndDeleteTracks:(id)arg1;
- (BOOL)markHiddenTracks:(id)arg1 hidden:(BOOL)arg2;
- (void)loadArtwork;
- (id)_activeDistinguishedPlaylistOfType:(NSInteger)arg1 localizedName:(NSInteger)arg2 localizedNameFallbackFormat:(NSInteger)arg3;
- (id)purchasedItemsPlaylist;
- (id)addPlaylistWithName:(id)arg1;
- (BOOL)deletePlaylists:(id)arg1;
- (void)mutatePlaylistImpl:(id)arg1 insertTracksWithRecordIDs:(struct __CPRecordIDArray { }*)arg2 atIndex:(NSUInteger)arg3;
- (void)mutatePlaylistImpl:(id)arg1 insertTracks:(id)arg2 atIndex:(NSUInteger)arg3;
- (void)addRecordIDsForTracksFromQuery:(id)arg1 entityRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg2 toArray:(struct __CPRecordIDArray { }*)arg3;
- (void)purchasedContentFolder:(id)arg1 willProcessItemWithXMLFilenames:(id)arg2;
- (void)purchasedContentFolder:(id)arg1 didProcessItemWithXMLFilenames:(id)arg2;
- (id)insertItemFromPurchaseFolder:(id)arg1 withItemProperties:(id)arg2;
- (BOOL)purchasedContentFolder:(id)arg1 loadItemWithProperties:(id)arg2 propertiesToSave:(id*)arg3;
- (id)getPlaylistWithPersistentUID:(unsigned long long)arg1 visibleOnly:(BOOL)arg2;
- (void)addStringToSortMap:(id)arg1;
- (struct CPRecordStore { }*)_storeRef;
- (void)noteSharedRecordStoreChangedToStoreRef:(struct CPRecordStore { }*)arg1;
- (BOOL)hasSongs;
- (id)getTrackWithGlobalID:(unsigned long long)arg1 visibleOnly:(BOOL)arg2;
- (void)_dbSyncDidEnd;
- (void)postInitSetup;
- (void)unloadArtwork;
- (id)activeGeniusPlaylist;
- (void)mutatePlaylistImpl:(id)arg1 insertEntitiesFromQuery:(id)arg2 entityIndexes:(id)arg3 atIndex:(NSUInteger)arg4 postNotifications:(BOOL)arg5;
- (void)mutatePlaylistChangeGroupBegin;
- (void)mutatePlaylistChangeGroupEnd;
- (void)mutatePlaylistImpl:(id)arg1 removeTracksInRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg2;
- (void)mutatePlaylistImpl:(id)arg1 moveEntitiesFromRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg2 toIndex:(NSUInteger)arg3;
- (id)initWithBasePath:(id)arg1;
- (void)flushPreparedStatementCacheImpl;
- (void)jetsamMemoryImpl;
- (id)getPlaylistWithUniqueID:(NSUInteger)arg1 visibleOnly:(BOOL)arg2;
- (void)updateActivePlaylistNamesForCurrentLanguage;
- (void)trackDynamicPropertyDidChange:(id)arg1 propertySelector:(SEL)arg2;
- (void)writePlaylistToSavedFile:(id)arg1;
- (id)activeOnTheGoPlaylist;
- (void)dealloc;

@end
