/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

@class ML3Query, ML3QueryResultSet_BackingStore, NSMutableArray, NSObject<OS_dispatch_queue>;

@interface ML3QueryResultSet : NSObject <NSCopying> {
    ML3QueryResultSet_BackingStore *_backingStore;
    ML3Query *_query;
    NSObject<OS_dispatch_queue> *_queue;
    long long _revision;
    BOOL _supportsIncrementalUpdate;
    NSMutableArray *_updateToLibraryCurrentRevisionCompletionBlocks;
}

@property(readonly) unsigned int count;
@property(readonly) ML3Query * query;
@property(readonly) long long revision;

- (void).cxx_destruct;
- (id)_initWithQuery:(id)arg1 supportsIncrementalUpdate:(BOOL)arg2;
- (void)_loadCurrentFullResults;
- (void)_mergeChangesWithFromNewPIDs:(const struct vector<long long, std::allocator<long long> > { struct _Vector_impl { long long *x_1_1_1; long long *x_1_1_2; long long *x_1_1_3; } x1; }*)arg1 changedPIDs:(struct unordered_set<long long, std::tr1::hash<long long>, std::equal_to<long long>, std::allocator<long long>, false> { struct _Identity<long long> { } x1; struct equal_to<long long> { } x2; struct hash<long long> { } x3; struct _Mod_range_hashing { } x4; struct allocator<std::tr1::__detail::_Hash_node<long long, false> > { } x5; struct _Hash_node<long long, false> {} **x6; unsigned int x7; unsigned int x8; struct _Prime_rehash_policy { float x_9_1_1; float x_9_1_2; unsigned long x_9_1_3; } x9; }*)arg2;
- (void)_onQueueAddUpdateFinishedBlock:(id)arg1;
- (void)_onQueueInvokeAndClearUpdateFinishedBlocksWithDidUpdateResult:(BOOL)arg1;
- (BOOL)_updateToLibraryCurrentRevision;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (unsigned int)count;
- (void)enumeratePersistentIDsUsingBlock:(id)arg1;
- (void)enumerateSectionHeadersUsingBlock:(id)arg1;
- (void)enumerateSectionsUsingBlock:(id)arg1;
- (id)initWithQuery:(id)arg1;
- (long long)persistentIDAtIndex:(unsigned int)arg1;
- (id)query;
- (long long)revision;
- (id)sectionIndexTitles;
- (unsigned int)songLimit;
- (BOOL)updateToLibraryCurrentRevision;

@end
