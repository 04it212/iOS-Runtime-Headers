/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

@class NSArray, NSString, ML3Predicate;

@interface ML3Container : ML3Entity {
}

@property(readonly) NSArray * cloudDisplayOrderingTerms;
@property(readonly) NSArray * displayOrderingTerms;
@property(readonly) ML3Predicate * dynamicPredicate;
@property(getter=isLimitOrderingDescending,readonly) BOOL limitOrderingDescending;
@property(readonly) NSArray * limitOrderingTerms;
@property(readonly) long long limitValue;
@property(getter=isLimitedByCount,readonly) BOOL limitedByCount;
@property(readonly) NSString * limitingProperty;
@property(readonly) ML3Predicate * staticPredicate;

+ (void)_insertNewSmartPlaylist:(id)arg1 criteriaBlob:(id)arg2 evaluationOrder:(unsigned long)arg3 limited:(BOOL)arg4 trackOrder:(unsigned long)arg5 distinguishedKind:(int)arg6 inLibrary:(id)arg7 cachedNameOrders:(id)arg8;
+ (id)autoCreatedBuiltInSmartPlaylistsPIDs:(id)arg1;
+ (BOOL)createMissingBuiltInSmartPlaylists:(id)arg1;
+ (id)databaseTable;
+ (id)defaultOrderingProperties;
+ (void)deleteAutoCreatedBuiltInSmartPlaylistsPIDs:(id)arg1 inLibrary:(id)arg2;
+ (id)extraTablesToDelete;
+ (id)foreignColumnForProperty:(id)arg1;
+ (id)foreignDatabaseTableForProperty:(id)arg1;
+ (BOOL)hasCriterionInCriteriaList:(struct SearchCriteriaList { }*)arg1 forITDBTrackField:(int)arg2;
+ (void)initialize;
+ (id)joinClausesForProperty:(id)arg1;
+ (id)nextFilepathForPlaylistType:(int)arg1 withPersistentID:(unsigned long long)arg2 inLibrary:(id)arg3;
+ (id)persistentIDColumnForTable:(id)arg1;
+ (void)populateDynamicContainersInLibrary:(id)arg1 createBuiltinSmartPlaylists:(BOOL)arg2;
+ (void)populateDynamicContainersInLibrary:(id)arg1;
+ (void)populateDynamicContainersWithTrackPersistentID:(id)arg1 inLibrary:(id)arg2 createBuiltinSmartPlaylists:(BOOL)arg3;
+ (void)populateDynamicContainersWithTrackPersistentID:(id)arg1 inLibrary:(id)arg2;
+ (void)populateSortOrdersOfPropertyValues:(id)arg1 inLibrary:(id)arg2 cachedNameOrders:(id)arg3;
+ (void)populateStaticItemsOfDynamicContainersInLibrary:(id)arg1;
+ (id)predicateForCriteriaList:(struct SearchCriteriaList { }*)arg1 dynamicCriteria:(BOOL)arg2;
+ (id)propertyForMPMediaEntityProperty:(id)arg1;
+ (int)revisionTrackingCode;
+ (id)sectionPropertyForProperty:(id)arg1;
+ (BOOL)smartCriteriaCanBeEvaluated:(id)arg1;

- (void)_accessCurrentSwappedPersisentIDsUsingBlock:(id)arg1;
- (BOOL)_setSwappedItemPersistentIDs:(const long long*)arg1 size:(int)arg2 notify:(BOOL)arg3;
- (BOOL)_setSwappedItemPersistentIDs:(const long long*)arg1 size:(int)arg2;
- (BOOL)addTrackWithPersistentID:(long long)arg1;
- (BOOL)addTracksWithPersistentIDs:(long long*)arg1 count:(unsigned int)arg2 notify:(BOOL)arg3;
- (BOOL)addTracksWithPersistentIDs:(long long*)arg1 count:(unsigned int)arg2;
- (void)bindPopulateStatement:(id)arg1 withStaticTrackPersistentID:(id)arg2;
- (id)cloudDisplayOrderingTerms;
- (void)didChangeValueForProperties:(const id*)arg1 count:(unsigned int)arg2;
- (id)displayOrderingTerms;
- (id)dynamicPredicate;
- (id)evaluationOrderingTerms;
- (struct SearchCriteriaList { }*)importedCriteriaList;
- (id)initWithDictionary:(id)arg1 inLibrary:(id)arg2 cachedNameOrders:(id)arg3;
- (BOOL)isCustomContainerOrderingDescending;
- (BOOL)isEvaluationOrderingDescending;
- (BOOL)isLimitOrderingDescending;
- (BOOL)isLimitedByCount;
- (id)limitOrderingTerms;
- (long long)limitValue;
- (id)limitingProperty;
- (BOOL)moveTrackFromIndex:(unsigned int)arg1 toIndex:(unsigned int)arg2;
- (id)populateSQLWithStaticTrackPersistentID:(id)arg1;
- (BOOL)removeAllTracks;
- (BOOL)removeTracksAtIndexes:(id)arg1 notify:(BOOL)arg2 indexesTransformBlock:(id)arg3;
- (BOOL)removeTracksAtIndexes:(id)arg1 notify:(BOOL)arg2;
- (BOOL)removeTracksAtIndexes:(id)arg1;
- (BOOL)removeTracksWithPersistentIDs:(const long long*)arg1 atFilteredIndexes:(id)arg2;
- (BOOL)setContainsTrack:(BOOL)arg1 forPersistentID:(long long)arg2 notify:(BOOL)arg3;
- (BOOL)setTracksWithPersistentIDs:(const long long*)arg1 count:(unsigned int)arg2 notify:(BOOL)arg3;
- (BOOL)setTracksWithPersistentIDs:(const long long*)arg1 count:(unsigned int)arg2;
- (BOOL)setTracksWithSwappedPersistentIDData:(id)arg1;
- (BOOL)setValue:(id)arg1 forProperty:(id)arg2;
- (id)staticPredicate;

@end
