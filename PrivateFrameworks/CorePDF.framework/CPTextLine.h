/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CorePDF.framework/CorePDF
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class CPCharSequence, NSArray;

@interface CPTextLine : CPTextObject <CPDisposable> {
    struct { NSUInteger x1; NSUInteger x2; NSInteger x3; NSInteger x4; struct CGRect { 
            struct CGPoint { 
                float x; 
                float y; 
            } origin; 
            struct CGSize { 
                float width; 
                float height; 
            } size; 
    BOOL baseLineIsNull;
    float baseline;
    CPCharSequence *charSequence;
    NSArray *columnBreaks;
    NSInteger columnNumber;
    BOOL disposed;
    BOOL hasBeenProcessed;
    BOOL hasBeenSplit;
    BOOL hasTabs;
    struct CPInlineContainer { NSUInteger x1; id x2; /* Warning: Unrecognized filer type: '"' using 'void*' */ void*x3; unsigned char x4; void*x5; unsigned char x6; void*x7; void*x8; in void*x9; void*x10; struct CPInlineContainer {} *x11; } *inlineList;
    BOOL irregular;
    BOOL isListItem;
    NSUInteger leftSpacerIndex;
    NSInteger levels;
    BOOL lineBreakAfter;
    NSInteger lineNumber;
    NSUInteger listSpacerIndex;
    float maximumLetterGap;
    float maximumWordGap;
    BOOL maySplit;
    float minimumOffset;
    float monospaceWidth;
    NSUInteger rightSpacerIndex;
    NSUInteger *spacesBefore;
    NSInteger tabsBefore;
    struct CPPDFStyle { struct CGColor {} *x1; struct CGColorSpace {} *x2; struct CGColor {} *x3; struct CGColorSpace {} *x4; float x5; float x6; unsigned char x7; unsigned char x8; NSInteger x9; float x10; id x11; /* Warning: Unrecognized filer type: '"' using 'void*' */ void*x12; unsigned char x13; void*x14; void*x15; out in void*x16; void*x17; float x18; struct CPPDFStyle {} *x19; } *uniformStyle;
    unsigned short uniformStyleFlags;
        } x5; } *wordArray;
    NSUInteger wordCount;
    NSArray *xsegments;
}

@property BOOL isListItem;
@property NSUInteger leftSpacerIndex;
@property BOOL lineBreakAfter;
@property NSUInteger listSpacerIndex;
@property NSUInteger rightSpacerIndex;

- (void)accept:(id)arg1;
- (NSInteger)align;
- (struct CGPoint { float x1; float x2; })anchor;
- (void)anchorChunk:(id)arg1 atWordIndex:(NSUInteger)arg2;
- (id)attributes;
- (NSInteger)baseLineAscending:(id)arg1;
- (NSInteger)baseLineDescending:(id)arg1;
- (float)baseline;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })bounds;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })boundsOfWordAtIndex:(NSUInteger)arg1;
- (BOOL)changesFontAt:(id)arg1;
- (id)charSequence;
- (id)columnBreaks;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (void)dispose;
- (void)finalize;
- (struct { NSUInteger x1; NSUInteger x2; NSInteger x3; NSInteger x4; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_5_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_5_1_2; } x5; }*)firstWord;
- (void)fitBoundsToChildren;
- (BOOL)hasBeenProcessed;
- (BOOL)hasBeenSplit;
- (BOOL)hasDropCap;
- (BOOL)hasJustifiedAlignment;
- (BOOL)hasTabs;
- (BOOL)hyphenated;
- (id)init;
- (NSUInteger)inlineCount;
- (struct CPInlineContainer { NSUInteger x1; id x2; struct CPInlineContainer {} *x3; }*)inlineList;
- (BOOL)irregular;
- (BOOL)isIndivisible;
- (BOOL)isListItem;
- (BOOL)isMonospaced;
- (struct { NSUInteger x1; NSUInteger x2; NSInteger x3; NSInteger x4; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_5_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_5_1_2; } x5; }*)lastWord;
- (NSUInteger)leftSpacerIndex;
- (NSInteger)levels;
- (BOOL)lineBreakAfter;
- (NSUInteger)listSpacerIndex;
- (BOOL)mapToWordPairs:(int (*)())arg1 passing:(void*)arg2;
- (BOOL)mapToWordPairsWithIndex:(int (*)())arg1 passing:(void*)arg2;
- (BOOL)mapToWords:(int (*)())arg1 passing:(void*)arg2;
- (BOOL)mapToWordsWithIndex:(int (*)())arg1 passing:(void*)arg2;
- (float)maximumLetterGap;
- (float)maximumWordGap;
- (float)medianFontSize;
- (float)monospaceWidth;
- (id)newTextLineFromWordAt:(NSUInteger)arg1 lengthInWords:(NSUInteger)arg2;
- (BOOL)overlapsHorizontally:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (BOOL)overlapsWith:(id)arg1;
- (id)properties;
- (void)recomputeBaseline;
- (void)recomputeLevels;
- (BOOL)removeTextLines:(id)arg1 whereTrue:(int (*)())arg2 passing:(void*)arg3;
- (NSUInteger)rightSpacerIndex;
- (void)setBaseline:(float)arg1;
- (void)setBaselineToNull;
- (void)setCharSequence:(id)arg1;
- (void)setColumnBreaks:(id)arg1;
- (void)setHasBeenProcessed:(BOOL)arg1;
- (void)setHasBeenSplit:(BOOL)arg1;
- (void)setHasTabs:(BOOL)arg1;
- (void)setIrregular:(BOOL)arg1;
- (void)setIsListItem:(BOOL)arg1;
- (void)setLeftSpacerIndex:(NSUInteger)arg1;
- (void)setLevels:(NSInteger)arg1;
- (void)setLineBreakAfter:(BOOL)arg1;
- (void)setListSpacerIndex:(NSUInteger)arg1;
- (void)setMaximumLetterGap:(float)arg1;
- (void)setMaximumWordGap:(float)arg1;
- (void)setRightSpacerIndex:(NSUInteger)arg1;
- (void)setSpaces:(NSUInteger)arg1 beforeWordAtIndex:(NSUInteger)arg2;
- (void)setTabsBefore:(NSInteger)arg1;
- (NSUInteger)spacesBeforeWordAtIndex:(NSUInteger)arg1;
- (BOOL)styleIsUniform:(struct CPPDFStyle {}**)arg1 styleFlags:(unsigned short)arg2;
- (NSInteger)tabsBefore;
- (NSInteger)topIsAbove:(id)arg1;
- (void)translateObjectYBy:(float)arg1;
- (struct { NSUInteger x1; NSUInteger x2; NSInteger x3; NSInteger x4; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_5_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_5_1_2; } x5; }*)wordArray;
- (struct { NSUInteger x1; NSUInteger x2; NSInteger x3; NSInteger x4; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_5_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_5_1_2; } x5; }*)wordArrayOfSize:(NSUInteger)arg1;
- (struct { NSUInteger x1; NSUInteger x2; NSInteger x3; NSInteger x4; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_5_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_5_1_2; } x5; }*)wordAtIndex:(NSUInteger)arg1;
- (NSUInteger)wordCount;
- (long)zOrder;

@end
