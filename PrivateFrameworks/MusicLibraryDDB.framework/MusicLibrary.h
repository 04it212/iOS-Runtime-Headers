/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MusicLibraryDDB.framework/MusicLibraryDDB
 */

@class NSDictionary, NSString;

@interface MusicLibrary : NSObject {
    unsigned int _needsFlush : 1;
    unsigned int _disableExternalPlaylistNotifications : 1;
    unsigned int _autoflushScheduled : 1;
    double _autoflushTargetTime;
    NSString *_basePath;
    void *_bridge;
    NSDictionary *_purchasedContentFolders;
}

+ (void)_beginCreatingSharedInstance;
+ (void)_dumpDebuggingInfo;
+ (void)_endCreatingSharedInstance;
+ (void)_postDatabaseChangeNotificationName:(id)arg1 changeType:(NSInteger)arg2;
+ (void)_setSharedMusicLibrary:(id)arg1;
+ (id)_sharedMusicLibrary:(BOOL)arg1;
+ (void)beginLanguageMigrationIfNecessary;
+ (void)checkForControlDirectoryLocationWithBasePath:(id)arg1;
+ (void)commitAllDeferredWork;
+ (id)controlDirectoryPathWithBasePath:(id)arg1;
+ (id)copyLocalizedStringForITTGLocString:(NSInteger)arg1;
+ (id)copyPurchaseContentFolderMapWithDelegate:(id)arg1;
+ (id)dbModDate;
+ (void)dbSyncDidEnd;
+ (void)dbSyncWillBegin;
+ (id)ddbConversionInfo;
+ (void)disableFlush;
+ (void)dumpDebuggingInfo;
+ (void)enableFlush;
+ (NSInteger)filenameFormatResourceForPlaylistType:(NSInteger)arg1;
+ (BOOL)flush;
+ (id)geniusDatabasePath;
+ (BOOL)hasContent;
+ (id)iTunesLibraryPackageDBTempFolder;
+ (void)initialize;
+ (BOOL)isDBSyncActive;
+ (BOOL)isFlushEnabled;
+ (void)jetsamMemory;
+ (id)mediaFolderRelativePath:(id)arg1;
+ (void)noteDBSyncIsActive;
+ (id)pathForResourceFileOrFolder:(NSInteger)arg1 basePath:(id)arg2 createParentFolderIfNecessary:(BOOL)arg3;
+ (id)pathForResourceFileOrFolder:(NSInteger)arg1 basePath:(id)arg2 relativeToBase:(BOOL)arg3;
+ (id)pathForResourceFileOrFolder:(NSInteger)arg1;
+ (void)postDatabaseContentsDidChangeNotification:(NSInteger)arg1;
+ (void)postDatabaseContentsWillChangeNotification:(NSInteger)arg1;
+ (id)purchasedContentXMLFilenames;
+ (void)resetLibrary;
+ (id)sharedMusicLibrary;
+ (Class)sharedMusicLibraryClass;
+ (Class)sharedMusicLibraryClass;
+ (BOOL)sharedMusicLibraryExists;
+ (id)sharedMusicLibraryIfExists;
+ (unsigned long long)syncGenerationID;
+ (BOOL)updatePurchasedContent;

- (void)_autoflush;
- (void)_cancelAutoflush;
- (BOOL)_dbUpdatePurchasedContent;
- (id)_debugGetTracksStartingAtTrackWithPersistentID:(unsigned long long)arg1 maxTracks:(NSUInteger)arg2 stride:(NSInteger)arg3;
- (void)_dumpDebuggingInfo;
- (void)_dumpDebuggingInfoAfterInit;
- (id)_getPurchaseContentFolders;
- (id)_preparedPlaylistChangeUserInfoForDeletionRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg1 insertionRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg2;
- (id)activeGeniusPlaylist;
- (id)activeOnTheGoPlaylist;
- (id)basePath;
- (void)beginPreloadingItems;
- (void)commitAllDeferredWork;
- (NSUInteger)countOfAllAudioTracks;
- (BOOL)countOfAllAudioTracksIsNonZero;
- (NSUInteger)countOfAllVideoTracks;
- (BOOL)countOfAllVideoTracksIsNonZero;
- (NSUInteger)countOfPurchasedContent;
- (void)dealloc;
- (void)debugLogPerfStatistics;
- (BOOL)deletePlaylist:(id)arg1;
- (void)endPreloadingItems;
- (void)ensureSpecialUserPlaylistsExist;
- (BOOL)flush;
- (struct MLArtworkFormatSpec { NSUInteger x1; NSUInteger x2; NSUInteger x3; NSUInteger x4; NSInteger x5; NSInteger x6; })formatSpecForArtworkFormatID:(NSUInteger)arg1;
- (id)getPlaylistWithPersistentUID:(unsigned long long)arg1 visibleOnly:(BOOL)arg2;
- (id)getPlaylistWithUniqueID:(NSUInteger)arg1 visibleOnly:(BOOL)arg2;
- (id)getTrackWithGlobalID:(unsigned long long)arg1 visibleOnly:(BOOL)arg2;
- (id)getTrackWithPersistentID:(unsigned long long)arg1 visibleOnly:(BOOL)arg2;
- (BOOL)hasAlbums;
- (BOOL)hasAnyVideos;
- (BOOL)hasArtists;
- (BOOL)hasAudibleAudioBooks;
- (BOOL)hasAudioBooks;
- (BOOL)hasCompilations;
- (BOOL)hasComposers;
- (BOOL)hasGenres;
- (BOOL)hasPlaylists;
- (BOOL)hasPodcasts;
- (BOOL)hasSongs;
- (id)initWithBasePath:(id)arg1;
- (void)loadArtwork;
- (id)localizedSectionHeaderForSectionHeader:(id)arg1;
- (id)localizedSectionIndexForSectionHeader:(id)arg1;
- (BOOL)markAndDeleteTracks:(id)arg1;
- (BOOL)markHiddenTracks:(id)arg1 hidden:(BOOL)arg2;
- (NSUInteger)maximumGeniusPlaylistTrackCount;
- (NSUInteger)minimumGeniusPlaylistTrackCount;
- (void)mutatePlaylist:(id)arg1 insertEntitiesFromQuery:(id)arg2 entityIndexes:(id)arg3 atIndex:(NSUInteger)arg4 postNotifications:(BOOL)arg5;
- (void)mutatePlaylist:(id)arg1 insertTracks:(id)arg2 atIndex:(NSUInteger)arg3 postNotifications:(BOOL)arg4;
- (void)mutatePlaylist:(id)arg1 moveEntitiesFromRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg2 toIndex:(NSUInteger)arg3 postNotifications:(BOOL)arg4;
- (void)mutatePlaylist:(id)arg1 removeTracksInRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg2 postNotifications:(BOOL)arg3;
- (void)mutatePlaylist:(id)arg1 replaceEntitiesInRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg2 withTracks:(id)arg3 postNotifications:(BOOL)arg4;
- (void)mutatePlaylistImpl:(id)arg1 insertTracks:(id)arg2 atIndex:(NSUInteger)arg3;
- (void)mutatePlaylistImpl:(id)arg1 insertTracksFromQuery:(id)arg2 entityRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg3 atIndex:(NSUInteger)arg4;
- (void)mutatePlaylistImpl:(id)arg1 moveEntitiesFromRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg2 toIndex:(NSUInteger)arg3;
- (void)mutatePlaylistImpl:(id)arg1 removeTracksInRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg2;
- (void)notePlaylistAdded:(id)arg1;
- (void)notePlaylistAttributesMutated:(id)arg1;
- (void)notePlaylistContentsDidMutate:(id)arg1 deletionRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg2 insertionRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg3;
- (void)notePlaylistContentsDidMutate:(id)arg1 didMoveItemsFromRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg2 toIndex:(NSUInteger)arg3;
- (void)notePlaylistContentsDidMutate:(id)arg1 didReplaceItemsInRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg2 withInsertionCount:(NSUInteger)arg3;
- (void)notePlaylistContentsDidMutate:(id)arg1 userInfo:(id)arg2;
- (void)notePlaylistContentsWillMutate:(id)arg1 deletionRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg2 insertionRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg3;
- (void)notePlaylistContentsWillMutate:(id)arg1 userInfo:(id)arg2;
- (void)notePlaylistContentsWillMutate:(id)arg1 willMoveItemsFromRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg2 toIndex:(NSUInteger)arg3;
- (void)notePlaylistContentsWillMutate:(id)arg1 willReplaceItemsInRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg2 withInsertionCount:(NSUInteger)arg3;
- (void)notePlaylistNeedsSaving:(id)arg1;
- (void)notePlaylistRemoved:(id)arg1;
- (id)pathForResourceFileOrFolder:(NSInteger)arg1 createParentFolderIfNecessary:(BOOL)arg2;
- (id)pathForResourceFileOrFolder:(NSInteger)arg1;
- (id)preferredAudioTracks;
- (id)preferredSubtitleTracks;
- (id)purchasedContentFolderMap;
- (id)purchasedContentFolders;
- (id)purchasedItemsPlaylist;
- (void)scheduleAutoflushWithInterval:(double)arg1;
- (id)sectionIndexEllipsis;
- (id)sectionIndexForSectionHeader:(id)arg1;
- (id)sectionIndices;
- (void)trackDynamicPropertyDidChange:(id)arg1 propertySelector:(SEL)arg2;
- (void)trackDynamicPropertyWillChange:(id)arg1 propertySelector:(SEL)arg2;
- (void)unloadArtwork;
- (void)writePlaylistToSavedFile:(id)arg1;

@end
