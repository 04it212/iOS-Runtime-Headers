/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/IMAVCore.framework/IMAVCore
 */

@class NSTimer, IMHandle, IMAccount, NSData, IMPair, NSError, IMAVChatParticipant, NSDate, <IMAVChatDelegate>, NSDictionary, NSArray, IMAVChatFeature, <IMAVChatTheaterDelegate>, NSString, NSMutableDictionary, NSMutableArray, NSNumber;

@interface IMAVChat : NSObject <IMSystemMonitorListener> {
    struct CGSize { 
        float width; 
        float height; 
    struct CGSize { 
        float width; 
        float height; 
    NSString *_GUID;
    BOOL _Q8IrisOpen;
    unsigned int _addStatus;
    int _addableParticipants;
    IMAVChatFeature *_ard;
    int _ardRole;
    IMAVChatFeature *_auxVideo;
    NSTimer *_breakBeforeMakeTimeoutTimer;
    int _callID;
    NSString *_callStatisticsGUID;
    NSDictionary *_callerProperties;
    id _conferenceController;
    NSString *_conferenceID;
    NSData *_connectData;
    double _connectionTimeoutTime;
    NSTimer *_connectionTimeoutTimer;
    int _connectionType;
    BOOL _dataIn;
    BOOL _dataOut;
    NSDate *_dateConnected;
    NSDate *_dateCreated;
    NSDate *_dateEnded;
    NSDate *_dateStartedConnecting;
    id _delegate;
    BOOL _didRemoteMute;
    BOOL _didRemotePause;
    NSError *_error;
    NSDictionary *_errorDict;
    NSMutableDictionary *_extraServerContext;
    NSTimer *_firstFrameTimeoutTimer;
    BOOL _hasGatheredInfo;
    BOOL _hasPendingAccept;
    BOOL _hasPendingInit;
    BOOL _hasReceivedFirstFrame;
    IMHandle *_initiator;
    double _invitationTimeoutTime;
    NSTimer *_inviteTimeoutTimer;
    BOOL _isCaller;
    BOOL _isCounterProposalConnect;
    BOOL _isListening;
    BOOL _isTerminating;
    BOOL _isVideo;
    } _landscapeAspectRatios;
    unsigned int _lastPostedState;
    BOOL _localCell;
    IMAVChatParticipant *_localParticipant;
    unsigned int _localState;
    NSNumber *_natType;
    BOOL _needToSendEndConferenceNotification;
    BOOL _needsAudioRestart;
    BOOL _needsVideoRestart;
    NSString *_participantNames;
    BOOL _participantOrderFinal;
    NSMutableArray *_participants;
    IMPair *_pendingPreemptiveRelayInitate;
    } _portraitAspectRatios;
    struct dispatch_queue_s { } *_queue;
    IMAVChatFeature *_recorder;
    BOOL _remoteCell;
    BOOL _remoteNetworkStall;
    NSTimer *_screenSaverBlockingTimer;
    unsigned int _sessionID;
    BOOL _silentConference;
    BOOL _suppressBeginChat;
    id _theaterDelegate;
    NSMutableDictionary *_unknownPartyStates;
    BOOL _usingCoercedIDs;
}

@property(retain) NSString * GUID;
@property(readonly) BOOL _allParticipantsUsingICE;
@property(setter=_setCallStatisticsGUID:,retain) NSString * _callStatisticsGUID;
@property(setter=_setCallStatisticsGUID:,retain) NSString * _callStatisticsGUID;
@property(setter=_setConferenceController:) id _conferenceController;
@property(setter=_setConnectionType:) int _connectionType;
@property(setter=_setConnectionType:) int _connectionType;
@property(readonly) NSDictionary * _extraServerContext;
@property(setter=_setLocalCell:) BOOL _localCell;
@property(setter=_setNatType:,retain) NSNumber * _natType;
@property(setter=_setNeedsAudioRestart:) BOOL _needsAudioRestart;
@property(setter=_setNeedsVideoRestart:) BOOL _needsVideoRestart;
@property(readonly) struct dispatch_queue_s { }* _queue;
@property(setter=_setRemoteCell:) BOOL _remoteCell;
@property(readonly) IMAccount * account;
@property(readonly) unsigned int addStatus;
@property(readonly) int addableParticipants;
@property BOOL allowsVideo;
@property float audioVolume;
@property int callID;
@property(setter=_setCallerProperties:,retain) NSDictionary * callerProperties;
@property unsigned int cameraOrientation;
@property unsigned int cameraType;
@property(readonly) BOOL canUseRelay;
@property(retain) NSString * conferenceID;
@property double connectionTimeoutTime;
@property(readonly) BOOL dataIn;
@property(readonly) BOOL dataOut;
@property(readonly) NSDate * dateConnected;
@property(readonly) NSDate * dateCreated;
@property(readonly) NSDate * dateEnded;
@property <IMAVChatDelegate> * delegate;
@property(readonly) BOOL didRemoteMute;
@property(readonly) BOOL didRemotePause;
@property(readonly) int endedError;
@property(readonly) unsigned int endedReason;
@property(readonly) NSDictionary * errorDictionary;
@property(readonly) BOOL hasReceivedFirstFrame;
@property(readonly) IMHandle * initiatorIMHandle;
@property(readonly) IMAVChatParticipant * initiatorParticipant;
@property double invitationTimeoutTime;
@property(readonly) BOOL isAOLInterop;
@property(readonly) BOOL isActive;
@property(readonly) BOOL isCaller;
@property(readonly) BOOL isChatMute;
@property(readonly) BOOL isChatPaused;
@property(setter=setConferenceSilent:) BOOL isConferenceSilent;
@property(setter=setMute:) BOOL isMute;
@property(readonly) BOOL isOneWay;
@property(setter=setPaused:) BOOL isPaused;
@property(readonly) BOOL isQ8IrisOpen;
@property(setter=setRemoteMute:) BOOL isRemoteMute;
@property(setter=setRemotePaused:) BOOL isRemotePaused;
@property BOOL isSendingAudio;
@property BOOL isSendingVideo;
@property(readonly) BOOL isStateFinal;
@property(readonly) BOOL isVideo;
@property(readonly) IMAVChatParticipant * localParticipant;
@property void* localVideoBackLayer;
@property void* localVideoLayer;
@property BOOL lockCamera;
@property(readonly) int numActiveParticipants;
@property(readonly) IMHandle * otherIMHandle;
@property(readonly) NSString * participantNames;
@property(readonly) NSArray * participants;
@property(readonly) NSArray * remoteParticipants;
@property(readonly) unsigned int sessionID;
@property(readonly) unsigned int state;
@property <IMAVChatTheaterDelegate> * theaterDelegate;
@property(readonly) NSDictionary * vcErrorReport;

+ (BOOL)_anyOfTheseParticipants:(id)arg1 matchAnyOfTheseIMHandles:(id)arg2;
+ (id)_avChatArray;
+ (void)_doSendUpdate;
+ (void)_sendUpdate;
+ (id)activeChat;
+ (id)allowedClassesForArchives;
+ (id)avChatInvitedByIMHandle:(id)arg1 orConferenceID:(id)arg2;
+ (id)avChatWaitingForReplyFromIMHandle:(id)arg1 orConferenceID:(id)arg2;
+ (id)avChatWithConferenceID:(id)arg1;
+ (id)avChatWithMatchingIMHandles:(id)arg1 video:(BOOL)arg2 ARDRole:(int)arg3;
+ (id)bestGuessAVChatWithIMHandle:(id)arg1 conferenceID:(id)arg2 sessionID:(unsigned int)arg3 properties:(id)arg4;
+ (id)chatList;
+ (id)chatWithSessionID:(unsigned int)arg1;
+ (id)chatsWithIMAVChatState:(unsigned int)arg1;
+ (id)connectedChat;
+ (id)connectedChats;
+ (id)connectingChats;
+ (id)currentAVChatInfo;
+ (double)defaultConnectionTimeoutTime;
+ (double)defaultInvitationTimeoutTime;
+ (void)getVideoStillForIMHandle:(id)arg1 data:(id*)arg2 result:(unsigned int*)arg3;
+ (id)incomingInvitations;
+ (BOOL)isIMHandleInActiveConference:(id)arg1;
+ (BOOL)isStateActive:(unsigned int)arg1;
+ (BOOL)isStateFinal:(unsigned int)arg1;
+ (int)maxRemoteParticipantsVideo:(BOOL)arg1;
+ (id)nonFinalChat;
+ (id)outgoingInvitations;
+ (void)setDefaultConnectionTimeoutTime:(double)arg1;
+ (void)setDefaultInvitationTimeoutTime:(double)arg1;
+ (int)systemSupportsNewOutgoingConferenceTo:(id)arg1 isVideo:(BOOL)arg2 isARD:(BOOL)arg3;
+ (int)systemSupportsNewOutgoingConferenceTo:(id)arg1 isVideo:(BOOL)arg2;

- (id)GUID;
- (void)_VCCounterProposal:(id)arg1;
- (BOOL)_allParticipantsUsingICE;
- (void)_blockScreenSaver:(id)arg1;
- (void)_breakBeforeMakeTimer:(id)arg1;
- (id)_callLoggingOutput;
- (id)_callStatisticsGUID;
- (void)_cancelInvitationWithReason:(unsigned int)arg1 error:(int)arg2;
- (BOOL)_checkVCResponseDict:(id)arg1;
- (void)_clearBreakBeforeMakeTimer;
- (void)_clearConnectionTimeoutTimer;
- (void)_clearFirstFrameTimeoutTimer;
- (void)_clearInvitationTimeoutTimer;
- (void)_clearScreenSaverBlockingTimer;
- (id)_conferenceController;
- (void)_configureVCC;
- (void)_configureVCCRecv;
- (void)_connectTo:(id)arg1 withData:(id)arg2;
- (void)_connectionTimeout:(id)arg1;
- (int)_connectionType;
- (void)_counterPropose:(id)arg1;
- (id)_currentAVChatInfo;
- (void)_determineDataIn;
- (void)_endChatWithReason:(unsigned int)arg1 andError:(int)arg2;
- (id)_extraServerContext;
- (void)_finalizeParticipantOrder:(id)arg1 andNotify:(BOOL)arg2;
- (void)_firstFrameTimeout:(id)arg1;
- (void)_handleAVError:(id)arg1;
- (void)_handleRelayCancel:(id)arg1 fromParticipant:(id)arg2;
- (void)_handleRelayInitate:(id)arg1 fromParticipant:(id)arg2;
- (void)_handleRelayUpdate:(id)arg1 fromParticipant:(id)arg2;
- (void)_imHandleStatusChanged:(id)arg1;
- (BOOL)_imHandlesRequireCoercedIDs:(id)arg1;
- (void)_initParticipantsWithIMHandles:(id)arg1;
- (void)_initParticipantsWithNuggets:(id)arg1;
- (id)_initWith:(id)arg1 invitedBy:(id)arg2 ARDRole:(int)arg3 sessionID:(unsigned int)arg4 video:(BOOL)arg5 extraProperties:(id)arg6;
- (int)_initialRelayStatus;
- (void)_initiatorInfoChanged:(id)arg1;
- (void)_insertRemoteParticipant:(id)arg1 atIndex:(unsigned int)arg2;
- (void)_invitationTimeout:(id)arg1;
- (void)_inviteeInfoChanged:(id)arg1;
- (BOOL)_localCell;
- (void)_mainThreadFinishPrepareConnectionForInvitedParty:(id)arg1;
- (BOOL)_moveVCPartyID:(id)arg1 toIndex:(unsigned int)arg2 inCount:(unsigned int)arg3;
- (id)_natType;
- (BOOL)_needsAudioRestart;
- (BOOL)_needsVideoRestart;
- (void)_noteConferenceConnected:(id)arg1;
- (void)_noteFirstFrame;
- (void)_noteInviteDeliveredForParticipant:(id)arg1;
- (void)_noteStatusChangesForParticipant:(id)arg1;
- (id)_participantMatchingVCPartyID:(id)arg1;
- (void)_participantsChanged:(id)arg1;
- (BOOL)_participantsCheckOut;
- (void)_peerID:(id)arg1 changedTo:(id)arg2;
- (void)_postNotificationName:(id)arg1 participant:(id)arg2 userInfo:(id)arg3;
- (void)_postNotificationName:(id)arg1 userInfo:(id)arg2;
- (void)_postParticipantMediaChangeNotification:(id)arg1 cameraChanged:(BOOL)arg2 orientationChanged:(BOOL)arg3 aspectChanged:(BOOL)arg4 cameraWillSwitch:(BOOL)arg5 camera:(unsigned int)arg6 orientation:(unsigned int)arg7 aspect:(struct CGSize { float x1; float x2; })arg8;
- (void)_postStateToDelegateIfNecessary;
- (void)_prepareConnectionForParticipant:(id)arg1;
- (struct dispatch_queue_s { }*)_queue;
- (void)_refreshAddableParticipants;
- (void)_relayPropose:(id)arg1;
- (BOOL)_remoteCell;
- (void)_reportError:(id)arg1;
- (void)_responseToVCInvite:(id)arg1;
- (void)_resumeAudioState;
- (void)_resumeVideoState;
- (void)_saveAudioRestartState;
- (void)_saveVideoRestartState;
- (void)_sendVCUpdateTo:(id)arg1 skipConnected:(BOOL)arg2;
- (void)_setActiveConference;
- (void)_setBreakBeforeMakeTimer;
- (void)_setCallStatisticsGUID:(id)arg1;
- (void)_setCallerProperties:(id)arg1;
- (void)_setConferenceController:(id)arg1;
- (void)_setConferenceID:(id)arg1;
- (void)_setConnectionTimeoutTimer;
- (void)_setConnectionType:(int)arg1;
- (void)_setCreationDate;
- (void)_setErrorDictionary:(id)arg1;
- (void)_setFirstFrameTimeoutTimer;
- (void)_setInvitationTimeoutTimer;
- (void)_setLocalCell:(BOOL)arg1;
- (void)_setNatType:(id)arg1;
- (void)_setNeedsAudioRestart:(BOOL)arg1;
- (void)_setNeedsVideoRestart:(BOOL)arg1;
- (void)_setRemoteCell:(BOOL)arg1;
- (void)_setScreenSaverBlockingTimer;
- (void)_setStateDisconnected;
- (void)_subscribeToVCNotifications;
- (void)_threadedPrepareConnectionForInvitedParty:(id)arg1;
- (void)_unknownParty:(id)arg1 didConnect:(BOOL)arg2;
- (void)_unknownParty:(id)arg1 muteOrPause:(unsigned int)arg2 didChange:(BOOL)arg3;
- (void)_updateIMHandleInBuddyList:(id)arg1;
- (void)_updateParticipantsWithData:(id)arg1;
- (void)_vccInitDidFinish;
- (void)acceptInvitation;
- (id)account;
- (unsigned int)addStatus;
- (unsigned int)addStatusForIMHandle:(id)arg1 asVideo:(BOOL)arg2 ardRole:(int)arg3;
- (int)addableParticipants;
- (BOOL)allowsVideo;
- (float)audioVolume;
- (void)auxVideoBeganForPersonWithID:(id)arg1;
- (void)auxVideoEndedForPersonWithID:(id)arg1;
- (void)beginChat;
- (int)callID;
- (id)callerProperties;
- (unsigned int)cameraOrientation;
- (unsigned int)cameraType;
- (BOOL)canAddIMHandle:(id)arg1;
- (BOOL)canUseRelay;
- (void)cancelInvitation;
- (BOOL)closeCamera;
- (void)conferenceHasTimedOut;
- (void)conferenceHasVideoError;
- (void)conferenceHungUpByPersonWithID:(id)arg1;
- (id)conferenceID;
- (void)conferencePersonWithID:(id)arg1 approvedAuxVideo:(BOOL)arg2;
- (void)conferencePersonWithID:(id)arg1 completedWithInfo:(id)arg2;
- (void)conferencePersonWithID:(id)arg1 didCancel:(BOOL)arg2;
- (void)conferencePersonWithID:(id)arg1 didConnect:(BOOL)arg2;
- (void)conferencePersonWithID:(id)arg1 didMute:(BOOL)arg2;
- (void)conferencePersonWithID:(id)arg1 didPause:(BOOL)arg2;
- (void)conferencePersonWithID:(id)arg1 didStall:(BOOL)arg2;
- (void)conferencePersonWithID:(id)arg1 hasInfoForInsufficientBandwidth:(id)arg2;
- (void)conferencePersonWithID:(id)arg1 hasInfoForNoPackets:(id)arg2;
- (void)conferencePersonWithID:(id)arg1 sendRelayCancel:(id)arg2;
- (void)conferencePersonWithID:(id)arg1 sendRelayRequest:(id)arg2;
- (void)conferencePersonWithID:(id)arg1 sendRelayUpdate:(id)arg2;
- (void)connectProc:(id)arg1;
- (double)connectionTimeoutTime;
- (BOOL)dataIn;
- (BOOL)dataOut;
- (id)dateConnected;
- (id)dateCreated;
- (id)dateEnded;
- (void)dealloc;
- (void)declineInvitation;
- (void)declineInvitationWithResponse:(unsigned int)arg1;
- (id)delegate;
- (id)description;
- (BOOL)didRemoteMute;
- (BOOL)didRemotePause;
- (void)endChat;
- (void)endChatWithError:(int)arg1;
- (void)endChatWithReason:(unsigned int)arg1 error:(int)arg2;
- (void)endChatWithReason:(unsigned int)arg1;
- (int)endedError;
- (unsigned int)endedReason;
- (id)error;
- (id)errorDictionary;
- (void)finalizeOrderWithVideoFrom:(id)arg1;
- (void)handleGenericAVMessageFromParticipant:(id)arg1 type:(unsigned int)arg2 userInfo:(id)arg3;
- (void)handleVideoConferenceNotification:(id)arg1;
- (BOOL)hasReceivedFirstFrame;
- (id)initIncomingFrom:(id)arg1 isVideo:(BOOL)arg2 callerProperties:(id)arg3;
- (id)initOutgoingTo:(id)arg1 isVideo:(BOOL)arg2 ARDRole:(int)arg3;
- (id)initOutgoingTo:(id)arg1 isVideo:(BOOL)arg2;
- (id)initPersistentAVChatWith:(id)arg1 invitedBy:(id)arg2 ARDRole:(int)arg3 sessionID:(unsigned int)arg4 video:(BOOL)arg5;
- (id)initiatorIMHandle;
- (id)initiatorParticipant;
- (void)invalidateParticipantNames;
- (double)invitationTimeoutTime;
- (void)invite:(id)arg1;
- (void)inviteAll;
- (id)inviteesInfoAsPlist:(BOOL)arg1 account:(id)arg2;
- (BOOL)isAOLInterop;
- (BOOL)isActive;
- (BOOL)isCaller;
- (BOOL)isChatMute;
- (BOOL)isChatPaused;
- (BOOL)isConferenceSilent;
- (BOOL)isLocalNetworkStalled;
- (BOOL)isMute;
- (BOOL)isOneWay;
- (BOOL)isPaused;
- (BOOL)isQ8IrisOpen;
- (BOOL)isRemoteMute;
- (BOOL)isRemoteNetworkStalled;
- (BOOL)isRemotePaused;
- (BOOL)isSendingAudio;
- (BOOL)isSendingVideo;
- (BOOL)isStateFinal;
- (BOOL)isVideo;
- (struct CGSize { float x1; float x2; })localAspectRatioForCameraOrientation:(unsigned int)arg1 cameraType:(unsigned int)arg2;
- (id)localParticipant;
- (void*)localVideoBackLayer;
- (void*)localVideoLayer;
- (BOOL)lockCamera;
- (void)notifySystemVC:(BOOL)arg1;
- (int)numActiveParticipants;
- (BOOL)openCamera;
- (id)orderedRemotePartyIDs;
- (id)otherIMHandle;
- (void)participant:(id)arg1 changedFromState:(unsigned int)arg2 toState:(unsigned int)arg3;
- (id)participantMatchingIMHandle:(id)arg1;
- (id)participantNames;
- (id)participantWithID:(id)arg1;
- (id)participants;
- (id)participantsNotInNuggets:(id)arg1;
- (id)remoteParticipants;
- (void)removeParticipantWithID:(id)arg1;
- (void)sendARDFileTransferAuthorization:(id)arg1 to:(id)arg2;
- (unsigned int)sessionID;
- (void)setAllowsVideo:(BOOL)arg1;
- (void)setAudioVolume:(float)arg1;
- (void)setCallID:(int)arg1;
- (void)setCameraOrientation:(unsigned int)arg1;
- (void)setCameraType:(unsigned int)arg1;
- (void)setConferenceSilent:(BOOL)arg1;
- (void)setConnectionTimeoutTime:(double)arg1;
- (void)setDelegate:(id)arg1;
- (void)setGUID:(id)arg1;
- (void)setInvitationTimeoutTime:(double)arg1;
- (void)setIsSendingAudio:(BOOL)arg1;
- (void)setIsSendingVideo:(BOOL)arg1;
- (void)setLocalAspectRatio:(struct CGSize { float x1; float x2; })arg1 cameraOrientation:(unsigned int)arg2 cameraType:(unsigned int)arg3;
- (void)setLocalVideoBackLayer:(void*)arg1;
- (void)setLocalVideoLayer:(void*)arg1;
- (void)setLockCamera:(BOOL)arg1;
- (void)setMute:(BOOL)arg1;
- (void)setPaused:(BOOL)arg1;
- (void)setRemoteMute:(BOOL)arg1;
- (void)setRemotePaused:(BOOL)arg1;
- (void)setTheaterDelegate:(id)arg1;
- (BOOL)shouldConferenceAcceptAuxVideoFromUser:(id)arg1;
- (BOOL)shouldConferenceAcceptIncomingRequestFromUser:(id)arg1 onLocalSubnetOnly:(BOOL*)arg2;
- (BOOL)startPreviewWithError:(id*)arg1;
- (void)startVCOnMainThread:(id)arg1;
- (unsigned int)state;
- (BOOL)stopPreview;
- (id)stringForAddStatus:(unsigned int)arg1;
- (id)stringForAddStatus;
- (void)systemApplicationDidBecomeActive;
- (void)systemApplicationDidEnterBackground;
- (void)systemApplicationDidResume;
- (void)systemApplicationDidResumeForEventsOnly;
- (void)systemApplicationDidSuspend;
- (void)systemApplicationWillEnterForeground;
- (void)systemDidFastUserSwitchOut;
- (void)systemWillShutdown;
- (id)theaterDelegate;
- (void)toggleChatMute;
- (void)toggleChatPaused;
- (void)toggleMute;
- (void)togglePaused;
- (void)toggleRemoteMute;
- (void)toggleRemotePaused;
- (void)toggleSendingAudio;
- (void)toggleSendingVideo;
- (id)vcErrorReport;
- (id)vcPartyIDForIMHandle:(id)arg1;

@end
