/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@class VKAttributedRoute;

@interface VKRouteLine : NSObject <VKRouteMapMatchingDataSource> {
    BOOL _curve;
    BOOL _matchToRoads;
    struct { 
        double x0; 
        double x1; 
        double y0; 
        double y1; 
    } _bounds;
    struct { 
        double v[4][4]; 
    } _inverseMatrix;
    VKAttributedRoute *_overlay;
    double _boundsUnitsPerMeter;
    double _boundsInWorldUnit;
    struct vector<VKRouteLineSection, vk_allocator<VKRouteLineSection> > { 
        struct VKRouteLineSection {} *__begin_; 
        struct VKRouteLineSection {} *__end_; 
        struct __compressed_pair<VKRouteLineSection *, vk_allocator<VKRouteLineSection> > { 
            struct VKRouteLineSection {} *__first_; 
        } __end_cap_; 
    } _sections;
    struct VKRouteLineFeatureCache { 
        struct unordered_map<GEOMultiSectionFeature *, VKRouteLineFeature, std::__1::hash<GEOMultiSectionFeature *>, std::__1::equal_to<GEOMultiSectionFeature *>, vk_allocator<std::__1::pair<GEOMultiSectionFeature *const, VKRouteLineFeature>> > { 
            struct __hash_table<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, std::__1::__unordered_map_hasher<GEOMultiSectionFeature *, VKRouteLineFeature, std::__1::hash<GEOMultiSectionFeature *>, true>, std::__1::__unordered_map_equal<GEOMultiSectionFeature *, VKRouteLineFeature, std::__1::equal_to<GEOMultiSectionFeature *>, true>, vk_allocator<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>> > { 
                struct unique_ptr<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *> *>> > { 
                    struct __compressed_pair<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *> *>> > { 
                        struct __hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *> {} **__first_; 
                        struct __bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *> *> > { 
                            struct __compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *> *> > { 
                                unsigned long __first_; 
                            } __data_; 
                        } __second_; 
                    } __ptr_; 
                } __bucket_list_; 
                struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *>> > { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *> *> { 
                        struct __hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *> {} *__next_; 
                    } __first_; 
                } __p1_; 
                struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOMultiSectionFeature *, VKRouteLineFeature, std::__1::hash<GEOMultiSectionFeature *>, true> > { 
                    unsigned long __first_; 
                } __p2_; 
                struct __compressed_pair<float, std::__1::__unordered_map_equal<GEOMultiSectionFeature *, VKRouteLineFeature, std::__1::equal_to<GEOMultiSectionFeature *>, true> > { 
                    float __first_; 
                } __p3_; 
            } __table_; 
        } _map; 
        struct { 
            double x0; 
            double x1; 
            double y0; 
            double y1; 
        } _routeLineRect; 
    } _featureCache;
    struct VKRouteLineSection { struct vector<VKRouteMapMatchingSection::Vertex, vk_allocator<VKRouteMapMatchingSection::Vertex> > { struct Vertex {} *x_1_1_1; struct Vertex {} *x_1_1_2; struct __compressed_pair<VKRouteMapMatchingSection::Vertex *, vk_allocator<VKRouteMapMatchingSection::Vertex> > { struct Vertex {} *x_3_2_1; } x_1_1_3; } x1; boolx2; float x3; float x4; struct list<VGLRouteLineMesh *, vk_allocator<VGLRouteLineMesh *> > { struct __list_node_base<VGLRouteLineMesh *, void *> { struct __list_node<VGLRouteLineMesh *, void *> {} *x_1_2_1; struct __list_node<VGLRouteLineMesh *, void *> {} *x_1_2_2; } x_5_1_1; struct __compressed_pair<unsigned long, vk_allocator<std::__1::__list_node<VGLRouteLineMesh *, void *>> > { unsigned long x_2_2_1; } x_5_1_2; } x5; struct VKPolylineWalker { char *x_6_1_1; unsigned int x_6_1_2; unsigned int x_6_1_3; unsigned int x_6_1_4; } x6; struct VKRouteLineToMeshPathMap { struct list<VKRouteLineToMeshPathMap::Range, vk_allocator<VKRouteLineToMeshPathMap::Range> > { struct __list_node_base<VKRouteLineToMeshPathMap::Range, void *> { struct __list_node<VKRouteLineToMeshPathMap::Range, void *> {} *x_1_3_1; struct __list_node<VKRouteLineToMeshPathMap::Range, void *> {} *x_1_3_2; } x_1_2_1; struct __compressed_pair<unsigned long, vk_allocator<std::__1::__list_node<VKRouteLineToMeshPathMap::Range, void *>> > { unsigned long x_2_3_1; } x_1_2_2; } x_7_1_1; struct __list_iterator<VKRouteLineToMeshPathMap::Range, void *> { struct __list_node<VKRouteLineToMeshPathMap::Range, void *> {} *x_2_2_1; } x_7_1_2; } x7; struct { unsigned int x_8_1_1; float x_8_1_2; } x8; struct { unsigned int x_9_1_1; float x_9_1_2; } x9; } *_userLocationSection;
    struct { 
        unsigned int index; 
        float offset; 
    } _userLocationIndex;
    struct { 
        float x; 
        float y; 
    } _userLocation;
    double _lastUserLocationMatchTimestamp;
    double _lastTrafficTimeStamp;
}

@property VKAttributedRoute * overlay;
@property(readonly) struct { double x1; double x2; double x3; double x4; } bounds;


- (void)_updateBounds:(id)arg1;
- (void)drawDebugMarkersWithContext:(id)arg1;
- (void)forEachSection:(id)arg1;
- (void)splitRouteLineAtAnnotation:(id)arg1;
- (void)buildRouteLineFromSortedPaths:(id)arg1 curve:(BOOL)arg2 matchRouteLine:(BOOL)arg3;
- (void)setOverlay:(id)arg1;
- (BOOL)isTrafficUptoDate:(double)arg1;
- (BOOL)isTrafficUpToDate;
- (id)overlay;
- (void)forEachMapMatchingSection:(id)arg1;
- (id).cxx_construct;
- (void).cxx_destruct;
- (struct { double x1; double x2; double x3; double x4; })bounds;

@end
