/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class VKMapModel, NSArray, <VKTrackingCameraControllerDelegate>, VKAnimation, VKRunningCurve;

@interface VKTrackingCameraController : VKCameraController <UIGestureRecognizerDelegate> {
    <VKTrackingCameraControllerDelegate> *_delegate;
    int _viewStyle;
    int _focusStyle;
    VKAnimation *_animation;
    double _verticalGroundspanInFrontOfReference;
    struct { 
        double x; 
        double y; 
        double z; 
    } _farthestPoi;
    VKRunningCurve *_cameraPositionCurve;
    VKRunningCurve *_cameraLookAtCurve;
    VKRunningCurve *_cameraRightCurve;
    struct { 
        struct { 
            double x; 
            double y; 
            double z; 
        } position; 
        double course; 
        BOOL onRoute; 
    } _puckPosition;
    struct { 
        double x; 
        double y; 
        double z; 
    } _puckTargetPosition;
    double _startZoomScale;
    double _endZoomScale;
    double _zoomScale;
    double _startPinchScale;
    VKMapModel *_mapModel;
    double _startTime;
    BOOL _animatingIn;
    double _startPitch;
    double _startCourse;
    double _startDistance;
    struct { 
        double x; 
        double y; 
        double z; 
    } _startPuckScreenPosition;

  /* Unexpected information at end of encoded ivar type: ? */
  /* Error parsing encoded ivar type info: @? */
    id _completionHandler;

    double _puckOffset;
    double _puckBottom;
    struct { 
        double x; 
        double y; 
        double z; 
    } _previousReference;
    struct { 
        double x; 
        double y; 
        double z; 
    } _previousFocus;
    struct VKCircularBuffer<double> { struct vector<double, vk_allocator<double> > { double *x_1_1_1; double *x_1_1_2; struct __compressed_pair<double *, vk_allocator<double> > { double *x_3_2_1; } x_1_1_3; } x1; unsigned int x2; boolx3; double x4; } *_rotationRateBuffer;
    double _previousStepTime;
    VKAnimation *_tapZoomAnimation;
    double _tracePlaybackSpeedMultiplier;
    BOOL _receivedFirstUpdate;
    BOOL _puckAnimatorRunning;
    double _cruisePhi;
    double _cruiseHeight;
    double _cruisePhiOverride;
    double _cruiseHeightOverride;
    struct { 
        struct { 
            double latitude; 
            double longitude; 
        } pointOfReference; 
        double heading; 
        struct { 
            double latitude; 
            double longitude; 
        } pointOfFocus; 
        NSArray *pointsOfInterest; 
        int style; 
        int focusStyle; 
        BOOL animated; 
        BOOL applied; 
    } _lastUpdate;
    BOOL _shouldLimitTopDownHeight;
    struct UIEdgeInsets { 
        float top; 
        float left; 
        float bottom; 
        float right; 
    } _insets;
}

@property <VKTrackingCameraControllerDelegate> * delegate;
@property(retain) VKMapModel * mapModel;
@property double zoomScale;
@property double tracePlaybackSpeedMultiplier;
@property BOOL shouldLimitTopDownHeight;


- (BOOL)shouldLimitTopDownHeight;
- (void)_applyUpdateIfNecessary:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; double x2; struct { double x_3_1_1; double x_3_1_2; } x3; id x4; int x5; int x6; BOOL x7; BOOL x8; })arg1;
- (void)_startTapZoomAnimationFrom:(double)arg1 to:(double)arg2 completionHandler:(id)arg3;
- (void)_updateCameraForStartAnimation:(double)arg1 position:(struct { double x1; double x2; double x3; })arg2 orientation:(const struct { double x1[4][4]; }*)arg3;
- (void)_boundPuck:(const struct { double x1; double x2; double x3; }*)arg1 cameraPosition:(struct { double x1; double x2; double x3; }*)arg2 cameraOrientation:(struct { double x1[4][4]; }*)arg3;
- (void)_updateCruiseHeightAndPhi;
- (void)_resumeAnimationIfNecessary;
- (struct { struct { double x_1_1_1; double x_1_1_2; double x_1_1_3; } x1; struct { double x_2_1_1[4][4]; } x2; })_getTargetStateTopDownForReference:(struct { double x1; double x2; double x3; })arg1 focus:(struct { double x1; double x2; double x3; })arg2 puckVerticalOffsetFromBottom:(double)arg3;
- (struct { struct { double x_1_1_1; double x_1_1_2; double x_1_1_3; } x1; struct { double x_2_1_1[4][4]; } x2; })_getTargetStateRooftopForReference:(struct { double x1; double x2; double x3; })arg1 focus:(struct { double x1; double x2; double x3; })arg2;
- (void)_updateVerticalGroundspanForFocusStyle:(int)arg1 viewStyle:(int)arg2 reference:(struct { double x1; double x2; double x3; })arg3 pois:(id)arg4;
- (void)_step;
- (double)tracePlaybackSpeedMultiplier;
- (BOOL)isAtDefaultZoomScale;
- (void)startWithPounce:(BOOL)arg1 pounceCompletionHandler:(id)arg2;
- (void)setShouldLimitTopDownHeight:(BOOL)arg1;
- (id)mapModel;
- (void)setCameraViewForPointOfReference:(struct { double x1; double x2; })arg1 referenceHeading:(double)arg2 pointOfFocus:(struct { double x1; double x2; })arg3 pointsOfInterest:(id)arg4 style:(int)arg5 focusStyle:(int)arg6 animated:(BOOL)arg7;
- (void)zoom:(double)arg1 relativeToPoint:(struct CGPoint { float x1; float x2; })arg2 completionHandler:(id)arg3;
- (void)endAnimating;
- (void)beginAnimating;
- (void)setMapModel:(id)arg1;
- (void)canvasFrameDidChange;
- (void)puckAnimator:(id)arg1 updatedTargetPosition:(struct { double x1; double x2; double x3; })arg2;
- (void)puckAnimatorDidStop:(id)arg1;
- (void)puckAnimator:(id)arg1 updatedPosition:(struct { struct { double x_1_1_1; double x_1_1_2; double x_1_1_3; } x1; double x2; BOOL x3; }*)arg2;
- (void)stopPinchingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)updatePinchWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1 oldFactor:(double)arg2 newFactor:(double)arg3;
- (void)startPinchingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)setTracePlaybackSpeedMultiplier:(double)arg1;
- (id)detailedDescription;
- (void)setGesturing:(BOOL)arg1;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (id).cxx_construct;
- (void)dealloc;
- (id)init;
- (void)setEdgeInsets:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)setZoomScale:(double)arg1;
- (double)zoomScale;

@end
