/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@class VKAnnotationModel, VKRoadMapModel, VKOverlayContainerModel, VKAnnotationMarker, NSMapTable, VKSkyModel, VKTrafficIncidentsMapModel, VKCalloutController, VKStylesheet, VKLabelFeaturePool, VKRealisticMapModel, VKLabelMarker, VKTrafficIncident, VKGroundCoverMapModel, VKOverlayTileSource, VKRasterTrafficMapModel, VKPolylineOverlayPainter, <VKRouteMatchedAnnotationPresentation>, VKDebugModel, VKTileProvider, VKTrafficTileSource, VKLabelModel, NSArray, <VKRoutePreloadSession>, VKGridModel, <VKMapModelDelegate>, NSMutableArray, NSSet, VKMapRasterizer, VKAnimation, VKBuildingFootprintMapModel, UIView<VKInteractiveMap>, VKPolygonMapModel, VKRoadTrafficMapModel, VKLoupeMapTileModel, VKRasterMapModel, VKMercatorTerrainHeightCache;

@interface VKMapModel : VKModelObject <VKAnnotationModelDelegate, VKOverlayContainerDelegate, VKCalloutControllerDelegate, VKLabelModelDelegate, VKTrafficIncidentsMapModelDelegate, VKTileProviderClient> {
    int _tileSize;
    VKTileProvider *_tileProviders[3];
    int _mapMode;
    int _desiredMapMode;
    BOOL _transitioningToNav;
    BOOL _activeMapLayers[3][26];
    NSMapTable *_layerToSourceMaps[3];
    VKTrafficTileSource *_trafficSource;
    VKOverlayTileSource *_overlayTileSource;
    VKOverlayTileSource *_realisticOverlayTileSource;
    VKGridModel *_gridModel;
    VKSkyModel *_skyModel;
    VKLabelModel *_labelModel;
    VKRasterMapModel *_rasterModel;
    VKRasterMapModel *_standardRasterModel;
    VKGroundCoverMapModel *_groundCoverModel;
    VKRasterTrafficMapModel *_rasterTrafficModel;
    VKPolygonMapModel *_polygonModel;
    VKRoadMapModel *_roadModel;
    VKRoadTrafficMapModel *_roadTrafficModel;
    VKRealisticMapModel *_realisticModel;
    VKBuildingFootprintMapModel *_buildingFootprintModel;
    VKTrafficIncidentsMapModel *_trafficIncidentsModel;
    VKAnnotationModel *_annotationModel;
    VKOverlayContainerModel *_overlayContainerModel;
    VKLoupeMapTileModel *_loupeModel;
    VKDebugModel *_debugModel;
    NSMapTable *_tileSources;
    NSMutableArray *_drawOrder;
    NSMutableArray *_mapLayerSubmodels;
    NSMutableArray *_mapTileSubmodels;
    VKCalloutController *_calloutController;
    VKStylesheet *_activeStylesheet;
    VKStylesheet *_defaultStylesheet;
    VKStylesheet *_hybridStylesheet;
    double _zoomLevel;
    int _mapType;
    int _loupeType;
    <VKMapModelDelegate> *_delegate;
    <VKRoutePreloadSession> *_routePreloadSession;
    VKLabelFeaturePool *_featurePool;
    BOOL _dynamicMapModesEnabled;
    BOOL _debugDynamicMapModesEnabled;
    BOOL _buildingsAreVisible;
    BOOL _fullyDrawn;
    BOOL _shouldNotifyFullyDrawn;
    BOOL _trafficEnabled;
    BOOL _shouldRasterize;
    int _loadingCount;
    BOOL _disableRoads;
    BOOL _disableLabels;
    BOOL _disablePolygons;
    BOOL _disableBuildingFootprints;
    BOOL _disableRasters;
    BOOL _enableBlackRoadLines;
    VKMapRasterizer *_rasterizer;
    VKRasterMapModel *_rasterViewer;
    int _annotationMarkerStyle;
    BOOL _limitingNavCameraHeight;
    VKAnimation *_modeTransitionAnimation;
    BOOL _disableRoadClass[9];
    BOOL _shouldSplitRouteLine;
}

@property(retain) VKStylesheet * stylesheet;
@property int mapType;
@property BOOL dynamicMapModesEnabled;
@property(readonly) int currentMapMode;
@property BOOL limitingNavCameraHeight;
@property(readonly) VKMercatorTerrainHeightCache * terrainHeightCache;
@property(getter=isTrafficEnabled) BOOL trafficEnabled;
@property BOOL localizeLabels;
@property int labelScaleFactor;
@property int loupeType;
@property <VKMapModelDelegate> * delegate;
@property(readonly) VKBuildingFootprintMapModel * buildingFootprintModel;
@property(readonly) BOOL buildingsAreVisible;
@property(readonly) BOOL isFullyDrawn;
@property(readonly) VKTileProvider * tileProvider;
@property(readonly) VKLabelMarker * selectedLabelMarker;
@property BOOL labelMarkerSelectionEnabled;
@property(readonly) VKTrafficIncident * selectedTrafficIncident;
@property Class calloutViewClass;
@property(readonly) VKAnnotationMarker * selectedAnnotationMarker;
@property UIView<VKInteractiveMap> * calloutContainerView;
@property(readonly) NSArray * overlays;
@property(readonly) NSSet * persistentOverlays;
@property(retain) VKPolylineOverlayPainter * focusedLabelsPolylinePainter;
@property BOOL disableRoads;
@property BOOL disableLabels;
@property BOOL disablePolygons;
@property BOOL disableBuildingFootprints;
@property BOOL disableRasters;
@property BOOL enableBlackRoadLines;
@property BOOL disableRealisticRoads;
@property BOOL disableRealisticLand;
@property(retain) <VKRoutePreloadSession> * routePreloadSession;
@property BOOL shouldSplitRouteLine;
@property <VKRouteMatchedAnnotationPresentation> * routeLineSplitAnnotation;
@property(readonly) NSArray * visibleTileSets;

+ (unsigned long)numberOfRoadClasses;
+ (const char *)nameForRoadClass:(int)arg1;

- (void)setShouldSplitRouteLine:(BOOL)arg1;
- (BOOL)shouldSplitRouteLine;
- (BOOL)limitingNavCameraHeight;
- (BOOL)buildingsAreVisible;
- (id)buildingFootprintModel;
- (BOOL)enableBlackRoadLines;
- (id)tileProvider;
- (void)didStopLoadingTilesWithError:(id)arg1;
- (void)willStartLoadingTiles;
- (void)tileProviderNeedsUpdate:(id)arg1;
- (BOOL)tileProviderMayUseNetwork:(id)arg1;
- (void)incidentsModel:(id)arg1 didDeselectTrafficIncident:(id)arg2;
- (void)incidentsModel:(id)arg1 trafficIncident:(id)arg2 calloutAccessoryControlTapped:(id)arg3;
- (void)incidentsModel:(id)arg1 willSelectTrafficIncident:(id)arg2;
- (void)labelModel:(id)arg1 didDeselectLabelMarker:(id)arg2;
- (void)labelModel:(id)arg1 labelMarker:(id)arg2 calloutAccessoryControlTapped:(id)arg3;
- (void)labelModel:(id)arg1 willSelectLabelMarker:(id)arg2;
- (id)labelModel:(id)arg1 mapTileForTile:(id)arg2 layer:(unsigned int)arg3;
- (void)calloutController:(id)arg1 didUpdateCalloutView:(id)arg2 forSource:(id)arg3 animated:(BOOL)arg4;
- (void)calloutController:(id)arg1 willShowCalloutView:(id)arg2 forSource:(id)arg3;
- (void)calloutController:(id)arg1 didUpdateCalloutPopoverController:(id)arg2 forSource:(id)arg3;
- (void)calloutController:(id)arg1 willShowCalloutPopoverController:(id)arg2 forSource:(id)arg3;
- (void)calloutController:(id)arg1 needsPanByPixelOffset:(struct CGPoint { float x1; float x2; })arg2 relativeToScreenPoint:(struct CGPoint { float x1; float x2; })arg3 animated:(BOOL)arg4 duration:(double)arg5 completionHandler:(id)arg6;
- (BOOL)overlayContainerIsInRealisticMode:(id)arg1;
- (id)overlayContainer:(id)arg1 roadTileForTile:(id)arg2;
- (id)overlayContainer:(id)arg1 painterForOverlay:(id)arg2;
- (void)annotationModel:(id)arg1 didAnimateInAnnotationMarkers:(id)arg2;
- (void)annotationModel:(id)arg1 willAnimateInAnnotationMarkers:(id)arg2;
- (void)annotationModel:(id)arg1 annotationMarker:(id)arg2 calloutAccessoryControlTapped:(id)arg3;
- (id)calloutContainerView;
- (void)_tryTransitionAndPreloadIfNecessary:(id)arg1;
- (void)_updateZoomLevel:(id)arg1;
- (void)foreachActiveLayer:(id)arg1;
- (void)didTapZoom;
- (void)willTapZoom;
- (id)initWithTransform:(const struct { double x1[4][4]; }*)arg1 shouldRasterize:(BOOL)arg2;
- (void)shouldFlushCaches:(id)arg1;
- (void)activeTileGroupChanged:(id)arg1;
- (void)stylesheetDidChange;
- (float)ppi;
- (void)_forceLayout;
- (void)_updateOverlayTileSource;
- (void)_updateRegularTileProviderMode;
- (void)_setStylesheetFromMapType:(int)arg1;
- (void)_mapConfigurationDidChange;
- (void)createTrafficTileSourceIfNecessary;
- (id)sourceForLayer:(unsigned int)arg1 mode:(int)arg2;
- (id)createSourceForLayer:(unsigned int)arg1 tileSet:(id)arg2 mode:(int)arg3;
- (int)tileStyleForMapLayer:(unsigned int)arg1;
- (void)configureTileSources;
- (void)_deactivateModel:(id)arg1;
- (void)_activateModel:(id)arg1;
- (void)_transitionFromMode:(int)arg1 toMode:(int)arg2 animated:(BOOL)arg3;
- (void)recursiveDrawScene:(id)arg1 withContext:(id)arg2;
- (void)drawScene:(id)arg1 withContext:(id)arg2;
- (void)layoutSceneIfNeeded:(id)arg1 withContext:(id)arg2;
- (void)didAddSubmodel:(id)arg1;
- (void)debugHighlightLabelAtScreenPoint:(struct CGPoint { float x1; float x2; })arg1 viewTransform:(id)arg2;
- (id)trafficIncidentForSelectionAtPoint:(struct { double x1; double x2; double x3; })arg1 canvasSize:(struct CGSize { float x1; float x2; })arg2;
- (id)annotationMarkerForSelectionAtPoint:(struct { double x1; double x2; double x3; })arg1 avoidCurrent:(BOOL)arg2 canvasSize:(struct CGSize { float x1; float x2; })arg3;
- (void)preloadNavigationSceneResourcesWithContext:(id)arg1;
- (void)setLimitingNavCameraHeight:(BOOL)arg1;
- (void)didBeginTransitionToNavigation;
- (void)didEndNavigation;
- (double)heightAtPoint:(struct { double x1; double x2; double x3; })arg1;
- (void)layoutScene:(id)arg1 withContext:(id)arg2;
- (int)currentMapMode;
- (void)flushCaches;
- (void)setCalloutContainerView:(id)arg1;
- (id)terrainHeightCache;
- (void)addSubmodel:(id)arg1;
- (id)initShouldRasterize:(BOOL)arg1;
- (id)loupeMapModel;
- (int)maximumZoomLevelInView:(id)arg1;
- (int)minimumZoomLevelInView:(id)arg1;
- (BOOL)isTrafficEnabled;
- (BOOL)disableRealisticLand;
- (BOOL)disableRealisticRoads;
- (BOOL)disableRasters;
- (BOOL)disableBuildingFootprints;
- (BOOL)disablePolygons;
- (BOOL)disableLabels;
- (BOOL)disableRoads;
- (BOOL)isFullyDrawn;
- (BOOL)isRoadClassDisabled:(int)arg1;
- (void)setDisableRealisticLand:(BOOL)arg1;
- (void)setDisableRealisticRoads:(BOOL)arg1;
- (void)disableRoadClass:(BOOL)arg1 withRoadClass:(int)arg2;
- (void)setDisableRasters:(BOOL)arg1;
- (void)setEnableBlackRoadLines:(BOOL)arg1;
- (void)setDisableBuildingFootprints:(BOOL)arg1;
- (void)setDisablePolygons:(BOOL)arg1;
- (void)setDisableLabels:(BOOL)arg1;
- (void)forceMapType:(int)arg1;
- (void)setDisableRoads:(BOOL)arg1;
- (void)setFocusedLabelsPolylinePainter:(id)arg1;
- (id)focusedLabelsPolylinePainter;
- (void)setCurrentLocationText:(id)arg1;
- (void)setRouteUserOffset:(struct { unsigned int x1; float x2; })arg1;
- (id)selectedLabelMarker;
- (void)dismissExpandedCallout;
- (id)calloutPopoverController;
- (id)annotationCoordinateTest;
- (id)annotationRectTest;
- (void)deselectAnnotationMarker:(id)arg1 animated:(BOOL)arg2;
- (id)selectedTrafficIncident;
- (void)selectTrafficIncident:(id)arg1 animated:(BOOL)arg2 avoid:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3;
- (void)selectLabelMarker:(id)arg1 animated:(BOOL)arg2 avoid:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3;
- (id)labelMarkerForSelectionAtPoint:(struct CGPoint { float x1; float x2; })arg1 pointLabelsOnly:(BOOL)arg2;
- (id)navTileSource;
- (id)routePreloadSession;
- (void)setRoutePreloadSession:(id)arg1;
- (int)loupeType;
- (void)setLoupeType:(int)arg1;
- (void)setMapType:(int)arg1;
- (void)deselectTrafficIncidentAnimated:(BOOL)arg1;
- (void)deselectLabelMarkerAnimated:(BOOL)arg1;
- (void)setRouteLineSplitAnnotation:(id)arg1;
- (id)routeLineSplitAnnotation;
- (void)addOverlay:(id)arg1;
- (void)removeOverlay:(id)arg1;
- (id)overlays;
- (void)addPersistentOverlay:(id)arg1;
- (void)removePersistentOverlay:(id)arg1;
- (id)persistentOverlays;
- (void)selectAnnotationMarker:(id)arg1 animated:(BOOL)arg2 avoid:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3;
- (void)addAnnotationMarker:(id)arg1 allowAnimation:(BOOL)arg2;
- (void)removeAnnotationMarker:(id)arg1;
- (id)annotationMarkers;
- (id)selectedAnnotationMarker;
- (void)setAnnotationMarkerDeselectionCallback:(id)arg1;
- (id)annotationMarkerDeselectionCallback;
- (BOOL)labelMarkerSelectionEnabled;
- (void)setCalloutViewClass:(Class)arg1;
- (Class)calloutViewClass;
- (void)setDynamicMapModesEnabled:(BOOL)arg1;
- (BOOL)dynamicMapModesEnabled;
- (void)setDesiredMapMode:(int)arg1 immediate:(BOOL)arg2;
- (BOOL)writeVisibleTrafficTilesToDirectory:(id)arg1 error:(id*)arg2;
- (id)detailedDescription;
- (void)clearScene;
- (void)setLabelScaleFactor:(int)arg1;
- (int)labelScaleFactor;
- (void)setLocalizeLabels:(BOOL)arg1;
- (BOOL)localizeLabels;
- (void)setTrafficEnabled:(BOOL)arg1;
- (BOOL)isShowingNoDataPlaceholders;
- (id)attributionsForCurrentRegion;
- (id)visibleTileSets;
- (int)mapType;
- (void)setLabelMarkerSelectionEnabled:(BOOL)arg1;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (void)dealloc;
- (id)stylesheet;
- (int)tileSize;
- (void)didReceiveMemoryWarning;
- (float)scale;
- (void)setStylesheet:(id)arg1;
- (id)initWithTransform:(const struct { double x1[4][4]; }*)arg1;

@end
