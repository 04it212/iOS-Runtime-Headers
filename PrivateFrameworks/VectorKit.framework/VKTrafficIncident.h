/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@class VKAnchor, UICalloutView, VGLRenderState, UIView, VKImage, NSString, NSDate;

@interface VKTrafficIncident : NSObject <VKCalloutSource> {
    struct { 
        double x; 
        double y; 
        double z; 
    } _pointInWorld;
    union { 
        struct { 
            float m00; 
            float m01; 
            float m02; 
            float m03; 
            float m10; 
            float m11; 
            float m12; 
            float m13; 
            float m20; 
            float m21; 
            float m22; 
            float m23; 
            float m30; 
            float m31; 
            float m32; 
            float m33; 
        } ; 
        float m[16]; 
    } _shaderMatrix;
    struct { 
        double x0; 
        double x1; 
        double y0; 
        double y1; 
    } _screenRect;
    UICalloutView *_calloutView;
    VKImage *_image;
    NSString *_title;
    NSString *_subtitle;
    struct { 
        double x; 
        double y; 
        double z; 
    } _projectedPoint;
    VGLRenderState *_renderState;
    int _type;
    struct { 
        double latitude; 
        double longitude; 
    } _location;
    UIView *_leftCalloutAccessoryView;
    UIView *_rightCalloutAccessoryView;
    NSString *_street;
    NSString *_crossStreet;
    NSString *_info;
    NSDate *_startDate;
    NSDate *_endDate;
    NSDate *_lastUpdatedDate;
    VKAnchor *_anchor;
}

@property(readonly) int type;
@property(readonly) NSString * street;
@property(readonly) NSString * crossStreet;
@property(readonly) NSString * info;
@property(readonly) NSDate * startDate;
@property(readonly) NSDate * endDate;
@property(readonly) NSDate * lastUpdatedDate;
@property(retain) UIView * leftCalloutAccessoryView;
@property(retain) UIView * rightCalloutAccessoryView;
@property(retain) UICalloutView * calloutView;
@property(copy) NSString * title;
@property(copy) NSString * subtitle;


- (id)lastUpdatedDate;
- (id)crossStreet;
- (id)initWithIncidentData:(const struct Incident { struct GeoCoordinates { struct Longitude { unsigned int x_1_2_1; } x_1_1_1; struct Latitude { unsigned int x_2_2_1; } x_1_1_2; } x1; struct String { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_5_1; unsigned int x_1_5_2; char *x_1_5_3; } x_1_4_1; struct __short { union { unsigned char x_1_6_1; BOOL x_1_6_2; } x_2_5_1; BOOL x_2_5_2[11]; } x_1_4_2; struct __raw { unsigned long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_2_1_1; } x2; struct String { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_5_1; unsigned int x_1_5_2; char *x_1_5_3; } x_1_4_1; struct __short { union { unsigned char x_1_6_1; BOOL x_1_6_2; } x_2_5_1; BOOL x_2_5_2[11]; } x_1_4_2; struct __raw { unsigned long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; int x4; struct String { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_5_1; unsigned int x_1_5_2; char *x_1_5_3; } x_1_4_1; struct __short { union { unsigned char x_1_6_1; BOOL x_1_6_2; } x_2_5_1; BOOL x_2_5_2[11]; } x_1_4_2; struct __raw { unsigned long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_5_1_1; } x5; struct String { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_5_1; unsigned int x_1_5_2; char *x_1_5_3; } x_1_4_1; struct __short { union { unsigned char x_1_6_1; BOOL x_1_6_2; } x_2_5_1; BOOL x_2_5_2[11]; } x_1_4_2; struct __raw { unsigned long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_6_1_1; } x6; long long x7; long long x8; long long x9; int x10; unsigned char x11; boolx12; }*)arg1 worldPoint:(struct { double x1; double x2; double x3; }*)arg2;
- (id)calloutView;
- (struct { double x1; double x2; double x3; })pointInWorldWithContext:(id)arg1;
- (id)rightCalloutAccessoryView;
- (id)leftCalloutAccessoryView;
- (id)debugAnchorPointString;
- (struct CGPoint { float x1; float x2; })screenPointToScrollRelativeToWithCanvasSize:(struct CGSize { float x1; float x2; })arg1;
- (struct CGPoint { float x1; float x2; })calloutAnchorPointWithCanvasSize:(struct CGSize { float x1; float x2; })arg1;
- (void)setCalloutView:(id)arg1;
- (float)distanceFromPoint:(struct { double x1; double x2; double x3; })arg1 canvasSize:(struct CGSize { float x1; float x2; })arg2;
- (void)layoutWithContext:(id)arg1;
- (struct { double x1; double x2; double x3; })projectedPoint;
- (id)anchorWithContext:(id)arg1;
- (void)drawWithContext:(id)arg1;
- (struct { double x1; double x2; double x3; })worldPoint;
- (int)type;
- (id).cxx_construct;
- (void)dealloc;
- (void)setLeftCalloutAccessoryView:(id)arg1;
- (void)setRightCalloutAccessoryView:(id)arg1;
- (id)info;
- (id)subtitle;
- (void)setSubtitle:(id)arg1;
- (id)title;
- (BOOL)containsPoint:(struct { double x1; double x2; double x3; })arg1;
- (void)setTitle:(id)arg1;
- (id)endDate;
- (id)startDate;
- (id)street;

@end
