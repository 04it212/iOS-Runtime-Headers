/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class VKStylesheet, VKCalloutController, VKLabelNavSupport, <VKLabelManagerDelegate>, VKLabelOcclusionTester, NSString, VKLabelMarker, VKLabelDisplayList, NSSet;

@interface VKLabelManager : NSObject <VKLabelMarkerDelegate> {
    int _mapType;
    int _labelMode;
    BOOL _isTapZooming;
    BOOL _localizeLabels;
    int _labelScaleFactor;
    BOOL _labelMarkerSelectionEnabled;
    BOOL _debugSkipLabels;
    BOOL _occlusionTestingEnabled;
    BOOL _occlusionTestingIsActive;
    int _vectorType;
    VKStylesheet *_stylesheet;
    VKCalloutController *_calloutController;
    VKLabelMarker *_selectedLabelMarker;
    NSSet *_lastLayoutTiles;
    struct LabelContext { id x1; id x2; id x3; id x4; struct ViewTransform {} *x5; int x6; int x7; unsigned int x8; float x9; boolx10; boolx11; boolx12; boolx13; boolx14; boolx15; int x16; struct { double x_17_1_1; double x_17_1_2; double x_17_1_3; double x_17_1_4; } x17; struct { float x_18_1_1; float x_18_1_2; float x_18_1_3; float x_18_1_4; } x18; struct { float x_19_1_1; float x_19_1_2; float x_19_1_3; float x_19_1_4; } x19; struct { float x_20_1_1; float x_20_1_2; float x_20_1_3; float x_20_1_4; } x20; int x21; } *_labelContext;
    VKLabelNavSupport *_navSupport;
    BOOL _isNavSupportActive;
    BOOL _mustPushLabels;
    unsigned int _layoutStamp;
    unsigned int _renderStamp;
    unsigned int _frameStamp;
    unsigned int _atlasEvictionStamp;
    double _focusDeltaValues[5];
    double _lastFocusDistance;
    int _focusDeltaValueIndex;
    BOOL _justDidLayout;
    BOOL _hasLoadingPOITiles;
    VKLabelDisplayList *_displayList;
    double _prevTimestamp;
    BOOL _iconsShouldAlignToPixels;
    VKLabelOcclusionTester *_occlusionTester;
    <VKLabelManagerDelegate> *_delegate;
    struct vector<std::__1::shared_ptr<vk::Label>, vk_allocator<std::__1::shared_ptr<vk::Label>> > { 
        struct shared_ptr<vk::Label> {} *__begin_; 
        struct shared_ptr<vk::Label> {} *__end_; 
        struct __compressed_pair<std::__1::shared_ptr<vk::Label> *, vk_allocator<std::__1::shared_ptr<vk::Label>> > { 
            struct shared_ptr<vk::Label> {} *__first_; 
        } __end_cap_; 
    } _labels;
    struct vector<std::__1::shared_ptr<vk::Label>, vk_allocator<std::__1::shared_ptr<vk::Label>> > { 
        struct shared_ptr<vk::Label> {} *__begin_; 
        struct shared_ptr<vk::Label> {} *__end_; 
        struct __compressed_pair<std::__1::shared_ptr<vk::Label> *, vk_allocator<std::__1::shared_ptr<vk::Label>> > { 
            struct shared_ptr<vk::Label> {} *__first_; 
        } __end_cap_; 
    } _dedupeCandidates;
    struct vector<std::__1::shared_ptr<vk::Label>, vk_allocator<std::__1::shared_ptr<vk::Label>> > { 
        struct shared_ptr<vk::Label> {} *__begin_; 
        struct shared_ptr<vk::Label> {} *__end_; 
        struct __compressed_pair<std::__1::shared_ptr<vk::Label> *, vk_allocator<std::__1::shared_ptr<vk::Label>> > { 
            struct shared_ptr<vk::Label> {} *__first_; 
        } __end_cap_; 
    } _occlusionCandidates;
    struct vector<std::__1::shared_ptr<vk::Label>, vk_allocator<std::__1::shared_ptr<vk::Label>> > { 
        struct shared_ptr<vk::Label> {} *__begin_; 
        struct shared_ptr<vk::Label> {} *__end_; 
        struct __compressed_pair<std::__1::shared_ptr<vk::Label> *, vk_allocator<std::__1::shared_ptr<vk::Label>> > { 
            struct shared_ptr<vk::Label> {} *__first_; 
        } __end_cap_; 
    } _displayedLabels;
    struct vector<std::__1::shared_ptr<vk::Label>, vk_allocator<std::__1::shared_ptr<vk::Label>> > { 
        struct shared_ptr<vk::Label> {} *__begin_; 
        struct shared_ptr<vk::Label> {} *__end_; 
        struct __compressed_pair<std::__1::shared_ptr<vk::Label> *, vk_allocator<std::__1::shared_ptr<vk::Label>> > { 
            struct shared_ptr<vk::Label> {} *__first_; 
        } __end_cap_; 
    } _roadSigns;
    struct LabelCollider { 
        struct vector<vk::CollisionObject *, vk_allocator<vk::CollisionObject *> > { 
            struct CollisionObject {} **__begin_; 
            struct CollisionObject {} **__end_; 
            struct __compressed_pair<vk::CollisionObject **, vk_allocator<vk::CollisionObject *> > { 
                struct CollisionObject {} **__first_; 
            } __end_cap_; 
        } _objects; 
        struct vector<vk::SapEntry, vk_allocator<vk::SapEntry> > { 
            struct SapEntry {} *__begin_; 
            struct SapEntry {} *__end_; 
            struct __compressed_pair<vk::SapEntry *, vk_allocator<vk::SapEntry> > { 
                struct SapEntry {} *__first_; 
            } __end_cap_; 
        } _axisY; 
        struct vector<vk::SapOverlap, vk_allocator<vk::SapOverlap> > { 
            struct SapOverlap {} *__begin_; 
            struct SapOverlap {} *__end_; 
            struct __compressed_pair<vk::SapOverlap *, vk_allocator<vk::SapOverlap> > { 
                struct SapOverlap {} *__first_; 
            } __end_cap_; 
        } _overlaps; 
    } _collider;
    double _prevEyeHeight;
    float _prevEyeAngle;
    float _prevHeading;
    NSString *_desiredLocale;
}

@property int labelMode;
@property BOOL localizeLabels;
@property int labelScaleFactor;
@property BOOL occlusionTestingEnabled;
@property BOOL labelMarkerSelectionEnabled;
@property(readonly) NSString * desiredLocale;
@property BOOL debugSkipLabels;
@property(readonly) unsigned int renderStamp;
@property int vectorType;
@property(retain) VKStylesheet * stylesheet;
@property(retain) VKCalloutController * calloutController;
@property(readonly) VKLabelMarker * selectedLabelMarker;
@property(readonly) VKLabelNavSupport * navSupport;
@property <VKLabelManagerDelegate> * delegate;


- (void)setStylesheet:(id)arg1;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)dealloc;
- (id)init;
- (id)stylesheet;
- (void)_didReceiveMemoryWarning:(id)arg1;
- (id)desiredLocale;
- (void)setDebugSkipLabels:(BOOL)arg1;
- (BOOL)debugSkipLabels;
- (int)labelMode;
- (void)forEachDisplayedLabel:(id)arg1;
- (void)mapTypeChanged:(id)arg1;
- (void)setGlobeViewWrapper:(id)arg1;
- (void)_setSelectedLabelMarker:(id)arg1;
- (struct shared_ptr<vk::Label> { struct Label {} *x1; struct __shared_weak_count {} *x2; })_labelAtScreenPoint:(struct CGPoint { float x1; float x2; })arg1 pointLabelsOnly:(BOOL)arg2;
- (double)_animationMultiplier;
- (void)_setNeedsDisplay;
- (BOOL)_animateLabelsForTime:(double)arg1;
- (void)_addFocusValue:(const struct ViewTransform { int (**x1)(); int x2; struct { double x_3_1_1; double x_3_1_2; double x_3_1_3; } x3; struct { double x_4_1_1; double x_4_1_2; double x_4_1_3; } x4; struct { double x_5_1_1; double x_5_1_2; double x_5_1_3; } x5; float x6; float x7; boolx8; float x9; double x10; struct { double x_11_1_1[4][4]; } x11; struct { double x_12_1_1[4][4]; } x12; struct { double x_13_1_1[4][4]; } x13; id x14; float x15; boolx16; struct { double x_17_1_1; double x_17_1_2; double x_17_1_3; } x17; struct { double x_18_1_1; double x_18_1_2; double x_18_1_3; } x18; double x19; double x20; struct CGSize { float x_21_1_1; float x_21_1_2; } x21; float x22; struct { BOOL x_23_1_1; double x_23_1_2; double x_23_1_3; double x_23_1_4; double x_23_1_5; } x23; struct { double x_24_1_1; double x_24_1_2; double x_24_1_3; } x24; struct { double x_25_1_1; double x_25_1_2; double x_25_1_3; } x25; }*)arg1;
- (void)_setNeedsLayout;
- (void)_localeChanged:(id)arg1;
- (void)labelMarker:(id)arg1 rightCalloutAccessoryViewDidChange:(id)arg2;
- (void)labelMarker:(id)arg1 leftCalloutAccessoryViewDidChange:(id)arg2;
- (id)calloutController;
- (int)vectorType;
- (id)navSupport;
- (void)setOcclusionTestingEnabled:(BOOL)arg1;
- (BOOL)occlusionTestingEnabled;
- (unsigned int)renderStamp;
- (id)labelMarkerForSelectionAtPoint:(struct CGPoint { float x1; float x2; })arg1 featurePool:(id)arg2 pointLabelsOnly:(BOOL)arg3;
- (void)didTapZoom;
- (void)willTapZoom;
- (void)setCalloutController:(id)arg1;
- (void)activeTileGroupChanged:(id)arg1;
- (void)setLabelMode:(int)arg1;
- (void)setVectorType:(int)arg1;
- (void)drawScene:(id)arg1 withContext:(id)arg2;
- (void)layoutScene:(id)arg1 withContext:(id)arg2;
- (id)selectedLabelMarker;
- (void)selectLabelMarker:(id)arg1 animated:(BOOL)arg2 avoid:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3;
- (void)setMapType:(int)arg1;
- (void)deselectLabelMarkerAnimated:(BOOL)arg1;
- (BOOL)labelMarkerSelectionEnabled;
- (void)clearScene;
- (void)setLabelScaleFactor:(int)arg1;
- (int)labelScaleFactor;
- (void)setLocalizeLabels:(BOOL)arg1;
- (BOOL)localizeLabels;
- (void)setLabelMarkerSelectionEnabled:(BOOL)arg1;

@end
