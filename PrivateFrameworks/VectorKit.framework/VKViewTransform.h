/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class VKViewVolume;

@interface VKViewTransform : NSObject {
    struct ViewTransform { int (**x1)(); int x2; struct { double x_3_1_1; double x_3_1_2; double x_3_1_3; } x3; struct { double x_4_1_1; double x_4_1_2; double x_4_1_3; } x4; struct { double x_5_1_1; double x_5_1_2; double x_5_1_3; } x5; float x6; float x7; boolx8; float x9; double x10; struct { double x_11_1_1[4][4]; } x11; struct { double x_12_1_1[4][4]; } x12; struct { double x_13_1_1[4][4]; } x13; id x14; float x15; boolx16; struct { double x_17_1_1; double x_17_1_2; double x_17_1_3; } x17; struct { double x_18_1_1; double x_18_1_2; double x_18_1_3; } x18; double x19; double x20; struct CGSize { float x_21_1_1; float x_21_1_2; } x21; float x22; struct { BOOL x_23_1_1; double x_23_1_2; double x_23_1_3; double x_23_1_4; double x_23_1_5; } x23; struct { double x_24_1_1; double x_24_1_2; double x_24_1_3; } x24; struct { double x_25_1_1; double x_25_1_2; double x_25_1_3; } x25; } *_viewTransform;
}

@property(readonly) float contentScale;
@property(readonly) int coordinateSpace;
@property(readonly) float degreesFromPlumb;
@property(readonly) double farPlaneDistance;
@property(readonly) double focusDistance;
@property(readonly) struct { double x1; double x2; double x3; } focusPoint;
@property(readonly) struct { double x1; double x2; double x3; } forwardVector;
@property(readonly) float heading;
@property(readonly) BOOL isGeocentric;
@property(readonly) BOOL isMercator;
@property(readonly) double nearPlaneDistance;
@property(readonly) struct { double x1; double x2; double x3; } rightVector;
@property const struct { double x1[4][4]; }* scaledViewProjectionMatrix;
@property(readonly) struct CGSize { float x1; float x2; } screenSizeInPixels;
@property(readonly) struct CGSize { float x1; float x2; } screenSizeInPoints;
@property float styleZAdjust;
@property(readonly) struct { double x1; double x2; double x3; } translation;
@property(readonly) struct { double x1; double x2; double x3; } translationInMercator;
@property(readonly) struct { double x1; double x2; double x3; } upVector;
@property(readonly) const struct { double x1[4][4]; }* viewProjectionMatrix;
@property(readonly) VKViewVolume * viewVolume;
@property(readonly) double widthOverDepth;

- (struct ViewTransform { int (**x1)(); int x2; struct { double x_3_1_1; double x_3_1_2; double x_3_1_3; } x3; struct { double x_4_1_1; double x_4_1_2; double x_4_1_3; } x4; struct { double x_5_1_1; double x_5_1_2; double x_5_1_3; } x5; float x6; float x7; boolx8; float x9; double x10; struct { double x_11_1_1[4][4]; } x11; struct { double x_12_1_1[4][4]; } x12; struct { double x_13_1_1[4][4]; } x13; id x14; float x15; boolx16; struct { double x_17_1_1; double x_17_1_2; double x_17_1_3; } x17; struct { double x_18_1_1; double x_18_1_2; double x_18_1_3; } x18; double x19; double x20; struct CGSize { float x_21_1_1; float x_21_1_2; } x21; float x22; struct { BOOL x_23_1_1; double x_23_1_2; double x_23_1_3; double x_23_1_4; double x_23_1_5; } x23; struct { double x_24_1_1; double x_24_1_2; double x_24_1_3; } x24; struct { double x_25_1_1; double x_25_1_2; double x_25_1_3; } x25; }*)viewTransform;
- (float)contentScale;
- (int)coordinateSpace;
- (void)dealloc;
- (float)degreesFromPlumb;
- (void)evaluateWorldPoint:(struct { double x1; double x2; double x3; })arg1 isDistanceClipped:(BOOL*)arg2 zoom:(float*)arg3 tilt:(float*)arg4;
- (double)farPlaneDistance;
- (double)focusDistance;
- (struct { double x1; double x2; double x3; })focusPoint;
- (struct { double x1; double x2; double x3; })forwardVector;
- (struct { double x1; double x2; double x3; })groundPointFromPixel:(struct { float x1; float x2; })arg1;
- (struct { double x1; double x2; double x3; })groundPointFromScreenPoint:(struct CGPoint { float x1; float x2; })arg1;
- (float)heading;
- (id)init;
- (BOOL)isGeocentric;
- (BOOL)isMercator;
- (struct { double x1; double x2; double x3; double x4; })mercatorRect:(struct { double x1; double x2; double x3; double x4; })arg1;
- (double)nearPlaneDistance;
- (struct { double x1[4][4]; })orientationMatrixAtWorldPoint:(struct { double x1; double x2; double x3; })arg1;
- (struct { double x1; double x2; double x3; })rightVector;
- (const struct { double x1[4][4]; }*)scaledViewProjectionMatrix;
- (struct CGSize { float x1; float x2; })screenSizeInPixels;
- (struct CGSize { float x1; float x2; })screenSizeInPoints;
- (void)setCoordinateSpace:(int)arg1 screenSizeInPixels:(struct CGSize { float x1; float x2; })arg2 contentScale:(float)arg3 frustum:(struct { BOOL x1; double x2; double x3; double x4; double x5; })arg4 position:(struct { double x1; double x2; double x3; })arg5 orientation:(const struct { double x1[4][4]; }*)arg6;
- (void)setScaledViewProjectionMatrix:(const struct { double x1[4][4]; }*)arg1;
- (void)setStyleZAdjust:(float)arg1;
- (float)styleZAdjust;
- (struct { double x1; double x2; double x3; })translation;
- (struct { double x1; double x2; double x3; })translationInMercator;
- (struct { double x1; double x2; double x3; })upVector;
- (const struct { double x1[4][4]; }*)viewProjectionMatrix;
- (id)viewVolume;
- (double)widthOverDepth;

@end
