/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@class VKCamera, VKGlobeViewWrapperImp, VKGlobeAdapter, <VKRouteMatchedAnnotationPresentation>, VKCalloutController, VKWorld, VKAnchorContext, VKGlobeCameraController, VKViewTransform, GEOMapRegion, AltMapView, VKGlobeLineContainer, VKTrafficIncident, VKAnnotationModel, NSSet, VKGlobePointCache, <VKTrackableAnnotation>, NSObject<OS_dispatch_queue>, <VKInteractiveMapDelegate>, NSArray, UIView;

@interface VKClassicGlobeCanvas : VKScreenCanvas <AltMapDelegate, AltRendererCallback, VKAnnotationModelDelegate, VKCameraControllerCanvasDelegate, VKCalloutControllerDelegate, VKGlobeAdapterDelegate, VKWorldDelegate, VKTrafficIncidentsMapModelDelegate, VKInteractiveMap> {
    struct UIEdgeInsets { 
        float top; 
        float left; 
        float bottom; 
        float right; 
    struct UIEdgeInsets { 
        float top; 
        float left; 
        float bottom; 
        float right; 
    struct shared_ptr<VKGlobeStylesheet> { 
        struct VKGlobeStylesheet {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    struct AltitudeDebugSettings { 
        BOOL altitudePauseLoading; 
        BOOL altitudeShowTileBounds; 
        float lodScale; 
        float animationSpinTime; 
    struct { 
        double latitude; 
        double longitude; 
    struct shared_ptr<bool> { 
        bool*__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    VKAnchorContext *_anchorContext;
    } _animationCoordinate;
    double _animationZoom;
    VKAnnotationModel *_annotationModel;
    VKCalloutController *_calloutController;
    VKGlobeCameraController *_cameraController;
    BOOL _canShowFlyover;
    } _debugSettings;
    <VKInteractiveMapDelegate> *_delegate;
    } _edgeInsets;
    BOOL _forceRepaint;
    } _fullyOccludedEdgeInsets;
    VKCamera *_geocentricCamera;
    VKGlobeAdapter *_globeAdapter;
    } _globeStyleSheet;
    AltMapView *_globeView;
    BOOL _initialized;
    } _isDead;
    BOOL _labelMarkerSelectionEnabled;
    int _labelScaleFactor;
    NSObject<OS_dispatch_queue> *_layoutQueue;
    VKGlobeLineContainer *_lineContainer;
    BOOL _localizeLabels;
    int _mapType;
    BOOL _pendingAnimation;
    VKGlobePointCache *_pointCache;
    NSObject<OS_dispatch_queue> *_rootLayoutQueue;
    BOOL _searchAnimationEnabled;
    BOOL _tracking;
    VKViewTransform *_viewTransform;
    VKWorld *_world;
    VKGlobeViewWrapperImp *_wrapper;
}

@property BOOL alwaysDraws;
@property(getter=isAnimatingToTrackAnnotation,readonly) BOOL animatingToTrackAnnotation;
@property UIView * calloutContainerView;
@property(retain) VKCalloutController * calloutController;
@property Class calloutViewClass;
@property <VKInteractiveMapDelegate> * delegate;
@property struct UIEdgeInsets { float x1; float x2; float x3; float x4; } edgeInsets;
@property(readonly) BOOL flyoverAvailable;
@property BOOL forceRepaint;
@property(getter=isFullyDrawn,readonly) BOOL fullyDrawn;
@property struct UIEdgeInsets { float x1; float x2; float x3; float x4; } fullyOccludedEdgeInsets;
@property(getter=isFullyPitched,readonly) BOOL fullyPitched;
@property BOOL isPitchable;
@property BOOL labelMarkerSelectionEnabled;
@property int labelScaleFactor;
@property BOOL localizeLabels;
@property(retain) GEOMapRegion * mapRegion;
@property(readonly) GEOMapRegion * mapRegionOfInterest;
@property int mapType;
@property(readonly) double maximumZoomLevel;
@property(readonly) double minimumZoomLevel;
@property(readonly) NSArray * overlays;
@property(readonly) NSSet * persistentOverlays;
@property(readonly) double pitch;
@property(getter=isPitched,readonly) BOOL pitched;
@property(readonly) double presentationYaw;
@property <VKRouteMatchedAnnotationPresentation> * routeLineSplitAnnotation;
@property(getter=isSearchAnimationEnabled) BOOL searchAnimationEnabled;
@property(readonly) VKTrafficIncident * selectedTrafficIncident;
@property BOOL staysCenteredDuringPinch;
@property BOOL staysCenteredDuringRotation;
@property(readonly) <VKTrackableAnnotation> * trackingAnnotation;
@property BOOL trackingAutoSelectsZoomScale;
@property(getter=isTrackingHeading,readonly) BOOL trackingHeading;
@property BOOL trafficEnabled;
@property(readonly) NSArray * visibleTileSets;
@property(readonly) double yaw;

+ (BOOL)supportsMapType:(int)arg1;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_activeTileGroupChanged:(id)arg1;
- (void)_runPendingAnimation;
- (void)_setAnimationCoordinate:(struct { double x1; double x2; })arg1 andZoom:(double)arg2;
- (void)_updateDebugSettings;
- (double)_zoomForMapRegion:(id)arg1;
- (void)addAnnotationMarker:(id)arg1 allowAnimation:(BOOL)arg2;
- (id)addHandleAtCoordinate:(struct { double x1; double x2; })arg1 withHighPrecision:(BOOL)arg2;
- (void)addOverlay:(id)arg1;
- (void)addPersistentOverlay:(id)arg1;
- (BOOL)alwaysDraws;
- (void)animateToMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 duration:(double)arg4 completion:(id)arg5;
- (id)annotationCoordinateTest;
- (id)annotationMarkerDeselectionCallback;
- (id)annotationMarkerForSelectionAtPoint:(struct CGPoint { float x1; float x2; })arg1 avoidCurrent:(BOOL)arg2;
- (id)annotationMarkers;
- (void)annotationModel:(id)arg1 annotationMarker:(id)arg2 calloutAccessoryControlTapped:(id)arg3;
- (void)annotationModel:(id)arg1 didAnimateInAnnotationMarkers:(id)arg2;
- (void)annotationModel:(id)arg1 willAnimateInAnnotationMarkers:(id)arg2;
- (id)annotationRectTest;
- (id)attributionsForCurrentRegion;
- (id)calloutContainerView;
- (void)calloutController:(id)arg1 didUpdateCalloutPopoverController:(id)arg2 forSource:(id)arg3;
- (void)calloutController:(id)arg1 didUpdateCalloutView:(id)arg2 forSource:(id)arg3 animated:(BOOL)arg4;
- (void)calloutController:(id)arg1 needsPanByPixelOffset:(struct CGPoint { float x1; float x2; })arg2 relativeToScreenPoint:(struct CGPoint { float x1; float x2; })arg3 animated:(BOOL)arg4 duration:(double)arg5 completionHandler:(id)arg6;
- (void)calloutController:(id)arg1 willShowCalloutPopoverController:(id)arg2 forSource:(id)arg3;
- (void)calloutController:(id)arg1 willShowCalloutView:(id)arg2 forSource:(id)arg3;
- (id)calloutController;
- (Class)calloutViewClass;
- (id)camera;
- (void)cameraController:(id)arg1 canEnter3DModeDidChange:(BOOL)arg2;
- (void)cameraController:(id)arg1 didBecomePitched:(BOOL)arg2;
- (id)cameraController:(id)arg1 presentationForAnnotation:(id)arg2;
- (void)cameraControllerDidChangeCameraState:(id)arg1;
- (void)cameraControllerDidStopRegionAnimation:(id)arg1 completed:(BOOL)arg2;
- (void)cameraControllerWillStartRegionAnimation:(id)arg1;
- (BOOL)canEnter3DMode;
- (BOOL)canRenderInWindow:(id)arg1;
- (BOOL)canShowAnimationForSearchResultWithMapRegion:(id)arg1;
- (struct { double x1; double x2; double x3; })centerCoordinate;
- (struct CGPoint { float x1; float x2; })convertCoordinate:(struct { double x1; double x2; })arg1 toCameraModelPointToView:(id)arg2;
- (struct CGPoint { float x1; float x2; })convertCoordinate:(struct { double x1; double x2; })arg1 toPointToView:(id)arg2;
- (struct { double x1; double x2; })convertPoint:(struct CGPoint { float x1; float x2; })arg1 toCoordinateFromView:(id)arg2;
- (void)dealloc;
- (void)debugHighlightLabelAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)delegate;
- (void)deselectAnnotationMarker:(id)arg1 animated:(BOOL)arg2;
- (void)deselectLabelMarkerAnimated:(BOOL)arg1;
- (void)deselectTrafficIncidentAnimated:(BOOL)arg1;
- (id)detailedDescription;
- (void)didEnterBackground;
- (void)didReceiveMemoryWarning;
- (void)dismissExpandedCallout;
- (void)drawVK;
- (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })edgeInsets;
- (void)enter3DMode;
- (void)exit3DMode;
- (BOOL)flyoverAvailable;
- (void)forceLayout;
- (BOOL)forceRepaint;
- (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })fullyOccludedEdgeInsets;
- (unsigned int)getTotalDownloaded;
- (void)globeAdapter:(id)arg1 didDeselectLabelMarker:(id)arg2;
- (void)globeAdapter:(id)arg1 labelMarker:(id)arg2 calloutAccessoryControlTapped:(id)arg3;
- (void)globeAdapter:(id)arg1 setNeedsDisplay:(BOOL)arg2;
- (void)globeAdapter:(id)arg1 setNeedsLayout:(BOOL)arg2;
- (void)globeAdapter:(id)arg1 willSelectLabelMarker:(id)arg2;
- (void)incidentsModel:(id)arg1 didDeselectTrafficIncident:(id)arg2;
- (void)incidentsModel:(id)arg1 trafficIncident:(id)arg2 calloutAccessoryControlTapped:(id)arg3;
- (void)incidentsModel:(id)arg1 willSelectTrafficIncident:(id)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 context:(id)arg2;
- (void)initialize;
- (BOOL)isAnimatingToTrackAnnotation;
- (BOOL)isFullyDrawn;
- (BOOL)isFullyPitched;
- (BOOL)isPitchable;
- (BOOL)isPitched;
- (BOOL)isSearchAnimationEnabled;
- (BOOL)isShowingNoDataPlaceholders;
- (BOOL)isTrackingHeading;
- (id)labelMarkerForSelectionAtPoint:(struct CGPoint { float x1; float x2; })arg1 pointLabelsOnly:(BOOL)arg2;
- (BOOL)labelMarkerSelectionEnabled;
- (int)labelScaleFactor;
- (void)layoutVK;
- (BOOL)localizeLabels;
- (id)mapRegion;
- (id)mapRegionOfInterest;
- (int)mapType;
- (void)mapView:(id)arg1 canEnter3DModeDidChange:(BOOL)arg2;
- (void)mapView:(id)arg1 canShowFlyoverDidChange:(BOOL)arg2;
- (void)mapView:(id)arg1 didBecomePitched:(BOOL)arg2;
- (void)mapView:(id)arg1 didResizeToWidth:(unsigned int)arg2 height:(unsigned int)arg3;
- (void)mapView:(id)arg1 willDrawInContext:(struct CGContext { }*)arg2;
- (void)mapViewDidChangeVisibleRegion:(id)arg1;
- (void)mapViewDidFinishLoadingTiles:(id)arg1;
- (void)mapViewDidStartLoadingTiles:(id)arg1;
- (void)mapViewDidStartUserInteraction:(id)arg1;
- (void)mapViewDidStopUserInteraction:(id)arg1;
- (double)maximumZoomLevel;
- (double)minimumZoomLevel;
- (void)onTimerFired:(double)arg1;
- (id)overlays;
- (id)persistentOverlays;
- (double)pitch;
- (struct { double x1; double x2; double x3; })pointForHandle:(id)arg1 atCoordinate:(struct { double x1; double x2; })arg2 withHighPrecision:(BOOL)arg3;
- (void)postRender;
- (void)preRender;
- (double)presentationYaw;
- (void)reload;
- (void)removeAnnotationMarker:(id)arg1;
- (void)removeHandle:(id)arg1;
- (void)removeOverlay:(id)arg1;
- (void)removePersistentOverlay:(id)arg1;
- (BOOL)restoreViewportFromInfo:(id)arg1;
- (id)routeLineSplitAnnotation;
- (struct { double x1; double x2; double x3; })screenPointForPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)selectAnnotationMarker:(id)arg1 animated:(BOOL)arg2 avoid:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3;
- (void)selectLabelMarker:(id)arg1 animated:(BOOL)arg2 avoid:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3;
- (void)selectTrafficIncident:(id)arg1 animated:(BOOL)arg2 avoid:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3;
- (id)selectedAnnotationMarker;
- (id)selectedLabelMarker;
- (id)selectedTrafficIncident;
- (void)setAlwaysDraws:(BOOL)arg1;
- (void)setAnnotationMarkerDeselectionCallback:(id)arg1;
- (void)setBackgroundViewLoading:(BOOL)arg1;
- (void)setCalloutContainerView:(id)arg1;
- (void)setCalloutController:(id)arg1;
- (void)setCalloutViewClass:(Class)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEdgeInsets:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (void)setForceRepaint:(BOOL)arg1;
- (void)setFullyOccludedEdgeInsets:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (void)setHidden:(BOOL)arg1;
- (void)setIsPitchable:(BOOL)arg1;
- (void)setLabelMarkerSelectionEnabled:(BOOL)arg1;
- (void)setLabelScaleFactor:(int)arg1;
- (void)setLaunchCompletion:(id)arg1;
- (void)setLocalizeLabels:(BOOL)arg1;
- (void)setLodMode:(int)arg1;
- (void)setMapRegion:(id)arg1 animated:(BOOL)arg2;
- (void)setMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 animated:(BOOL)arg4 completion:(id)arg5;
- (void)setMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 animated:(BOOL)arg4;
- (void)setMapRegion:(id)arg1;
- (void)setMapType:(int)arg1;
- (void)setRouteLineSplitAnnotation:(id)arg1;
- (void)setSearchAnimationEnabled:(BOOL)arg1;
- (void)setStaysCenteredDuringPinch:(BOOL)arg1;
- (void)setStaysCenteredDuringRotation:(BOOL)arg1;
- (void)setTrackingAutoSelectsZoomScale:(BOOL)arg1;
- (void)setTrafficEnabled:(BOOL)arg1;
- (void)setYaw:(double)arg1 animated:(BOOL)arg2;
- (void)showSearchResultAnimationAtCoordinate:(struct { double x1; double x2; })arg1 withMapRegion:(id)arg2;
- (void)startLoadPosition:(struct { double x1; double x2; })arg1 withCompletion:(id)arg2;
- (void)startPanningAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)startPinchingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)startPitchingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)startPlaceCardAnimationAtCoordinate:(struct { double x1; double x2; })arg1 andDistance:(double)arg2;
- (void)startRotatingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)startTrackingAnnotation:(id)arg1 trackHeading:(BOOL)arg2 animated:(BOOL)arg3;
- (BOOL)staysCenteredDuringPinch;
- (BOOL)staysCenteredDuringRotation;
- (void)stopAnimations;
- (void)stopPanningAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)stopPinchingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)stopPitchingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)stopPlaceCardAnimationAtCoordinate;
- (void)stopRotatingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)stopSearchResultAnimation;
- (void)stopSnappingAnimations;
- (void)stopTrackingAnnotation;
- (id)trackingAnnotation;
- (BOOL)trackingAutoSelectsZoomScale;
- (BOOL)trafficEnabled;
- (id)trafficIncidentForSelectionAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)transferCamera:(id)arg1;
- (void)updateCameraFromGlobe;
- (void)updatePanWithTranslation:(struct CGPoint { float x1; float x2; })arg1;
- (void)updatePinchWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1 oldFactor:(double)arg2 newFactor:(double)arg3;
- (void)updatePitchWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1 translation:(double)arg2;
- (void)updateRotationWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1 newValue:(double)arg2;
- (id)viewportInfo;
- (id)visibleTileSets;
- (void)waitForFirstFrame;
- (void)worldDisplayDidChange:(id)arg1;
- (void)worldLayoutDidChange:(id)arg1;
- (BOOL)writeVisibleTrafficTilesToDirectory:(id)arg1 error:(id*)arg2;
- (double)yaw;
- (void)zoom:(double)arg1 withFocusPoint:(struct CGPoint { float x1; float x2; })arg2 completionHandler:(id)arg3;

@end
