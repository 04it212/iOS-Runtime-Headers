/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@class VKAnnotationTrackingCameraController, VKTrackingCameraController, <VKTrackableAnnotation>, VKAnimation, VKMapModel;

@interface VKMapCameraController : VKCameraController <VKTrackingCameraControllerDelegate, VKAnnotationTrackingCameraControllerDelegate> {
    VKMapModel *_mapModel;
    VKAnimation *_zoomAnimation;
    VKAnimation *_pitchAnimation;
    VKAnimation *_rotationAnimation;
    VKTrackingCameraController *_trackingCameraController;
    VKAnnotationTrackingCameraController *_annotationTrackingCameraController;
    double _minDistanceToGroundAlongForwardVector;
    double _maxDistanceToGroundAlongForwardVector;
    double _canonicalSkyHeight;
    struct UIEdgeInsets { 
        float top; 
        float left; 
        float bottom; 
        float right; 
    } _edgeInsets;
    double _beganDoublePanPitch;
    BOOL _isPitchable;
    BOOL _isPitchIncreasing;
    BOOL _trackingAutoSelectsZoomScale;
    BOOL _staysCenteredDuringPinch;
    double _lastRotation;
    BOOL _rotationLowZoomSnappingEnabled;
    BOOL _shouldRotationRubberband;
    BOOL _staysCenteredDuringRotation;
    struct CGPoint { 
        float x; 
        float y; 
    } _panStartScreenPoint;
    struct CGPoint { 
        float x; 
        float y; 
    } _panLastScreenPoint;
    double _tracePlaybackSpeedMultiplier;
    BOOL _shouldLimitTrackingCameraHeight;
}

@property(retain) VKMapModel * mapModel;
@property BOOL staysCenteredDuringPinch;
@property BOOL staysCenteredDuringRotation;
@property BOOL isPitchable;
@property(getter=isPitched,readonly) BOOL pitched;
@property(getter=isFullyPitched,readonly) BOOL fullyPitched;
@property(readonly) BOOL canEnter3DMode;
@property BOOL allowDatelineWraparound;
@property struct UIEdgeInsets { float x1; float x2; float x3; float x4; } edgeInsets;
@property double canonicalSkyHeight;
@property BOOL trackingAutoSelectsZoomScale;
@property BOOL shouldLimitTrackingCameraHeight;
@property(getter=isAnimatingToTrackAnnotation,readonly) BOOL animatingToTrackAnnotation;
@property(readonly) <VKTrackableAnnotation> * trackingAnnotation;
@property(getter=isTrackingHeading,readonly) BOOL trackingHeading;
@property double trackingZoomScale;
@property double tracePlaybackSpeedMultiplier;


- (BOOL)shouldLimitTrackingCameraHeight;
- (double)tracePlaybackSpeedMultiplier;
- (double)canonicalSkyHeight;
- (BOOL)canPitchWithThreshold:(float)arg1;
- (void)annotationTrackingCameraControllerDidChangeCameraState:(id)arg1;
- (id)annotationTrackingCameraController:(id)arg1 presentationForAnnotation:(id)arg2;
- (void)trackingCameraController:(id)arg1 updatedStartAnimationTargetPosition:(struct { double x1; double x2; double x3; })arg2 orientation:(const struct { double x1[4][4]; }*)arg3;
- (void)trackingCameraControllerDidEndAnimating:(id)arg1;
- (void)trackingCameraControllerDidBeginAnimating:(id)arg1;
- (void)trackingCameraControllerDidChangeCameraState:(id)arg1;
- (int)minimumNormalizedZoomLevel;
- (int)maximumNormalizedZoomLevel;
- (float)maxPitchForNormalizedZoomLevel:(float)arg1;
- (float)idealPitchForNormalizedZoomLevel:(float)arg1;
- (void)stopPitching:(struct CGPoint { float x1; float x2; })arg1;
- (void)pitch:(struct CGPoint { float x1; float x2; })arg1 translation:(double)arg2;
- (void)startPitching:(struct CGPoint { float x1; float x2; })arg1;
- (void)stopRotating:(struct CGPoint { float x1; float x2; })arg1;
- (void)rotate:(double)arg1 atScreenPoint:(struct CGPoint { float x1; float x2; })arg2;
- (void)startRotating:(struct CGPoint { float x1; float x2; })arg1;
- (void)stopPanning:(struct CGPoint { float x1; float x2; })arg1;
- (void)startPanning:(struct CGPoint { float x1; float x2; })arg1;
- (void)stopPinching:(struct CGPoint { float x1; float x2; })arg1;
- (void)pinch:(struct CGPoint { float x1; float x2; })arg1 oldFactor:(double)arg2 newFactor:(double)arg3;
- (void)startPinching:(struct CGPoint { float x1; float x2; })arg1;
- (void)tapZoom:(struct CGPoint { float x1; float x2; })arg1 levels:(double)arg2 completionHandler:(id)arg3;
- (struct CGPoint { float x1; float x2; })_scaledScreenPointForPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)rotateToYaw:(double)arg1 withPoint:(const struct { double x1; double x2; double x3; }*)arg2 animated:(BOOL)arg3;
- (float)currentStyleZoomLevel;
- (float)minimumPitchForNormalizedZoomLevel:(float)arg1;
- (id)mapModel;
- (void)zoom:(double)arg1 withPoint:(struct { double x1; double x2; double x3; })arg2 completionHandler:(id)arg3;
- (float)currentMinimumNormalizedZoomLevel;
- (float)currentMaximumNormalizedZoomLevel;
- (double)_rubberBandOffsetForOffset:(double)arg1 maxOffset:(double)arg2 minOffset:(double)arg3 range:(double)arg4;
- (BOOL)snapMapIfNecessary:(const struct { double x1; double x2; double x3; }*)arg1 animated:(BOOL)arg2;
- (void)zoomToLevel:(double)arg1 withPoint:(struct { double x1; double x2; double x3; })arg2;
- (void)rotateToPitch:(double)arg1 withPoint:(const struct { double x1; double x2; double x3; }*)arg2 preserveAltitude:(BOOL)arg3 animated:(BOOL)arg4 exaggerate:(BOOL)arg5;
- (float)currentNormalizedZoomLevel;
- (float)currentDisplayZoomLevel;
- (void)canvasDidLayout;
- (BOOL)isAtDefaultTrackingZoomScale;
- (void)didAnimateInAnnotationMarkers:(id)arg1;
- (void)willAnimateInAnnotationMarkers:(id)arg1;
- (void)panWithPixelOffset:(struct CGPoint { float x1; float x2; })arg1 relativeToScreenPoint:(struct CGPoint { float x1; float x2; })arg2 animated:(BOOL)arg3 duration:(double)arg4 completionHandler:(id)arg5;
- (void)startCameraMotionAnimated:(BOOL)arg1 pounceCompletionHandler:(id)arg2;
- (void)stopCameraMotion;
- (void)setCameraViewForPointOfReference:(struct { double x1; double x2; })arg1 heading:(double)arg2 pointOfFocus:(struct { double x1; double x2; })arg3 pointsOfInterest:(id)arg4 style:(int)arg5 focusStyle:(int)arg6 animated:(BOOL)arg7;
- (void)setMapModel:(id)arg1;
- (BOOL)updateCameraToPositionOrientationLimits;
- (void)updateCameraZBounds;
- (void)canvasFrameDidChange;
- (struct CGPoint { float x1; float x2; })_centerScreenPoint;
- (BOOL)clampZoomLevelIfNecessary;
- (void)puckAnimator:(id)arg1 updatedTargetPosition:(struct { double x1; double x2; double x3; })arg2;
- (void)puckAnimatorDidStop:(id)arg1;
- (void)puckAnimator:(id)arg1 updatedPosition:(struct { struct { double x_1_1_1; double x_1_1_2; double x_1_1_3; } x1; double x2; BOOL x3; }*)arg2;
- (void)stopSnappingAnimations;
- (void)stopPitchingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)updatePitchWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1 translation:(double)arg2;
- (void)startPitchingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)stopRotatingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)updateRotationWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1 newValue:(double)arg2;
- (void)startRotatingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)stopPanningAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)updatePanWithTranslation:(struct CGPoint { float x1; float x2; })arg1;
- (void)startPanningAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)stopPinchingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)updatePinchWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1 oldFactor:(double)arg2 newFactor:(double)arg3;
- (void)startPinchingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)zoom:(double)arg1 withFocusPoint:(struct CGPoint { float x1; float x2; })arg2 completionHandler:(id)arg3;
- (BOOL)restoreViewportFromInfo:(id)arg1;
- (id)viewportInfo;
- (void)setTracePlaybackSpeedMultiplier:(double)arg1;
- (BOOL)isAnimatingToTrackAnnotation;
- (void)setTrackingZoomScale:(double)arg1;
- (double)trackingZoomScale;
- (BOOL)isFullyPitched;
- (BOOL)isPitched;
- (void)exit3DMode;
- (void)enter3DMode;
- (void)setShouldLimitTrackingCameraHeight:(BOOL)arg1;
- (BOOL)canEnter3DMode;
- (void)startTrackingAnnotation:(id)arg1 trackHeading:(BOOL)arg2 animated:(BOOL)arg3;
- (void)stopTrackingAnnotation;
- (BOOL)isTrackingHeading;
- (id)trackingAnnotation;
- (void)setTrackingAutoSelectsZoomScale:(BOOL)arg1;
- (BOOL)trackingAutoSelectsZoomScale;
- (void)setCanonicalSkyHeight:(double)arg1;
- (id)detailedDescription;
- (BOOL)isPitchable;
- (void)setIsPitchable:(BOOL)arg1;
- (BOOL)staysCenteredDuringRotation;
- (void)setStaysCenteredDuringRotation:(BOOL)arg1;
- (BOOL)staysCenteredDuringPinch;
- (void)setStaysCenteredDuringPinch:(BOOL)arg1;
- (void)setGesturing:(BOOL)arg1;
- (void)setAllowDatelineWraparound:(BOOL)arg1;
- (BOOL)allowDatelineWraparound;
- (struct { double x1; double x2; double x3; })groundPointFromScreenPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)dealloc;
- (id)init;
- (void)pan:(struct CGPoint { float x1; float x2; })arg1;
- (void)setEdgeInsets:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (int)tileSize;
- (BOOL)isAnimating;
- (BOOL)isTracking;
- (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })edgeInsets;

@end
