/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@class NSArray, VKAnnotationMarker, VKAnnotationMarkerLayer, NSMutableArray;

@interface VKAnnotationMarkerLayer : NSObject  {
    VKAnnotationMarkerLayer *_superlayer;
    NSMutableArray *_sublayers;
    VKAnnotationMarker *_annotationMarker;
    struct CGPoint { 
        float x; 
        float y; 
    } _centerOffset;
    struct CGPoint { 
        float x; 
        float y; 
    } _accumulatedCenterOffset;
    BOOL _hasScreenRect;
    struct { 
        double x0; 
        double x1; 
        double y0; 
        double y1; 
    } _screenRect;
    BOOL _hasMass;
}

@property VKAnnotationMarkerLayer * superlayer;
@property(readonly) NSArray * sublayers;
@property struct CGPoint { float x1; float x2; } centerOffset;
@property BOOL hasMass;
@property VKAnnotationMarker * annotationMarker;
@property struct CGPoint { float x1; float x2; } accumulatedCenterOffset;
@property(readonly) BOOL hasScreenRect;
@property struct { double x1; double x2; double x3; double x4; } screenRect;


- (void)dealloc;
- (id)init;
- (id)sublayers;
- (id)superlayer;
- (void)removeFromSuperlayer;
- (void)addSublayer:(id)arg1;
- (void)setHasMass:(BOOL)arg1;
- (struct CGPoint { float x1; float x2; })accumulatedCenterOffset;
- (id)annotationMarker;
- (void)insertSublayer:(id)arg1 aboveSublayer:(id)arg2;
- (void)insertSublayer:(id)arg1 belowSublayer:(id)arg2;
- (BOOL)hasScreenRect;
- (BOOL)hasMass;
- (BOOL)shouldSnapToPixelsWithContext:(id)arg1;
- (void)removeSublayer:(id)arg1;
- (void)setAccumulatedCenterOffset:(struct CGPoint { float x1; float x2; })arg1;
- (void)setSuperlayer:(id)arg1;
- (void)setScreenRect:(struct { double x1; double x2; double x3; double x4; })arg1;
- (struct CGPoint { float x1; float x2; })centerOffset;
- (void)setCenterOffset:(struct CGPoint { float x1; float x2; })arg1;
- (struct { double x1; double x2; double x3; double x4; })screenRect;
- (void)setAnnotationMarker:(id)arg1;
- (float)distanceFromPoint:(struct { double x1; double x2; double x3; })arg1 canvasSize:(struct CGSize { float x1; float x2; })arg2;
- (void)layoutWithContext:(id)arg1;
- (void)willLayoutWithContext:(id)arg1;
- (void)drawWithContext:(id)arg1;

@end
