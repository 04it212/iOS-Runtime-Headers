/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class VKAnimation, VGLTexture, VGLMesh, GEOVectorTile, VKStylesheet, VGLMultiTexturedMesh, __end_, VGLGroupCullableMesh, VGLCullableMesh, VKHeightfield;

@interface VKBuildingFootprintMaker : NSObject <VKTileHeightInformation> {
    VGLMultiTexturedMesh *_landmarksMesh;
    VGLMesh *_landmarkShadowsMesh;
    float _maxHeight;
    VKHeightfield *_heightfield;
    VKAnimation *_animateOut;
    VKAnimation *_animateIn;
    float _alpha;
    float _scale;
    GEOVectorTile *_geotile;
    VKStylesheet *_stylesheet;
    VKAnimation *_animateBuildingMode;

  /* Unexpected information at end of encoded ivar type: } */
  /* Error parsing encoded ivar type info: {vector<VGLGroupCullableMesh *, vk_allocator<VGLGroupCullableMesh *> >="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<VGLGroupCullableMesh **, vk_allocator<VGLGroupCullableMesh *> >="__first_"^@}} */
    /* Warning: unhandled struct encoding: '{vector<VGLGroupCullableMesh *, vk_allocator<VGLGroupCullableMesh *> >="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<VGLGroupCullableMesh **, vk_allocator<VGLGroupCullableMesh *> >="__first_"^@}}' */ struct vector<VGLGroupCullableMesh *, vk_allocator<VGLGroupCullableMesh *> > { 
        __end_ **__begin_; 
    } _realisticTopMeshes;


  /* Unexpected information at end of encoded ivar type: } */
  /* Error parsing encoded ivar type info: {vector<VGLGroupCullableMesh *, vk_allocator<VGLGroupCullableMesh *> >="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<VGLGroupCullableMesh **, vk_allocator<VGLGroupCullableMesh *> >="__first_"^@}} */
    /* Warning: unhandled struct encoding: '{vector<VGLGroupCullableMesh *, vk_allocator<VGLGroupCullableMesh *> >="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<VGLGroupCullableMesh **, vk_allocator<VGLGroupCullableMesh *> >="__first_"^@}}' */ struct vector<VGLGroupCullableMesh *, vk_allocator<VGLGroupCullableMesh *> > { 
        __end_ **__begin_; 
    } _regularTopMeshes;

    struct vector<std::__1::vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>>, vk_allocator<std::__1::vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>>> > { 
        struct vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *> > {} *__begin_; 
        struct vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *> > {} *__end_; 
        struct __compressed_pair<std::__1::vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>> *, vk_allocator<std::__1::vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>>> > { 
            struct vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *> > {} *__first_; 
        } __end_cap_; 
    } _regularFacadeCollections;
    struct vector<std::__1::vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>>, vk_allocator<std::__1::vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>>> > { 
        struct vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *> > {} *__begin_; 
        struct vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *> > {} *__end_; 
        struct __compressed_pair<std::__1::vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>> *, vk_allocator<std::__1::vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>>> > { 
            struct vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *> > {} *__first_; 
        } __end_cap_; 
    } _realisticFacadeCollections;
    VGLCullableMesh *_pointyBuildingsMesh;
    VGLCullableMesh *_footprintsMesh;
    VGLGroupCullableMesh *_sharedTopMesh;
    VGLGroupCullableMesh *_regularTopMesh;

  /* Unexpected information at end of encoded ivar type: } */
  /* Error parsing encoded ivar type info: {vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *> >="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<VGLSingleTexturedGroupCullableMesh **, vk_allocator<VGLSingleTexturedGroupCullableMesh *> >="__first_"^@}} */
    /* Warning: unhandled struct encoding: '{vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *> >="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<VGLSingleTexturedGroupCullableMesh **, vk_allocator<VGLSingleTexturedGroupCullableMesh *> >="__first_"^@}}' */ struct vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *> > { 
        __end_ **__begin_; 
    } _sharedFacadeCollection;


  /* Unexpected information at end of encoded ivar type: } */
  /* Error parsing encoded ivar type info: {vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *> >="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<VGLSingleTexturedGroupCullableMesh **, vk_allocator<VGLSingleTexturedGroupCullableMesh *> >="__first_"^@}} */
    /* Warning: unhandled struct encoding: '{vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *> >="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<VGLSingleTexturedGroupCullableMesh **, vk_allocator<VGLSingleTexturedGroupCullableMesh *> >="__first_"^@}}' */ struct vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *> > { 
        __end_ **__begin_; 
    } _regularFacadeCollection;

    VGLTexture *_shadowTexture;
    struct { 
        double v[4][4]; 
    } _shadowTextureMatrix;
    struct vector<VKBuildingHeightMap, vk_allocator<VKBuildingHeightMap> > { 
        struct { /* ? */ } *__begin_; 
        struct { /* ? */ } *__end_; 
        struct __compressed_pair<VKBuildingHeightMap *, vk_allocator<VKBuildingHeightMap> > { 
            struct { /* ? */ } *__first_; 
        } __end_cap_; 
    } _landmarkHeights;
}

@property(readonly) VGLCullableMesh * pointyBuildingsMesh;
@property(readonly) VGLCullableMesh * footprintsMesh;
@property(readonly) VGLTexture * shadowTexture;
@property(readonly) const struct { double x1[4][4]; }* shadowTextureMatrix;
@property(readonly) VGLMultiTexturedMesh * landmarksMesh;
@property(readonly) VGLMesh * landmarkShadowsMesh;
@property(readonly) float maxHeight;
@property(retain) VKAnimation * animateOut;
@property(retain) VKAnimation * animateIn;
@property float alpha;
@property float scale;
@property(retain) VKAnimation * animateBuildingMode;


- (id).cxx_construct;
- (void).cxx_destruct;
- (void)dealloc;
- (void)setScale:(float)arg1;
- (float)scale;
- (void)setAlpha:(float)arg1;
- (float)alpha;
- (float)maxHeight;
- (id)landmarkShadowsMesh;
- (void)_makeShadowTextureWithVectorTile:(id)arg1 skipLandmarks:(BOOL)arg2 pointyFootprints:(const struct unordered_map<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, vk_allocator<std::__1::pair<const unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>> > { struct __hash_table<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, std::__1::__unordered_map_hasher<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>, std::__1::equal_to<unsigned int>, true>, vk_allocator<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>> > { struct unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *>> > { struct __compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *>> > { struct __hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> {} **x_1_3_1; struct __bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *> > { struct __compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *> > { unsigned long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *>> > { struct __hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *> { struct __hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>, std::__1::hash<unsigned int>, true> > { unsigned long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>, std::__1::equal_to<unsigned int>, true> > { float x_4_2_1; } x_1_1_4; } x1; }*)arg3;
- (void)_makeMeshesWithLandmarksPresent:(BOOL)arg1 makeFacades:(BOOL)arg2 pointyFootprints:(struct unordered_map<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, vk_allocator<std::__1::pair<const unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>> > { struct __hash_table<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, std::__1::__unordered_map_hasher<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>, std::__1::equal_to<unsigned int>, true>, vk_allocator<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>> > { struct unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *>> > { struct __compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *>> > { struct __hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> {} **x_1_3_1; struct __bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *> > { struct __compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *> > { unsigned long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *>> > { struct __hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *> { struct __hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>, std::__1::hash<unsigned int>, true> > { unsigned long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>, std::__1::equal_to<unsigned int>, true> > { float x_4_2_1; } x_1_1_4; } x1; }*)arg3;
- (void)_makeFootprintsMesh;
- (BOOL)_makeThreeDBuildingsMesh;
- (void)setAnimateBuildingMode:(id)arg1;
- (id)landmarksMesh;
- (id)pointyBuildingsMesh;
- (id)footprintsMesh;
- (const struct { double x1[4][4]; }*)shadowTextureMatrix;
- (id)shadowTexture;
- (const struct vector<std::__1::vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>>, vk_allocator<std::__1::vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>>> > { struct vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *> > {} *x1; struct vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *> > {} *x2; struct __compressed_pair<std::__1::vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>> *, vk_allocator<std::__1::vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>>> > { struct vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *> > {} *x_3_1_1; } x3; }*)facadeCollectionsWithVectorType:(int)arg1;
- (const struct vector<VGLGroupCullableMesh *, vk_allocator<VGLGroupCullableMesh *> > { id *x1; id *x2; struct __compressed_pair<VGLGroupCullableMesh **, vk_allocator<VGLGroupCullableMesh *> > { id *x_3_1_1; } x3; }*)topMeshesWithVectorType:(int)arg1;
- (id)animateIn;
- (id)animateBuildingMode;
- (void)setAnimateOut:(id)arg1;
- (void)setAnimateIn:(id)arg1;
- (id)animateOut;
- (BOOL)heightAtX:(float)arg1 Y:(float)arg2 outZ:(float*)arg3;
- (id)initWithVectorTile:(id)arg1 stylesheet:(id)arg2 makeFacades:(BOOL)arg3;

@end
