/* Generated by RuntimeBrowser on iPhone OS 3.0
   Image: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

@class MPAudioDeviceController, VolumeController, NSMutableArray, MPQueueFeeder, AVController, CALayer, MPAVControllerToAggregateDCommunicator;



@interface MPAVController : NSObject 
{
    AVController *_avController;
    double _connectionFailTime;
    unsigned int _valid : 1;
    NSInteger _playbackMode;
    MPAudioDeviceController *_audioDeviceController;
    MPQueueFeeder *_feeder;
    VolumeController *_volumeController;
    CALayer *_videoLayer;
    NSUInteger _videoLayerUsageCount;
    NSUInteger _tickTimerEnabled;
    struct __CFRunLoopTimer { } *_tickTimer;
    double _tickInterval;
    NSInteger _indexChangeDirection;
    NSUInteger _itemIndexAtDeath;
    NSInteger _lastDisconnectReason;
    double _lastKnownTimeBeforeDeath;
    double _lastPlaybackIndexChangeTime;
    double _lastSetTime;
    double _lastSetTimeChangeTime;
    unsigned int _hasDelayedCurrentTimeToSet : 1;
    unsigned int _forceDelayedCurrentTimeToSet : 1;
    double _delayedCurrentTimeToSet;
    NSInteger _delayedCurrentTimeOptions;
    NSUInteger _lastSetTimeMarker;
    unsigned int _autoPlayWhenLikelyToKeepUp : 1;
    unsigned int _closedCaptioningEnabled : 1;
    NSInteger _eqPreset;
    double _nextFadeOutDuration;
    double _repeatGap;
    float _rateBeforeSeek;
    NSInteger _scanDirection;
    NSUInteger _scanLevel;
    unsigned int _isSeeking : 1;
    unsigned int _activeRewindHoldingAtStart : 1;
    NSUInteger _bufferingState;
    unsigned int _alwaysPlayWheneverPossible : 1;
    unsigned int _stopAtEnd : 1;
    unsigned int _pausedDuringInterruption : 1;
    NSUInteger _state;
    NSUInteger _displayOverridePlaybackState;
    id _subtitlesRecipient;
    unsigned int _subtitlesEnabled : 1;
    NSMutableArray *_queueFeederStateStack;
    NSInteger _feederMode;
    MPAVControllerToAggregateDCommunicator *_aggregateDCommunicator;
}

@property BOOL autoPlayWhenLikelyToKeepUp;
@property BOOL closedCaptioningEnabled;
@property NSUInteger repeatType;
@property(getter=isShuffled,readonly) BOOL shuffled;
@property NSUInteger shuffleType;
@property float volume;
@property(readonly) NSUInteger activeRepeatType;
@property(readonly) NSUInteger activeShuffleType;
@property(retain,readonly) MPItem *currentItem;
@property double currentTime;
@property(readonly) NSUInteger numberOfItems;
@property(getter=isPlaying,readonly) BOOL playing;
@property(getter=isRewindHoldingAtStart,readonly) BOOL rewindHoldingAtStart;
@property BOOL subtitlesEnabled;
@property(getter=isValid,readonly) BOOL valid;
@property BOOL alwaysPlayWheneverPossible;
@property NSInteger playbackMode;
@property BOOL stopAtEnd;
@property(retain,readonly) AVController *avController;
@property(readonly) BOOL handlingRemoteEvent;
@property float rate;
@property(getter=destinationIsTVOut) BOOL destinationIsTVOut; /* unknown property attribute: SsetDestinationIsTVOut: */
@property NSInteger feederMode; /* unknown property attribute: V_feederMode */
@property(retain,readonly) VolumeController *volumeController; /* unknown property attribute: V_volumeController */
@property(retain,readonly) CALayer *videoLayer; /* unknown property attribute: V_videoLayer */
@property(retain,readonly) id subtitlesRecipient; /* unknown property attribute: V_subtitlesRecipient */
@property(readonly) NSUInteger state; /* unknown property attribute: V_state */
@property double repeatGap; /* unknown property attribute: V_repeatGap */
@property double nextFadeOutDuration; /* unknown property attribute: V_nextFadeOutDuration */
@property(retain) MPQueueFeeder *feeder; /* unknown property attribute: V_feeder */
@property NSInteger EQPreset; /* unknown property attribute: V_eqPreset */
@property(readonly) NSUInteger bufferingState; /* unknown property attribute: V_bufferingState */
@property(retain,readonly) MPAudioDeviceController *audioDeviceController; /* unknown property attribute: V_audioDeviceController */

+ (id)sharedInstance;
+ (void)purgeSharedInstance;
+ (void)disableSharedIPCAppInstanceRelease;
+ (void)enableSharedIPCAppInstanceRelease;
+ (id)sharedIPCAppInstance;
+ (void)_releaseSharedIPCInstanceIfNecessary;

- (id)init;
- (void)dealloc;
- (void)beginSeek:(NSInteger)arg1;
- (void)dequeueOnDemandItemIfInactive;
- (void)setPlaybackIndex:(NSInteger)arg1;
- (void)_changePlaybackItemIndexToIndex:(NSUInteger)arg1 fromIndex:(NSUInteger)arg2 changeByDelta:(NSInteger)arg3;
- (void)changePlaybackIndexBy:(NSInteger)arg1;
- (void)changePlaybackIndexBy:(NSInteger)arg1 andIgnoreChapters:(BOOL)arg2;
- (void)changePlaybackIndexBy:(NSInteger)arg1 andIgnoreChapters:(BOOL)arg2 andIgnoreElapsedTime:(BOOL)arg3;
- (void)endSeek;
- (BOOL)fadeOutForQuit;
- (BOOL)isSeeking;
- (BOOL)isRewindHoldingAtStart;
- (double)currentTime;
- (void)endPlayback;
- (void)pauseWithFadeout:(float)arg1;
- (void)pause;
- (void)play;
- (void)playItemAtIndex:(NSUInteger)arg1;
- (void)playItemAtIndex:(NSUInteger)arg1 forceRestart:(BOOL)arg2;
- (void)playChapterTimeMarkerAtIndex:(NSUInteger)arg1;
- (void)setAutoPlayWhenLikelyToKeepUp:(BOOL)arg1;
- (void)setCurrentTime:(double)arg1;
- (void)togglePlayback;
- (BOOL)forceRestartPlaybackIfNecessary;
- (void)beginTickTimerWithInterval:(double)arg1;
- (void)endTickTimer;
- (BOOL)isTickTimerEnabled;
- (NSUInteger)activeRepeatType;
- (NSUInteger)activeShuffleType;
- (BOOL)autoPlayWhenLikelyToKeepUp;
- (BOOL)closedCaptioningEnabled;
- (id)currentItem;
- (BOOL)handlingRemoteEvent;
- (BOOL)_isPlayingForState:(NSUInteger)arg1;
- (BOOL)isPlaying;
- (BOOL)shouldDisplayAsPlaying;
- (BOOL)isShuffled;
- (BOOL)isValid;
- (BOOL)alwaysPlayWheneverPossible;
- (void)setAlwaysPlayWheneverPossible:(BOOL)arg1;
- (NSUInteger)numberOfItems;
- (float)rate;
- (NSUInteger)repeatType;
- (void)setClosedCaptioningEnabled:(BOOL)arg1;
- (void)setEQPreset:(NSInteger)arg1;
- (void)setNextFadeOutDuration:(double)arg1;
- (void)setRate:(float)arg1;
- (void)setRepeatGap:(double)arg1;
- (void)setRepeatType:(NSUInteger)arg1;
- (void)setShuffleType:(NSUInteger)arg1;
- (NSUInteger)shuffleType;
- (BOOL)subtitlesEnabled;
- (void)setSubtitlesEnabled:(BOOL)arg1;
- (float)volume;
- (void)setVolume:(float)arg1;
- (void)setPlaybackMode:(NSInteger)arg1;
- (NSInteger)playbackMode;
- (BOOL)stopAtEnd;
- (void)setStopAtEnd:(BOOL)arg1;
- (id)audioDeviceController;
- (void)applicationDidReceiveMemoryWarningAsUrgent:(BOOL)arg1;
- (void)applicationWillTerminate;
- (void)applyRepeatSettings;
- (void)applyShuffleSettings;
- (id)avController;
- (void)beginUsingVideoLayer;
- (void)endUsingVideoLayer;
- (void)feederChangedContents:(id)arg1;
- (void)reloadFeederWithStartIndex:(NSUInteger)arg1;
- (void)setCurrentTime:(double)arg1 options:(NSInteger)arg2;
- (void)setFeeder:(id)arg1;
- (id)subtitlesRecipient;
- (void)switchToAudioPlayback:(BOOL)arg1;
- (void)switchToVideoPlayback:(BOOL)arg1;
- (BOOL)destinationIsTVOut;
- (void)setDestinationIsTVOut:(BOOL)arg1;
- (id)videoLayer;
- (void)saveCurrentFeederState;
- (void)restorePreviousFeederState;
- (void)updateBookkeepingNow;
- (double)timeOfPlayableStart;
- (double)timeOfPlayableEnd;
- (void)skipToPlayableStart;
- (void)skipToPlayableEnd;
- (void)controller:(id)arg1 crossedTimeMarker:(NSInteger)arg2 forItem:(id)arg3 context:(id)arg4;
- (BOOL)controller:(id)arg1 shouldBeginPlayingItem:(id)arg2 error:(id*)arg3;
- (void)audioDeviceControllerAudioRoutesChanged:(id)arg1;
- (void)ensureHasAVController;
- (void)volumeControllerDidFade:(id)arg1 fadeDirection:(NSInteger)arg2;
- (void)volumeControllerWillFade:(id)arg1 fadeDirection:(NSInteger)arg2;
- (void)_itemAttributeAvailableNotification:(id)arg1;
- (void)_itemCompletedDecodeNotification:(id)arg1;
- (void)_itemDidChangeNotification:(id)arg1;
- (void)_itemFailedToPlayNotification:(id)arg1;
- (void)_itemPlaybackDidEndNotification:(id)arg1;
- (void)_itemReadyToPlayNotification:(id)arg1;
- (void)_itemWillChangeNotification:(id)arg1;
- (void)_playbackInterruptedNotification:(id)arg1;
- (void)_playbackInterruptionDidEndNotification:(id)arg1;
- (void)_rateDidChangeNotification:(id)arg1;
- (void)_disconnectAVControllerWithReason:(NSInteger)arg1;
- (void)_serverConnectionDiedNotification:(id)arg1;
- (void)_sizeDidChangeNotification:(id)arg1;
- (void)_streamBufferFullNotification:(id)arg1;
- (void)_streamLikelyToKeepUpNotification:(id)arg1;
- (void)_streamRanDryNotification:(id)arg1;
- (void)_streamUnlikelyToKeepUpNotification:(id)arg1;
- (void)_timeHasJumpedNotification:(id)arg1;
- (void)_resumedEventsOnly:(BOOL)arg1;
- (void)_resumedEventsOnlyNotification:(id)arg1;
- (void)_resumedNotification:(id)arg1;
- (void)_suspendedEventsOnlyNotification:(id)arg1;
- (void)_suspendedNotification:(id)arg1;
- (void)_delayedPlaybackIndexChange;
- (void)_delayedUpdateScanningRate;
- (void)_delayedUpdateTimeMarker;
- (id)_avController;
- (BOOL)_changeChapterTimeMarkerIndexBy:(NSInteger)arg1;
- (void)_clearVideoLayer;
- (void)_configureAVController:(id)arg1;
- (BOOL)_connectAVController;
- (void)_endSeekAndChangeRate:(BOOL)arg1;
- (NSUInteger)_playbackIndexForDelta:(NSInteger)arg1 fromIndex:(NSUInteger)arg2 currentItemIsOnDemand:(BOOL)arg3 ignoreElapsedTime:(BOOL)arg4;
- (void)_prepareToPlayItem:(id)arg1;
- (id)chapterAndArtworkTimesForItem:(id)arg1;
- (void)_registerForAVItemNotifications:(id)arg1;
- (void)_registerForAVNotifications:(id)arg1;
- (void)_resetInternalState;
- (void)_resetQueue:(BOOL)arg1 videoLayer:(id)arg2;
- (void)_attemptAutoPlay;
- (void)_setBufferingState:(NSUInteger)arg1;
- (void)_setActionAtEndAttributeForState:(NSUInteger)arg1;
- (void)setDisplayOverridePlaybackState:(NSUInteger)arg1;
- (NSUInteger)_displayPlaybackState;
- (void)_setState:(NSUInteger)arg1;
- (void)_setVideoLayerOnAVController:(id)arg1 force:(BOOL)arg2;
- (void)_setValid:(BOOL)arg1;
- (void)_unregisterForAVItemNotifications:(id)arg1;
- (void)_unregisterForAVNotifications:(id)arg1;
- (void)_updateProgress:(struct __CFRunLoopTimer { }*)arg1;
- (void)_updateScanningRate;
- (void)_delayedSetCurrentTime;
- (NSInteger)feederMode;
- (void)setFeederMode:(NSInteger)arg1;
- (id)volumeController;
- (NSUInteger)state;
- (double)repeatGap;
- (double)nextFadeOutDuration;
- (id)feeder;
- (NSInteger)EQPreset;
- (NSUInteger)bufferingState;

@end
