/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

@class NSArray, MPMediaQueryCriteria, MPMediaQuerySectionInfo, NSSet, MPMediaLibrary;

@interface MPMediaQuery : NSObject <NSCoding, NSCopying> {
    struct MPMediaQueryInternal { 
        MPMediaLibrary *_mediaLibrary; 
        MPMediaQueryCriteria *_criteria; 
        int _isFilteringDisabled; 
        NSArray *_staticEntities; 
        int _staticEntityType; 
    } _internal;
}

@property(retain) NSSet * filterPredicates;
@property(readonly) NSArray * items;
@property(readonly) NSArray * collections;
@property int groupingType;
@property(readonly) NSArray * itemSections;
@property(readonly) NSArray * collectionSections;
@property(retain) MPMediaLibrary * mediaLibrary;
@property(copy) NSSet * itemPropertiesToFetch;
@property(copy) NSSet * collectionPropertiesToFetch;
@property BOOL sortItems;
@property(readonly) MPMediaQuerySectionInfo * itemSectionInfo;
@property(readonly) MPMediaQuerySectionInfo * collectionSectionInfo;
@property(readonly) BOOL excludesEntitiesWithBlankNames;
@property(readonly) BOOL specifiesPlaylistItems;
@property(readonly) BOOL willGroupEntities;
@property struct MPMediaQueryInternal { MPMediaLibrary *_mediaLibrary; MPMediaQueryCriteria *_criteria; int _isFilteringDisabled; NSArray *_staticEntities; int _staticEntityType; } _internal;

+ (void)initialize;
+ (id)audibleAudiobooksQuery;
+ (id)movieRentalsQuery;
+ (id)ITunesUAudioQuery;
+ (void)setFilteringDisabled:(BOOL)arg1;
+ (id)videosQuery;
+ (id)geniusMixesQuery;
+ (id)albumsQuery;
+ (id)artistsQuery;
+ (id)songsQuery;
+ (id)playlistsQuery;
+ (id)podcastsQuery;
+ (id)audiobooksQuery;
+ (id)compilationsQuery;
+ (id)composersQuery;
+ (id)genresQuery;
+ (id)moviesQuery;
+ (id)musicVideosQuery;
+ (id)tvShowsQuery;
+ (id)videoPodcastsQuery;

- (unsigned int)hash;
- (id)items;
- (BOOL)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)init;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (id)description;
- (BOOL)excludesEntitiesWithBlankNames;
- (void)removePredicatesForProperty:(id)arg1;
- (BOOL)_isFilteringDisabled;
- (id)predicateForProperty:(id)arg1;
- (BOOL)willGroupEntities;
- (id)itemSections;
- (id)initWithCriteria:(id)arg1 library:(id)arg2;
- (id)initWithFilterPredicatesInternal:(id)arg1;
- (id)initWithFilterPredicates:(id)arg1;
- (id)initWithEntities:(id)arg1 entityType:(int)arg2;
- (id)itemPropertiesToFetch;
- (id)collectionPropertiesToFetch;
- (void)setCollectionPropertiesToFetch:(id)arg1;
- (id)itemSectionInfo;
- (id)collectionSectionInfo;
- (BOOL)sortItems;
- (BOOL)specifiesPlaylistItems;
- (unsigned int)groupingThreshold;
- (id)collectionSections;
- (id)_sanitizedQuery;
- (id)_valueForAggregateFunction:(id)arg1 onProperty:(id)arg2 entityType:(int)arg3;
- (id)valueForAggregateFunction:(id)arg1 onItemsForProperty:(id)arg2;
- (id)valueForAggregateFunction:(id)arg1 onCollectionsForProperty:(id)arg2;
- (void)_enumerateCollectionsUsingBlock:(id)arg1;
- (void)setStaticEntities:(id)arg1 entityType:(int)arg2;
- (unsigned int)countOfItems;
- (unsigned int)countOfCollections;
- (BOOL)prefetchProperties;
- (void)setPrefetchProperties:(BOOL)arg1;
- (id)criteria;
- (void)setCriteria:(id)arg1;
- (struct MPMediaQueryInternal { id x1; id x2; int x3; id x4; int x5; })_internal;
- (void)set_internal:(struct MPMediaQueryInternal { id x1; id x2; int x3; id x4; int x5; })arg1;
- (void)addFilterPredicate:(id)arg1;
- (id)filterPredicates;
- (int)groupingType;
- (id)collections;
- (void)setFilterPredicates:(id)arg1;
- (void)setGroupingType:(int)arg1;
- (void)removeFilterPredicate:(id)arg1;
- (void)setSortItems:(BOOL)arg1;
- (void)setItemPropertiesToFetch:(id)arg1;
- (void)_enumerateItemsUsingBlock:(id)arg1;
- (void)setMediaLibrary:(id)arg1;
- (id)mediaLibrary;

@end
