/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Foundation.framework/Foundation
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class NSData, NSString;

@interface NSString : NSObject <NSCopying, NSMutableCopying, NSCoding, ASParsingLeafNode> {
}

@property(readonly) int _FTBestGuessFTIDType;
@property(readonly) NSData * _FTDataFromBase64String;
@property(readonly) NSData * _FTDataFromHexString;
@property(readonly) int _FTIDType;
@property(readonly) BOOL hasMobileMeSuffix;
@property(readonly) NSString * mobileMeDomain;
@property(readonly) NSString * stripMobileMSuffixIfPresent;

+ (id)CDVPreconditionHeaderValueWithCTag:(id)arg1 pathTag:(id)arg2;
+ (id)CDVPreconditionHeaderValueWithCTag:(id)arg1;
+ (id)CDVStringWithNameSpace:(id)arg1 andName:(id)arg2;
+ (id)CDVStringWithNumberOfSpaces:(unsigned int)arg1;
+ (id)MCMakeUUID;
+ (id)MSMakeUUID;
+ (id)MSTempFilePath;
+ (id)_attendeeNameExtensions;
+ (id)_attendeePartialSurnames;
+ (id)_gkUUIDString;
+ (id)_mapkit_arrivalWithDate:(id)arg1 allowCountdown:(BOOL)arg2;
+ (id)_mapkit_arrivalWithDate:(id)arg1;
+ (id)_mapkit_departureWithDate:(id)arg1 allowCountdown:(BOOL)arg2;
+ (id)_mapkit_departureWithDate:(id)arg1;
+ (id)_mapkit_formattedStringForFloat:(float)arg1;
+ (id)_mapkit_formattedStringForInt:(int)arg1;
+ (id)_mapkit_localizedDistanceStringWithMeters:(int)arg1 inMetric:(BOOL)arg2 includeTrip:(BOOL)arg3;
+ (void)_popAscentRoundingEnabled;
+ (void)_popWordRoundingAllowed;
+ (void)_pushAscentRoundingEnabled:(BOOL)arg1;
+ (void)_pushWordRoundingAllowed:(BOOL)arg1;
+ (id)_referenceDateWithTimeZone:(id)arg1;
+ (id)_stringWithUnichar:(unsigned long)arg1;
+ (BOOL)_web_ascentRoundingEnabled;
+ (void)_web_setAscentRoundingEnabled:(BOOL)arg1;
+ (void)_web_setWordRoundingAllowed:(BOOL)arg1;
+ (void)_web_setWordRoundingEnabled:(BOOL)arg1;
+ (id)_web_stringRepresentationForBytes:(long long)arg1;
+ (id)_web_stringWithData:(id)arg1 textEncodingName:(id)arg2;
+ (BOOL)_web_wordRoundingAllowed;
+ (BOOL)_web_wordRoundingEnabled;
+ (id)_webkit_localCacheDirectoryWithBundleIdentifier:(id)arg1;
+ (BOOL)acceptsTopLevelLeaves;
+ (id)allocWithZone:(struct _NSZone { }*)arg1;
+ (const unsigned int*)availableStringEncodings;
+ (id)customNumberFormatDecimalFormatStringWithDigits:(unsigned int)arg1 digitString:(id)arg2 includeDecimalSeparator:(BOOL)arg3;
+ (id)customNumberFormatDecimalTokenDisplayStringWithDigits:(unsigned int)arg1 digitString:(id)arg2;
+ (id)customNumberFormatDecimalTokenRepresentedStringWithDigits:(unsigned int)arg1 digitString:(id)arg2;
+ (id)customNumberFormatIntegerFormatStringWithDigits:(unsigned int)arg1 digitString:(id)arg2;
+ (id)customNumberFormatIntegerTokenDisplayStringWithDigits:(unsigned int)arg1 separator:(BOOL)arg2 digitString:(id)arg3;
+ (id)customNumberFormatIntegerTokenRepresentedStringWithDigits:(unsigned int)arg1 separator:(BOOL)arg2 digitString:(id)arg3;
+ (id)customNumberFormatTokenStringOfType:(int)arg1 content:(id)arg2;
+ (unsigned int)defaultCStringEncoding;
+ (id)ellipsisString;
+ (BOOL)expectsContent;
+ (BOOL)frontingBasicTypes;
+ (id)generatedRoomNameForGroupChat;
+ (void)initialize;
+ (id)localizedNameOfStringEncoding:(unsigned int)arg1;
+ (id)localizedStringWithFormat:(id)arg1;
+ (id)mapString:(id)arg1;
+ (id)mf_UUID;
+ (id)mf_formattedAddressWithName:(id)arg1 email:(id)arg2 useQuotes:(BOOL)arg3;
+ (id)mf_messageIDStringWithDomainHint:(id)arg1;
+ (id)mf_nameExtensions;
+ (id)mf_partialSurnames;
+ (id)mf_stringFromMimeEnrichedString:(id)arg1 asHTML:(BOOL)arg2;
+ (id)mf_stringFromMimeRichTextString:(id)arg1 asHTML:(BOOL)arg2;
+ (id)mf_stringRepresentationForBytes:(long long)arg1;
+ (id)mf_stringWithAttachmentCharacter;
+ (id)mf_stringWithData:(id)arg1 encoding:(unsigned int)arg2;
+ (id)newUUID;
+ (BOOL)notifyOfUnknownTokens;
+ (id)numberSymbols;
+ (id)numberSymbols;
+ (id)numberSymbols;
+ (BOOL)parsingLeafNode;
+ (BOOL)parsingWithSubItems;
+ (id)pathWithComponents:(id)arg1;
+ (id)profileCacheKeyForPlayerID:(id)arg1 detailed:(BOOL)arg2;
+ (id)randomString;
+ (bool)skipString:(id)arg1;
+ (id)string;
+ (id)stringForPercentileRankingWithRank:(float)arg1 totalScores:(float)arg2;
+ (id)stringForPercentileWithRank:(float)arg1 totalScores:(float)arg2 asPercentile:(BOOL)arg3 isTop:(BOOL*)arg4;
+ (id)stringForRankAndPercentileWithRank:(float)arg1 totalScores:(float)arg2;
+ (id)stringForScoreAndPercentileWithRank:(float)arg1 totalScores:(float)arg2 formattedScore:(id)arg3;
+ (id)stringGUID;
+ (id)stringGUIDForObject:(id)arg1;
+ (id)stringWithBytes:(const void*)arg1 length:(unsigned int)arg2 codePointMapper:(int (*)())arg3;
+ (id)stringWithBytes:(const void*)arg1 length:(unsigned int)arg2 encoding:(unsigned int)arg3;
+ (id)stringWithBytes:(const void*)arg1 length:(unsigned int)arg2 fontFamilyName:(id)arg3;
+ (id)stringWithCString:(const char *)arg1 encoding:(unsigned int)arg2;
+ (id)stringWithCString:(const char *)arg1 length:(unsigned int)arg2;
+ (id)stringWithCString:(const char *)arg1;
+ (id)stringWithCharacters:(const unsigned short*)arg1 length:(unsigned int)arg2;
+ (id)stringWithContentsOfFile:(id)arg1 encoding:(unsigned int)arg2 error:(id*)arg3;
+ (id)stringWithContentsOfFile:(id)arg1 usedEncoding:(unsigned int*)arg2 error:(id*)arg3;
+ (id)stringWithContentsOfFile:(id)arg1 usingEncoding:(unsigned int)arg2;
+ (id)stringWithContentsOfFile:(id)arg1;
+ (id)stringWithContentsOfURL:(id)arg1 encoding:(unsigned int)arg2 error:(id*)arg3;
+ (id)stringWithContentsOfURL:(id)arg1 usedEncoding:(unsigned int*)arg2 error:(id*)arg3;
+ (id)stringWithContentsOfURL:(id)arg1;
+ (id)stringWithCsString:(const struct CsString { int (**x1)(); unsigned short *x2; unsigned int x3; unsigned int x4; }*)arg1;
+ (id)stringWithFileSystemRepresentation:(const char *)arg1 length:(unsigned int)arg2;
+ (id)stringWithFileSystemRepresentation:(const char *)arg1;
+ (id)stringWithFileSystemRepresentation:(const char *)arg1;
+ (id)stringWithFormat:(id)arg1 locale:(id)arg2;
+ (id)stringWithFormat:(id)arg1;
+ (id)stringWithOcText:(const struct OcText { int (**x1)(); int x2; unsigned int x3; unsigned int x4; unsigned int x5; char *x6; char *x7; boolx8; }*)arg1;
+ (id)stringWithString:(id)arg1;
+ (id)stringWithUTF8String:(const char *)arg1;
+ (id)stringWithUnichar:(unsigned long)arg1;
+ (id)stringWithWideCString:(int*)arg1;
+ (id)stringWithXmlChars:(const char *)arg1;
+ (id)stringWithXmlString:(const char *)arg1;
+ (float)widthFittingMaximumInteger:(int)arg1 withFont:(id)arg2;

- (BOOL)CDVIsEqualToXmlCharString:(const char *)arg1;
- (BOOL)CDVIsHTTPStatusLineWithStatusCode:(int)arg1;
- (id)CDVStringByAddingPercentEscapesForHREF;
- (id)CDVStringByAddingPercentEscapesForUserOrPassword;
- (id)CDVStringByAppendingSlashIfNeeded;
- (id)CDVStringByRemovingPercentEscapesForHREF;
- (id)CDVStringByRemovingTerminatingSlashIfNeeded;
- (id)CDVStringByXMLQuoting;
- (id)CDVStringByXMLUnquoting;
- (int)IPv4StringCompare:(id)arg1;
- (int)IPv6StringCompare:(id)arg1;
- (id)MBAppendGreenteaSuffix;
- (id)MCAppendDeviceName;
- (id)MCAppendGreenteaSuffix;
- (id)MCSHA256DigestWithSalt;
- (id)MCSafeFilenameHash;
- (id)MCSafeFilenameHashWithExtension:(id)arg1;
- (id)MLSortString;
- (id)MPMediaLibraryDataProviderSystemML3CoercedString;
- (id)MSHexData;
- (unsigned long long)MSUniqueID;
- (id)SHA1Hash;
- (int)TWTwitterCharacterCountWithShortenedURLLength:(int)arg1;
- (unsigned int)UTF8ByteCount;
- (const char *)UTF8String;
- (int)_FTBestGuessFTIDType;
- (id)_FTDataFromBase64String;
- (id)_FTDataFromHexString;
- (id)_FTIDFromEmail;
- (id)_FTIDFromFTIDType:(int)arg1;
- (id)_FTIDFromPhoneNumber;
- (int)_FTIDType;
- (id)_FTNormalizedPhoneNumber;
- (id)_FTStripFTIDPrefix;
- (id)_ICSStringForParameterQuotedValue;
- (id)_ICSStringForParameterValue;
- (id)_ICSStringForProperyValue;
- (void)_ICSStringWithOptions:(unsigned int)arg1 appendingToString:(id)arg2;
- (id)_URIFromEmail;
- (id)_URIFromFTIDType:(int)arg1;
- (id)_URIFromPhoneNumber;
- (id)__escapeString5991;
- (struct CGSize { float x1; float x2; })__web_drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withFont:(struct __GSFont { }*)arg3 ellipsis:(int)arg4 letterSpacing:(float)arg5 includeEmoji:(BOOL)arg6 measureOnly:(BOOL)arg7 renderedStringOut:(id*)arg8 drawUnderline:(BOOL)arg9;
- (struct CGSize { float x1; float x2; })__web_drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withFont:(struct __GSFont { }*)arg3 ellipsis:(int)arg4 letterSpacing:(float)arg5 includeEmoji:(BOOL)arg6 measureOnly:(BOOL)arg7 renderedStringOut:(id*)arg8;
- (struct CGSize { float x1; float x2; })__web_drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withFont:(struct __GSFont { }*)arg3 ellipsis:(int)arg4 letterSpacing:(float)arg5 includeEmoji:(BOOL)arg6 measureOnly:(BOOL)arg7;
- (struct CGSize { float x1; float x2; })__web_drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(struct __GSFont { }*)arg2 ellipsis:(int)arg3 alignment:(int)arg4 letterSpacing:(float)arg5 lineSpacing:(float)arg6 includeEmoji:(BOOL)arg7 truncationRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg8 measureOnly:(BOOL)arg9 renderedStringOut:(id*)arg10 drawUnderline:(BOOL)arg11;
- (struct CGSize { float x1; float x2; })__web_drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(struct __GSFont { }*)arg2 ellipsis:(int)arg3 alignment:(int)arg4 letterSpacing:(float)arg5 lineSpacing:(float)arg6 includeEmoji:(BOOL)arg7 truncationRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg8 measureOnly:(BOOL)arg9 renderedStringOut:(id*)arg10;
- (struct CGSize { float x1; float x2; })__web_drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(struct __GSFont { }*)arg2 ellipsis:(int)arg3 alignment:(int)arg4 letterSpacing:(float)arg5 lineSpacing:(float)arg6 includeEmoji:(BOOL)arg7 truncationRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg8 measureOnly:(BOOL)arg9;
- (BOOL)_appearsToBeEmail;
- (BOOL)_appearsToBePhoneNumber;
- (BOOL)_attendeeAppearsToBeAnInitial;
- (id)_attendeeTrimCommasSpacesQuotes;
- (int)_brailleTableCompare:(id)arg1;
- (int)_brailleTableCompare:(id)arg1;
- (int)_caseInsensitiveNumericCompare:(id)arg1;
- (unsigned long)_cfTypeID;
- (BOOL)_containsSubstring:(id)arg1;
- (id)_copyFormatStringWithConfiguration:(id)arg1;
- (id)_copyWithoutInsignificantPrefix:(BOOL)arg1 andCharacters:(BOOL)arg2;
- (id)_createCsvRows:(unsigned int*)arg1 usingDelimiter:(id)arg2 columnCountIsConstant:(BOOL*)arg3;
- (id)_createSubstringWithRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (struct CGSize { float x1; float x2; })_drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(int)arg3 alignment:(int)arg4 lineSpacing:(int)arg5 includeEmoji:(BOOL)arg6 truncationRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg7;
- (unsigned int)_editDistanceFrom:(id)arg1;
- (unsigned char)_encodingCantBeStoredInEightBitCFString;
- (BOOL)_endsSentence;
- (BOOL)_endsWord;
- (const char *)_fastCStringContents:(BOOL)arg1;
- (const unsigned short*)_fastCharacterContents;
- (unsigned long)_fastestEncodingInCFStringEncoding;
- (id)_firstWord;
- (void)_flushRegularExpressionCaches;
- (void)_getBlockStart:(unsigned int*)arg1 end:(unsigned int*)arg2 contentsEnd:(unsigned int*)arg3 forRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg4 stopAtLineSeparators:(BOOL)arg5;
- (BOOL)_getCString:(char *)arg1 maxLength:(unsigned int)arg2 encoding:(unsigned long)arg3;
- (id)_gkLocaleSensitiveUppercaseString;
- (id)_gkMD5HashData;
- (id)_gkMD5HashString;
- (id)_gkQuotedString;
- (id)_gkSHA1HashData;
- (id)_gkSHA1HashString;
- (id)_initWithBytesOfUnknownEncoding:(char *)arg1 length:(unsigned int)arg2 copy:(BOOL)arg3 usedEncoding:(unsigned int*)arg4;
- (id)_initWithDataOfUnknownEncoding:(id)arg1;
- (id)_initWithUTF8String:(const char *)arg1 maxLength:(unsigned int)arg2;
- (BOOL)_isCString;
- (BOOL)_isDelete;
- (BOOL)_isLeftAssociative;
- (BOOL)_isNaturallyRTL;
- (BOOL)_isNewlineOrReturn;
- (BOOL)_isPlainSpace;
- (BOOL)_isSpace;
- (BOOL)_isSpaceOrReturn;
- (BOOL)_isTripledPunctuation;
- (BOOL)_isWhitespace;
- (id)_issueDirectory;
- (BOOL)_looksLikeEmailAddress;
- (BOOL)_looksLikeNumberInput;
- (BOOL)_looksLikeURL;
- (void)_makeNeededAdjustmentsToAttributes:(id)arg1 andPoint:(struct CGPoint { float x1; float x2; }*)arg2 forWidth:(float)arg3;
- (float)_mapkit_cgFloatValue;
- (id)_mf_bestMimeCharset:(id)arg1;
- (id)_newSubstringWithRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1 zone:(struct _NSZone { }*)arg2;
- (struct _NSRange { unsigned int x1; unsigned int x2; })_rangeOfRegularExpressionPattern:(id)arg1 options:(unsigned int)arg2 range:(struct _NSRange { unsigned int x1; unsigned int x2; })arg3 locale:(id)arg4;
- (struct _NSRange { unsigned int x1; unsigned int x2; })_rangeWithoutInsignificantPrefix:(BOOL)arg1 andCharacters:(BOOL)arg2;
- (BOOL)_shouldUseDefaultFirstResponder;
- (BOOL)_shouldUseKeyWindowStack;
- (BOOL)_shouldUseNextFirstResponder;
- (unsigned long)_smallestEncodingInCFStringEncoding;
- (id)_stocksTrimmedString;
- (id)_stocksTrimmedString;
- (id)_stringByReplacingCharacter:(unsigned long)arg1 withCharacter:(unsigned long)arg2;
- (id)_stringByReplacingCharactersInSet:(struct __CFCharacterSet { }*)arg1 withCharacter:(unsigned long)arg2;
- (id)_stringByReplacingOccurrencesOfRegularExpressionPattern:(id)arg1 withTemplate:(id)arg2 options:(unsigned int)arg3 range:(struct _NSRange { unsigned int x1; unsigned int x2; })arg4;
- (id)_stringByResolvingSymlinksInPathUsingCache:(BOOL)arg1;
- (id)_stringByStandardizingPathUsingCache:(BOOL)arg1;
- (id)_stringByTrimmingCharactersInCFCharacterSet:(struct __CFCharacterSet { }*)arg1;
- (id)_stringByTrimmingLastCharacter;
- (id)_stringRepresentation;
- (id)_uikit_stringByTrimmingWhitespaceAndNewlines;
- (id)_uikit_stringWithWritingDirection:(int)arg1 asOverride:(BOOL)arg2;
- (id)_web_HTTPStyleLanguageCode;
- (id)_web_HTTPStyleLanguageCodeWithoutRegion;
- (id)_web_URLFragment;
- (id)_web_bestURLForUserTypedString;
- (id)_web_capitalizeRFC822HeaderFieldName;
- (id)_web_characterSetFromContentTypeHeader_nowarn;
- (int)_web_countOfString:(id)arg1;
- (id)_web_decodeHostName;
- (id)_web_decodeHostNameWithRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (id)_web_domainFromHost;
- (BOOL)_web_domainMatches:(id)arg1;
- (struct CGSize { float x1; float x2; })_web_drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withAttributes:(id)arg3;
- (struct CGSize { float x1; float x2; })_web_drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withFont:(struct __GSFont { }*)arg3 ellipsis:(int)arg4 letterSpacing:(float)arg5 includeEmoji:(BOOL)arg6;
- (struct CGSize { float x1; float x2; })_web_drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withFont:(struct __GSFont { }*)arg3 ellipsis:(int)arg4 letterSpacing:(float)arg5;
- (struct CGSize { float x1; float x2; })_web_drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withFont:(struct __GSFont { }*)arg3 ellipsis:(int)arg4;
- (struct CGSize { float x1; float x2; })_web_drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 withFont:(struct __GSFont { }*)arg2;
- (struct CGSize { float x1; float x2; })_web_drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withAttributes:(id)arg2;
- (struct CGSize { float x1; float x2; })_web_drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(struct __GSFont { }*)arg2 ellipsis:(int)arg3 alignment:(int)arg4 lineSpacing:(int)arg5 includeEmoji:(BOOL)arg6 truncationRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg7 measureOnly:(BOOL)arg8;
- (struct CGSize { float x1; float x2; })_web_drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(struct __GSFont { }*)arg2 ellipsis:(int)arg3 alignment:(int)arg4 lineSpacing:(int)arg5 includeEmoji:(BOOL)arg6 truncationRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg7;
- (struct CGSize { float x1; float x2; })_web_drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(struct __GSFont { }*)arg2 ellipsis:(int)arg3 alignment:(int)arg4 lineSpacing:(int)arg5;
- (struct CGSize { float x1; float x2; })_web_drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(struct __GSFont { }*)arg2 ellipsis:(int)arg3 alignment:(int)arg4;
- (id)_web_encodeHostName;
- (id)_web_encodeHostNameWithRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (unsigned long)_web_extractFourCharCode;
- (id)_web_fileNameFromContentDispositionHeader_nowarn;
- (id)_web_filenameByFixingIllegalCharacters;
- (id)_web_fixedCarbonPOSIXPath;
- (BOOL)_web_hasCaseInsensitivePrefix:(id)arg1;
- (BOOL)_web_hasCountryCodeTLD;
- (BOOL)_web_hostNameNeedsDecodingWithRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (BOOL)_web_hostNameNeedsEncodingWithRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (BOOL)_web_isCaseInsensitiveEqualToString:(id)arg1;
- (BOOL)_web_isFileURL;
- (BOOL)_web_isJavaScriptURL;
- (BOOL)_web_isUserVisibleURL;
- (BOOL)_web_looksLikeAbsoluteURL;
- (BOOL)_web_looksLikeIPAddress;
- (id)_web_mapHostNameWithRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1 encode:(BOOL)arg2 makeString:(BOOL)arg3;
- (id)_web_mimeTypeFromContentTypeHeader_nowarn;
- (id)_web_parseAsKeyValuePairHandleQuotes_nowarn:(BOOL)arg1;
- (id)_web_parseAsKeyValuePair_nowarn;
- (id)_web_possibleURLPrefixesForUserTypedString;
- (id)_web_possibleURLsForForUserTypedString:(BOOL)arg1;
- (id)_web_possibleURLsForUserTypedString;
- (struct _NSRange { unsigned int x1; unsigned int x2; })_web_rangeOfURLHost;
- (struct _NSRange { unsigned int x1; unsigned int x2; })_web_rangeOfURLResourceSpecifier_nowarn;
- (struct _NSRange { unsigned int x1; unsigned int x2; })_web_rangeOfURLScheme_nowarn;
- (struct _NSRange { unsigned int x1; unsigned int x2; })_web_rangeOfURLUserPasswordHostPort;
- (id)_web_securedStringIncludingLastCharacter:(BOOL)arg1;
- (struct CGSize { float x1; float x2; })_web_sizeForWidth:(float)arg1 withAttributes:(id)arg2;
- (struct CGSize { float x1; float x2; })_web_sizeInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withAttributes:(id)arg2;
- (struct CGSize { float x1; float x2; })_web_sizeInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(struct __GSFont { }*)arg2 ellipsis:(int)arg3 lineSpacing:(int)arg4;
- (struct CGSize { float x1; float x2; })_web_sizeInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(struct __GSFont { }*)arg2 ellipsis:(int)arg3;
- (struct CGSize { float x1; float x2; })_web_sizeWithFont:(struct __GSFont { }*)arg1 forWidth:(float)arg2 ellipsis:(int)arg3 letterSpacing:(float)arg4 resultRange:(struct _NSRange { unsigned int x1; unsigned int x2; }*)arg5;
- (struct CGSize { float x1; float x2; })_web_sizeWithFont:(struct __GSFont { }*)arg1 forWidth:(float)arg2 ellipsis:(int)arg3 letterSpacing:(float)arg4;
- (struct CGSize { float x1; float x2; })_web_sizeWithFont:(struct __GSFont { }*)arg1 forWidth:(float)arg2 ellipsis:(int)arg3;
- (struct CGSize { float x1; float x2; })_web_sizeWithFont:(struct __GSFont { }*)arg1;
- (id)_web_splitAtNonDateCommas_nowarn;
- (id)_web_stringByAbbreviatingWithTildeInPath;
- (id)_web_stringByCollapsingNonPrintingCharacters;
- (id)_web_stringByExpandingTildeInPath;
- (id)_web_stringByReplacingValidPercentEscapes_nowarn;
- (id)_web_stringByStrippingReturnCharacters;
- (id)_web_stringByTrimmingWhitespace;
- (id)_web_stringForWidth:(float)arg1 withFont:(struct __GSFont { }*)arg2 ellipsis:(int)arg3 letterSpacing:(float)arg4 includeEmoji:(BOOL)arg5;
- (id)_webkit_URLFragment;
- (id)_webkit_filenameByFixingIllegalCharacters;
- (BOOL)_webkit_hasCaseInsensitivePrefix:(id)arg1;
- (BOOL)_webkit_hasCaseInsensitiveSubstring:(id)arg1;
- (BOOL)_webkit_hasCaseInsensitiveSuffix:(id)arg1;
- (BOOL)_webkit_isCaseInsensitiveEqualToString:(id)arg1;
- (BOOL)_webkit_isFTPDirectoryURL;
- (BOOL)_webkit_isFileURL;
- (BOOL)_webkit_isJavaScriptURL;
- (BOOL)_webkit_looksLikeAbsoluteURL;
- (id)_webkit_queryKeysAndValues;
- (struct _NSRange { unsigned int x1; unsigned int x2; })_webkit_rangeOfURLScheme;
- (id)_webkit_scriptIfJavaScriptURL;
- (id)_webkit_stringByCollapsingNonPrintingCharacters;
- (id)_webkit_stringByCollapsingWhitespaceCharacters;
- (id)_webkit_stringByReplacingValidPercentEscapes;
- (id)_webkit_stringByTrimmingWhitespace;
- (id)_webkit_unescapedQueryValue;
- (id)_withoutBracketedWords;
- (id)_withoutExtraWhitespace;
- (int)abCompare:(id)arg1;
- (id)abEscapeStringForUnichar:(unsigned short)arg1 and:(unsigned short)arg2 advance:(int*)arg3;
- (id)abVCardKoshify;
- (void)appendJsonStringToString:(id)arg1;
- (id)appendSlashIfNeeded;
- (id)appendSlashIfNeeded;
- (void)attendeeFirstName:(id*)arg1 middleName:(id*)arg2 lastName:(id*)arg3 extension:(id*)arg4;
- (BOOL)boolValue;
- (const char *)cString;
- (unsigned int)cStringLength;
- (const char *)cStringUsingEncoding:(unsigned int)arg1;
- (int*)cWideString;
- (id)cacheKeyRepresenation;
- (BOOL)canBeConvertedToEncoding:(unsigned int)arg1;
- (id)canonicalQueryValue;
- (id)capitalizedString;
- (int)caseInsensitiveCompare:(id)arg1;
- (unsigned short)characterAtIndex:(unsigned int)arg1;
- (Class)classForCoder;
- (id)commaSeparatedComponents;
- (id)commonNonWordBreakingPrefixWithString:(id)arg1 options:(unsigned int)arg2;
- (id)commonPrefixWithString:(id)arg1 options:(unsigned int)arg2;
- (int)compare:(id)arg1 options:(unsigned int)arg2 range:(struct _NSRange { unsigned int x1; unsigned int x2; })arg3 locale:(id)arg4;
- (int)compare:(id)arg1 options:(unsigned int)arg2 range:(struct _NSRange { unsigned int x1; unsigned int x2; })arg3;
- (int)compare:(id)arg1 options:(unsigned int)arg2;
- (int)compare:(id)arg1;
- (int)compareDomain:(id)arg1;
- (unsigned int)completePathIntoString:(id*)arg1 caseSensitive:(BOOL)arg2 matchesIntoArray:(id*)arg3 filterTypes:(id)arg4;
- (id)componentsSeparatedByCharactersInSet:(id)arg1;
- (id)componentsSeparatedByString:(id)arg1;
- (id)componentsSeparatedByWhitespace;
- (BOOL)containsCJKVCharacters;
- (BOOL)containsEmoji;
- (BOOL)containsHiraganaKatakanaOrBopomofo;
- (BOOL)containsPercentEscapes;
- (BOOL)containsSubstring:(id)arg1;
- (id)copyABVCardDataRepresentation;
- (void)copyToCsString:(struct CsString { int (**x1)(); unsigned short *x2; unsigned int x3; unsigned int x4; }*)arg1;
- (void)copyToOcText:(struct OcText { int (**x1)(); int x2; unsigned int x3; unsigned int x4; unsigned int x5; char *x6; char *x7; boolx8; }*)arg1 encoding:(int)arg2;
- (void)copyToOcText:(struct OcText { int (**x1)(); int x2; unsigned int x3; unsigned int x4; unsigned int x5; char *x6; char *x7; boolx8; }*)arg1;
- (id)copyUTF8StringOfLength:(unsigned int)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)copyWithoutInsignificantCharacters;
- (id)copyWithoutInsignificantPrefixAndCharacters;
- (unsigned int)countOfComposedCharacterSequences;
- (id)createCsvRows:(unsigned int*)arg1;
- (id)createRangesOfEscapedCharactersInNumberFormatPattern;
- (id)createRangesOfEscapedCharactersInNumberFormatPattern;
- (id)createRangesOfEscapedCharactersInNumberFormatPattern;
- (id)createStringBySubstitutingCharactersCFNumberFormatterDoesntUnderstand;
- (id)createStringBySubstitutingCharactersCFNumberFormatterDoesntUnderstand;
- (id)createStringBySubstitutingCharactersCFNumberFormatterDoesntUnderstand;
- (id)currencyCodeFromCustomNumberFormatCurrencyToken;
- (BOOL)customFormatIntegerTokenUsesSeparator;
- (id)dataUsingEncoding:(unsigned int)arg1 allowLossyConversion:(BOOL)arg2;
- (id)dataUsingEncoding:(unsigned int)arg1;
- (id)dataUsingWordEncoding:(int)arg1;
- (struct { unsigned int x1 : 8; unsigned int x2 : 4; unsigned int x3 : 1; unsigned int x4 : 1; unsigned int x5 : 18; unsigned short x6[8]; })decimalValue;
- (id)decodedWebSafeBase64Data;
- (id)decomposedStringWithCanonicalMapping;
- (id)decomposedStringWithCompatibilityMapping;
- (id)description;
- (BOOL)destinationIdIsEmailAddress;
- (BOOL)destinationIdIsPhoneNumber;
- (id)digitPlaceholderStringInDigitToken;
- (id)displayableString;
- (id)displayableStringByStrippingOffCommonPrefixWithString:(id)arg1;
- (id)displayableStringByTrimmingPrefixString:(id)arg1;
- (double)doubleValue;
- (void)draw:(id)arg1 atPoint:(struct CGPoint { float x1; float x2; })arg2 forWidth:(float)arg3 withFont:(id)arg4 fontColor:(id)arg5;
- (void)draw:(id)arg1 inRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 withFont:(id)arg3 fontColor:(id)arg4 alignment:(int)arg5;
- (struct CGSize { float x1; float x2; })drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withAttributes:(id)arg3;
- (void)drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withFont:(id)arg3 fontColor:(id)arg4 shadowColor:(id)arg5 centeredHorizontally:(BOOL)arg6 uncenteredSuffix:(id)arg7;
- (struct CGSize { float x1; float x2; })drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withFont:(id)arg3 fontSize:(float)arg4 lineBreakMode:(int)arg5 baselineAdjustment:(int)arg6 includeEmoji:(BOOL)arg7;
- (struct CGSize { float x1; float x2; })drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withFont:(id)arg3 fontSize:(float)arg4 lineBreakMode:(int)arg5 baselineAdjustment:(int)arg6;
- (struct CGSize { float x1; float x2; })drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withFont:(id)arg3 lineBreakMode:(int)arg4 letterSpacing:(float)arg5 includeEmoji:(BOOL)arg6;
- (struct CGSize { float x1; float x2; })drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withFont:(id)arg3 lineBreakMode:(int)arg4 letterSpacing:(float)arg5;
- (struct CGSize { float x1; float x2; })drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withFont:(id)arg3 lineBreakMode:(int)arg4;
- (struct CGSize { float x1; float x2; })drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withFont:(id)arg3 minFontSize:(float)arg4 actualFontSize:(float*)arg5 lineBreakMode:(int)arg6 baselineAdjustment:(int)arg7 includeEmoji:(BOOL)arg8;
- (struct CGSize { float x1; float x2; })drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withFont:(id)arg3 minFontSize:(float)arg4 actualFontSize:(float*)arg5 lineBreakMode:(int)arg6 baselineAdjustment:(int)arg7;
- (struct CGSize { float x1; float x2; })drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 withFont:(id)arg2;
- (struct CGSize { float x1; float x2; })drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withAttributes:(id)arg2;
- (struct CGSize { float x1; float x2; })drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(int)arg3 alignment:(int)arg4 lineSpacing:(int)arg5 includeEmoji:(BOOL)arg6;
- (struct CGSize { float x1; float x2; })drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(int)arg3 alignment:(int)arg4 lineSpacing:(int)arg5;
- (struct CGSize { float x1; float x2; })drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(int)arg3 alignment:(int)arg4;
- (struct CGSize { float x1; float x2; })drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(int)arg3;
- (struct CGSize { float x1; float x2; })drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(id)arg2;
- (void)drawUsingMetrics:(id)arg1 inRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 usingFont:(struct __GSFont { }*)arg3 ellipsisStyle:(int)arg4 firstLineX:(float)arg5 strikethrough:(BOOL)arg6;
- (void)drawUsingMetrics:(id)arg1 inRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 usingFont:(struct __GSFont { }*)arg3 ellipsisStyle:(int)arg4 firstLineX:(float)arg5;
- (unsigned int)editDistanceFrom:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (BOOL)endsSentence;
- (BOOL)endsWord;
- (void)enumerateLinesUsingBlock:(id)arg1;
- (void)enumerateLinguisticTagsInRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1 scheme:(id)arg2 options:(unsigned int)arg3 orthography:(id)arg4 usingBlock:(id)arg5;
- (void)enumerateSubstringsInRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1 options:(unsigned int)arg2 usingBlock:(id)arg3;
- (id)escapedYouTubeSearchString;
- (unsigned int)fastestEncoding;
- (const char *)fileSystemRepresentation;
- (BOOL)flattenToCADLongString:(BOOL*[1024])arg1;
- (float)floatValue;
- (id)formatConfiguration;
- (id)formatStringFromCustomNumberFormatScaleToken;
- (int)fractionAccuracyFromCustomNumberFormatFractionToken;
- (BOOL)getBytes:(char *)arg1 maxLength:(unsigned int)arg2 filledLength:(unsigned int*)arg3 encoding:(unsigned int)arg4 allowLossyConversion:(BOOL)arg5 range:(struct _NSRange { unsigned int x1; unsigned int x2; })arg6 remainingRange:(struct _NSRange { unsigned int x1; unsigned int x2; }*)arg7;
- (BOOL)getBytes:(void*)arg1 maxLength:(unsigned int)arg2 usedLength:(unsigned int*)arg3 encoding:(unsigned int)arg4 options:(unsigned int)arg5 range:(struct _NSRange { unsigned int x1; unsigned int x2; })arg6 remainingRange:(struct _NSRange { unsigned int x1; unsigned int x2; }*)arg7;
- (BOOL)getCString:(char *)arg1 maxLength:(unsigned int)arg2 encoding:(unsigned int)arg3;
- (void)getCString:(char *)arg1 maxLength:(unsigned int)arg2 range:(struct _NSRange { unsigned int x1; unsigned int x2; })arg3 remainingRange:(struct _NSRange { unsigned int x1; unsigned int x2; }*)arg4;
- (void)getCString:(char *)arg1 maxLength:(unsigned int)arg2;
- (void)getCString:(char *)arg1;
- (void)getCharacters:(unsigned short*)arg1 range:(struct _NSRange { unsigned int x1; unsigned int x2; })arg2;
- (void)getCharacters:(unsigned short*)arg1;
- (BOOL)getExternalRepresentation:(id*)arg1 extendedAttributes:(id*)arg2 forWritingToURLOrPath:(id)arg3 usingEncoding:(unsigned int)arg4 error:(id*)arg5;
- (BOOL)getFileSystemRepresentation:(char *)arg1 maxLength:(unsigned int)arg2;
- (void)getLineStart:(unsigned int*)arg1 end:(unsigned int*)arg2 contentsEnd:(unsigned int*)arg3 forRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg4;
- (void)getParagraphStart:(unsigned int*)arg1 end:(unsigned int*)arg2 contentsEnd:(unsigned int*)arg3 forRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg4;
- (BOOL)hasMobileMeSuffix;
- (BOOL)hasPrefix:(id)arg1;
- (BOOL)hasSuffix:(id)arg1;
- (unsigned int)hash;
- (unsigned int)hexValue;
- (int)indexOfFirstNonPrefixCharacterInNumberFormatSubpattern;
- (int)indexOfFirstNonPrefixCharacterInNumberFormatSubpattern;
- (int)indexOfFirstNonPrefixCharacterInNumberFormatSubpattern;
- (int)indexOfLastNonSuffixCharacterInNumberFormatSubpattern;
- (int)indexOfLastNonSuffixCharacterInNumberFormatSubpattern;
- (int)indexOfLastNonSuffixCharacterInNumberFormatSubpattern;
- (int)indexOfNumberFormatSubpatternSeparator;
- (int)indexOfNumberFormatSubpatternSeparator;
- (int)indexOfNumberFormatSubpatternSeparator;
- (id)initFromXmlNode:(struct _xmlNode { void *x1; int x2; char *x3; struct _xmlNode {} *x4; struct _xmlNode {} *x5; struct _xmlNode {} *x6; struct _xmlNode {} *x7; struct _xmlNode {} *x8; struct _xmlDoc {} *x9; struct _xmlNs {} *x10; char *x11; struct _xmlAttr {} *x12; struct _xmlNs {} *x13; void *x14; unsigned short x15; unsigned short x16; }*)arg1 attribute:(const char *)arg2 ns:(const struct _xmlNs { struct _xmlNs {} *x1; int x2; char *x3; char *x4; void *x5; struct _xmlDoc {} *x6; }*)arg3;
- (id)initFromXmlNode:(struct _xmlNode { void *x1; int x2; char *x3; struct _xmlNode {} *x4; struct _xmlNode {} *x5; struct _xmlNode {} *x6; struct _xmlNode {} *x7; struct _xmlNode {} *x8; struct _xmlDoc {} *x9; struct _xmlNs {} *x10; char *x11; struct _xmlAttr {} *x12; struct _xmlNs {} *x13; void *x14; unsigned short x15; unsigned short x16; }*)arg1 ns:(const char *)arg2 attributeName:(const char *)arg3;
- (id)initWithASParseContext:(id)arg1 root:(id)arg2 parent:(id)arg3 callbackDict:(id)arg4 streamCallbackDict:(id)arg5 lengthUntilEndOfTerminator:(int)arg6;
- (id)initWithBytesNoCopy:(void*)arg1 length:(unsigned int)arg2 encoding:(unsigned int)arg3 freeWhenDone:(BOOL)arg4;
- (id)initWithCDVNameSpace:(id)arg1 andName:(id)arg2;
- (id)initWithCString:(const char *)arg1 encoding:(unsigned int)arg2;
- (id)initWithCString:(const char *)arg1 length:(unsigned int)arg2;
- (id)initWithCString:(const char *)arg1;
- (id)initWithCStringNoCopy:(char *)arg1 length:(unsigned int)arg2 freeWhenDone:(BOOL)arg3;
- (id)initWithCharacters:(const unsigned short*)arg1 length:(unsigned int)arg2;
- (id)initWithCharactersNoCopy:(unsigned short*)arg1 length:(unsigned int)arg2 freeWhenDone:(BOOL)arg3;
- (id)initWithCoder:(id)arg1;
- (id)initWithContentOfXmlNode:(struct _xmlNode { void *x1; int x2; char *x3; struct _xmlNode {} *x4; struct _xmlNode {} *x5; struct _xmlNode {} *x6; struct _xmlNode {} *x7; struct _xmlNode {} *x8; struct _xmlDoc {} *x9; struct _xmlNs {} *x10; char *x11; struct _xmlAttr {} *x12; struct _xmlNs {} *x13; void *x14; unsigned short x15; unsigned short x16; }*)arg1;
- (id)initWithContentsOfFile:(id)arg1 encoding:(unsigned int)arg2 error:(id*)arg3;
- (id)initWithContentsOfFile:(id)arg1 usedEncoding:(unsigned int*)arg2 error:(id*)arg3;
- (id)initWithContentsOfFile:(id)arg1;
- (id)initWithContentsOfURL:(id)arg1 encoding:(unsigned int)arg2 error:(id*)arg3;
- (id)initWithContentsOfURL:(id)arg1 usedEncoding:(unsigned int*)arg2 error:(id*)arg3;
- (id)initWithContentsOfURL:(id)arg1;
- (id)initWithCsString:(const struct CsString { int (**x1)(); unsigned short *x2; unsigned int x3; unsigned int x4; }*)arg1;
- (id)initWithData:(id)arg1 encoding:(unsigned int)arg2;
- (id)initWithData:(id)arg1 usedEncoding:(unsigned int*)arg2;
- (id)initWithFormat:(id)arg1 arguments:(void*)arg2;
- (id)initWithFormat:(id)arg1 locale:(id)arg2 arguments:(void*)arg3;
- (id)initWithFormat:(id)arg1 locale:(id)arg2;
- (id)initWithFormat:(id)arg1;
- (id)initWithOcText:(const struct OcText { int (**x1)(); int x2; unsigned int x3; unsigned int x4; unsigned int x5; char *x6; char *x7; boolx8; }*)arg1;
- (id)initWithString:(id)arg1;
- (id)initWithUTF8String:(const char *)arg1;
- (id)initWithValueOfXmlAttribute:(struct _xmlAttr { void *x1; int x2; char *x3; struct _xmlNode {} *x4; struct _xmlNode {} *x5; struct _xmlNode {} *x6; struct _xmlAttr {} *x7; struct _xmlAttr {} *x8; struct _xmlDoc {} *x9; struct _xmlNs {} *x10; int x11; void *x12; }*)arg1;
- (id)initWithWideCString:(int*)arg1;
- (id)initWithXmlChars:(const char *)arg1;
- (id)initWithXmlString:(const char *)arg1;
- (int)intValue;
- (int)integerValue;
- (BOOL)isAbsolutePath;
- (BOOL)isConfigProfileMIMEType;
- (BOOL)isDelete;
- (BOOL)isDirectory;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isEqualToIgnoringCase:(id)arg1;
- (BOOL)isEqualToString:(id)arg1;
- (BOOL)isFeedURLString;
- (BOOL)isLeftAssociative;
- (BOOL)isNSString__;
- (BOOL)isNaturallyRTL;
- (BOOL)isNewlineOrReturn;
- (BOOL)isNumberFormatPattern;
- (BOOL)isNumberFormatPattern;
- (BOOL)isNumberFormatPattern;
- (BOOL)isPlainSpace;
- (BOOL)isSpace;
- (BOOL)isSpaceOrReturn;
- (BOOL)isSpecialCustomNumberFormatToken;
- (BOOL)isSpecialCustomNumberFormatTokenOfType:(int)arg1;
- (BOOL)isSyndicationScheme;
- (BOOL)isSyndicationURLString;
- (BOOL)isTripledPunctuation;
- (int)languageTypeAtIndex:(unsigned int)arg1 effectiveRange:(struct _NSRange { unsigned int x1; unsigned int x2; }*)arg2;
- (id)lastPathComponent;
- (unsigned int)length;
- (unsigned int)lengthOfBytesUsingEncoding:(unsigned int)arg1;
- (struct _NSRange { unsigned int x1; unsigned int x2; })lineRangeForRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (id)linguisticTagsInRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1 scheme:(id)arg2 options:(unsigned int)arg3 orthography:(id)arg4 tokenRanges:(id*)arg5;
- (id)linkProperties;
- (int)localizedCaseInsensitiveCompare:(id)arg1;
- (int)localizedCompare:(id)arg1;
- (int)localizedCompareToString:(id)arg1;
- (BOOL)localizedHasPrefix:(id)arg1 caseSensitive:(BOOL)arg2;
- (int)localizedStandardCompare:(id)arg1;
- (long long)longLongValue;
- (BOOL)looksLikeEmailAddress;
- (BOOL)looksLikeNumberInput;
- (BOOL)looksLikeURL;
- (const char *)lossyCString;
- (id)lowercaseString;
- (unsigned int)maximumLengthOfBytesUsingEncoding:(unsigned int)arg1;
- (id)mf_MD5Digest;
- (id)mf_addressComment;
- (id)mf_addressDomain;
- (BOOL)mf_appearsToBeAnInitial;
- (id)mf_bestMimeCharset;
- (id)mf_bestMimeCharsetUsingHint:(unsigned long)arg1;
- (id)mf_betterStringByResolvingSymlinksInPath;
- (int)mf_caseInsensitiveCompareExcludingXDash:(id)arg1;
- (id)mf_componentsSeparatedByPattern:(id)arg1;
- (id)mf_convertFromFlowedText:(unsigned int)arg1;
- (id)mf_copyAddressComment;
- (id)mf_copyUncommentedAddress;
- (id)mf_dataUsingEncoding:(unsigned int)arg1 allowLossyConversion:(BOOL)arg2;
- (id)mf_dataUsingEncoding:(unsigned int)arg1;
- (id)mf_decodeMimeHeaderValueWithCharsetHint:(id)arg1;
- (id)mf_decodeMimeHeaderValueWithEncodingHint:(unsigned long)arg1;
- (id)mf_encodedHeaderDataWithEncodingHint:(unsigned long)arg1;
- (id)mf_fileSystemString;
- (void)mf_firstName:(id*)arg1 middleName:(id*)arg2 lastName:(id*)arg3 extension:(id*)arg4;
- (BOOL)mf_isEqualToAddress:(id)arg1;
- (BOOL)mf_isLegalCommentedEmailAddress;
- (BOOL)mf_isLegalEmailAddress;
- (BOOL)mf_isSubdirectoryOfPath:(id)arg1;
- (unsigned int)mf_lineBreakBeforeIndex:(unsigned int)arg1 withinRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg2;
- (const void*)mf_lossyDefaultCStringBytes;
- (BOOL)mf_makeDirectoryWithMode:(int)arg1;
- (id)mf_messageIDSubstring;
- (unsigned int)mf_nextWordFromIndex:(unsigned int)arg1 forward:(BOOL)arg2;
- (id)mf_stringByEscapingForXML;
- (id)mf_stringByEscapingHTMLCodes;
- (id)mf_stringByLocalizingReOrFwdPrefix;
- (id)mf_stringByReallyAbbreviatingWithTildeInPath;
- (id)mf_stringWithNoExtraSpaces;
- (unsigned int)mf_subjectPrefixLength;
- (id)mf_trimCommasSpacesQuotes;
- (id)mf_uncommentedAddress;
- (id)mf_uncommentedAddressRespectingGroups;
- (id)mf_uniqueFilenameWithRespectToFilenames:(id)arg1;
- (id)mobileMeDomain;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (id)negativeSubpatternOfNumberFormatPattern;
- (id)negativeSubpatternOfNumberFormatPattern;
- (id)negativeSubpatternOfNumberFormatPattern;
- (id)newYouTubeVideoDescription;
- (unsigned int)numberOfDigitsInCustomNumberFormatDecimalToken;
- (unsigned int)numberOfDigitsInCustomNumberFormatIntegerToken;
- (id)numberPortionOfNumberFormatSubpattern;
- (id)numberPortionOfNumberFormatSubpattern;
- (id)numberPortionOfNumberFormatSubpattern;
- (struct _NSRange { unsigned int x1; unsigned int x2; })oi_rangeOfCharactersFromSet:(id)arg1 index:(int)arg2;
- (double)oi_realSizeWithFontName:(id)arg1 size:(int)arg2 bold:(bool)arg3 italic:(bool)arg4;
- (double)oi_sizeWithFontName:(id)arg1 size:(int)arg2 bold:(bool)arg3 italic:(bool)arg4;
- (double)oi_sizeWithFontName:(id)arg1 size:(int)arg2;
- (struct _NSRange { unsigned int x1; unsigned int x2; })paragraphRangeForRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (int)parsingState;
- (id)pathComponents;
- (id)pathExtension;
- (id)pathStringForDisplay;
- (id)positiveSubpatternOfNumberFormatPattern;
- (id)positiveSubpatternOfNumberFormatPattern;
- (id)positiveSubpatternOfNumberFormatPattern;
- (id)precomposedStringWithCanonicalMapping;
- (id)precomposedStringWithCompatibilityMapping;
- (id)prefixOfNumberFormatSubpattern;
- (id)prefixOfNumberFormatSubpattern;
- (id)prefixOfNumberFormatSubpattern;
- (id)prefixStringWithByteCount:(unsigned int)arg1;
- (id)propertyList;
- (id)propertyListFromStringsFileFormat;
- (id)queryKeysAndValues;
- (id)quote;
- (id)quotedStringRepresentation;
- (struct _NSRange { unsigned int x1; unsigned int x2; })rangeOfCharacterFromSet:(id)arg1 options:(unsigned int)arg2 range:(struct _NSRange { unsigned int x1; unsigned int x2; })arg3;
- (struct _NSRange { unsigned int x1; unsigned int x2; })rangeOfCharacterFromSet:(id)arg1 options:(unsigned int)arg2;
- (struct _NSRange { unsigned int x1; unsigned int x2; })rangeOfCharacterFromSet:(id)arg1;
- (struct _NSRange { unsigned int x1; unsigned int x2; })rangeOfComposedCharacterSequenceAtIndex:(unsigned int)arg1;
- (struct _NSRange { unsigned int x1; unsigned int x2; })rangeOfComposedCharacterSequencesForRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (struct _NSRange { unsigned int x1; unsigned int x2; })rangeOfNewlineInRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (struct _NSRange { unsigned int x1; unsigned int x2; })rangeOfString:(id)arg1 options:(unsigned int)arg2 range:(struct _NSRange { unsigned int x1; unsigned int x2; })arg3 locale:(id)arg4;
- (struct _NSRange { unsigned int x1; unsigned int x2; })rangeOfString:(id)arg1 options:(unsigned int)arg2 range:(struct _NSRange { unsigned int x1; unsigned int x2; })arg3;
- (struct _NSRange { unsigned int x1; unsigned int x2; })rangeOfString:(id)arg1 options:(unsigned int)arg2;
- (struct _NSRange { unsigned int x1; unsigned int x2; })rangeOfString:(id)arg1;
- (id)removeSlashIfNeeded;
- (id)removeSlashIfNeeded;
- (BOOL)roomNameIsProbablyAutomaticallyGenerated;
- (id)safeFilename;
- (unsigned short)scaleCharacterInCustomNumberFormatScaleToken;
- (id)searchAndReplaceString:(id)arg1 withString:(id)arg2;
- (id)securedStringIncludingLastCharacter:(BOOL)arg1;
- (struct _NSRange { unsigned int x1; unsigned int x2; })significantText;
- (struct CGSize { float x1; float x2; })sizeForWidth:(float)arg1 withAttributes:(id)arg2;
- (struct CGSize { float x1; float x2; })sizeInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withAttributes:(id)arg2;
- (struct CGSize { float x1; float x2; })sizeWithFont:(id)arg1 constrainedToSize:(struct CGSize { float x1; float x2; })arg2 lineBreakMode:(int)arg3 lineSpacing:(int)arg4;
- (struct CGSize { float x1; float x2; })sizeWithFont:(id)arg1 constrainedToSize:(struct CGSize { float x1; float x2; })arg2 lineBreakMode:(int)arg3;
- (struct CGSize { float x1; float x2; })sizeWithFont:(id)arg1 constrainedToSize:(struct CGSize { float x1; float x2; })arg2;
- (struct CGSize { float x1; float x2; })sizeWithFont:(id)arg1 forWidth:(float)arg2 lineBreakMode:(int)arg3 letterSpacing:(float)arg4;
- (struct CGSize { float x1; float x2; })sizeWithFont:(id)arg1 forWidth:(float)arg2 lineBreakMode:(int)arg3;
- (struct CGSize { float x1; float x2; })sizeWithFont:(id)arg1 minFontSize:(float)arg2 actualFontSize:(float*)arg3 forWidth:(float)arg4 lineBreakMode:(int)arg5;
- (struct CGSize { float x1; float x2; })sizeWithFont:(id)arg1;
- (unsigned int)smallestEncoding;
- (unsigned short)spaceCharacterInCustomNumberFormatSpaceToken;
- (id)standardizedURLPath;
- (BOOL)startsWithString:(id)arg1;
- (id)stringByAbbreviatingWithTildeInPath;
- (id)stringByAddingPercentEscapes;
- (id)stringByAddingPercentEscapesForUsername;
- (id)stringByAddingPercentEscapesIncludingReservedCharacters;
- (id)stringByAddingPercentEscapesUsingEncoding:(unsigned int)arg1;
- (id)stringByAddingURLEscapes;
- (id)stringByAppendingFormat:(id)arg1;
- (id)stringByAppendingPathComponent:(id)arg1;
- (id)stringByAppendingPathExtension:(id)arg1;
- (id)stringByAppendingSlash;
- (id)stringByAppendingString:(id)arg1;
- (id)stringByCapitalizingFirstLetter;
- (id)stringByConvertingLineEndingsTo:(id)arg1;
- (id)stringByConvertingPathToURL;
- (id)stringByConvertingURLToPath;
- (id)stringByDecodingSlashes;
- (id)stringByDeletingAnyDateMatching:(id)arg1 dateStringFormatFunction:(int (*)())arg2;
- (id)stringByDeletingLastPathComponent;
- (id)stringByDeletingPathExtension;
- (id)stringByEncodingSlashes;
- (id)stringByEscapingDoubleQuotes;
- (id)stringByEscapingXMLSpecialCharacters;
- (id)stringByExpandingTildeInPath;
- (id)stringByFixingSymbolCharacters;
- (id)stringByFoldingWithOptions:(unsigned int)arg1 locale:(id)arg2;
- (id)stringByInsertingGroupingSeparators;
- (id)stringByPaddingToLength:(unsigned int)arg1 withString:(id)arg2 startingAtIndex:(unsigned int)arg3;
- (id)stringByPercentEscaping;
- (id)stringByQuotingString;
- (id)stringByRemovingCharactersFromSet:(id)arg1;
- (id)stringByRemovingEscapedCharactersFromNumberFormatPattern;
- (id)stringByRemovingEscapedCharactersFromNumberFormatPattern;
- (id)stringByRemovingEscapedCharactersFromNumberFormatPattern;
- (id)stringByRemovingLTGT;
- (id)stringByRemovingPercentEscapes;
- (id)stringByRemovingPercentEscapesForUsername;
- (id)stringByRemovingURLEscapes;
- (id)stringByRemovingWhitespace;
- (id)stringByReplacingCharacter:(unsigned long)arg1 withCharacter:(unsigned long)arg2;
- (id)stringByReplacingCharactersInRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1 withString:(id)arg2;
- (id)stringByReplacingCharactersInSet:(struct __CFCharacterSet { }*)arg1 withCharacter:(unsigned long)arg2;
- (id)stringByReplacingMarkupCharactersWithHTMLEntities;
- (id)stringByReplacingOccurrencesOfString:(id)arg1 withString:(id)arg2 options:(unsigned int)arg3 range:(struct _NSRange { unsigned int x1; unsigned int x2; })arg4;
- (id)stringByReplacingOccurrencesOfString:(id)arg1 withString:(id)arg2;
- (id)stringByReplacingPercentEscapesUsingEncoding:(unsigned int)arg1;
- (id)stringByResolvingAndStandardizingPath;
- (id)stringByResolvingSymlinksInPath;
- (id)stringByStandardizingPath;
- (id)stringByStandardizingWhitespace;
- (id)stringByStrippingControlCharacters;
- (id)stringByStrippingControlCharacters;
- (id)stringByStrippingEmojiCharacters;
- (id)stringByStrippingLeadingAndTrailingWhitespace;
- (id)stringBySubstitutingHTMLEntitiesForAmpersandAndAngleBrackets;
- (id)stringByTrimmingCharactersInCFCharacterSet:(struct __CFCharacterSet { }*)arg1;
- (id)stringByTrimmingCharactersInSet:(id)arg1;
- (id)stringByTrimmingLastCharacter;
- (id)stringByTrimmingNotesJunk;
- (id)stringByURLEscapingPathComponent;
- (id)stringByURLQuoting;
- (id)stringByURLQuoting;
- (id)stringByURLQuotingPaths;
- (id)stringByURLUnquoting;
- (id)stringByXMLUnquoting;
- (id)stringFormattedForMSVersioning;
- (id)stringMetricsForDrawingInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 usingFont:(struct __GSFont { }*)arg2 ellipsisStyle:(int)arg3 flowingFromX:(float)arg4 lastLineEnd:(struct CGPoint { float x1; float x2; }*)arg5 startOnSecondLineIfPossible:(BOOL)arg6;
- (id)stringWithDefaultServerIfNeeded:(id)arg1;
- (id)stringWithFont:(id)arg1 forWidth:(float)arg2 lineBreakMode:(int)arg3;
- (id)stringsByAppendingPaths:(id)arg1;
- (id)stripMobileMSuffixIfPresent;
- (id)substringFromIndex:(unsigned int)arg1;
- (id)substringToIndex:(unsigned int)arg1;
- (id)substringWithRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (id)suffixOfNumberFormatSubpattern;
- (id)suffixOfNumberFormatSubpattern;
- (id)suffixOfNumberFormatSubpattern;
- (id)threadDescription;
- (id)trimChar:(unsigned short)arg1;
- (id)trimCommas;
- (id)trimFinalChar:(unsigned short)arg1;
- (id)trimFinalComma;
- (id)trimFirstChar:(unsigned short)arg1;
- (id)trimFirstComma;
- (id)trimWhiteSpace;
- (id)trimmedString;
- (id)unescapedQueryValue;
- (id)unformattedPhoneNumber;
- (id)uniqueSavePath;
- (id)unquote;
- (unsigned int)unsignedIntValue;
- (id)uppercaseString;
- (id)urlEncodedString;
- (id)urlFromString;
- (id)urlPathRelativeToPath:(id)arg1;
- (BOOL)writeToFile:(id)arg1 atomically:(BOOL)arg2 encoding:(unsigned int)arg3 error:(id*)arg4;
- (BOOL)writeToFile:(id)arg1 atomically:(BOOL)arg2;
- (BOOL)writeToURL:(id)arg1 atomically:(BOOL)arg2 encoding:(unsigned int)arg3 error:(id*)arg4;
- (BOOL)writeToURL:(id)arg1 atomically:(BOOL)arg2;
- (const char *)xmlString;
- (id)youTubeTrimmedString;

@end
