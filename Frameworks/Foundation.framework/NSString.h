/* Generated by RuntimeBrowser on iPhone OS 4.1
   Image: /System/Library/Frameworks/Foundation.framework/Foundation
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */



@interface NSString : NSObject <NSCopying, NSMutableCopying, NSCoding>
{
}

+ (id)stringWithCString:(const char *)arg1 encoding:(NSUInteger)arg2;
+ (const NSUInteger*)availableStringEncodings;
+ (id)stringWithContentsOfFile:(id)arg1 encoding:(NSUInteger)arg2 error:(id*)arg3;
+ (id)_web_stringRepresentationForBytes:(long long)arg1;
+ (id)stringWithCString:(const char *)arg1 length:(NSUInteger)arg2;
+ (id)stringWithBytes:(const void*)arg1 length:(NSUInteger)arg2 encoding:(NSUInteger)arg3;
+ (id)stringWithFormat:(id)arg1 locale:(id)arg2;
+ (id)stringWithContentsOfFile:(id)arg1;
+ (id)stringWithContentsOfURL:(id)arg1;
+ (id)stringWithContentsOfURL:(id)arg1 encoding:(NSUInteger)arg2 error:(id*)arg3;
+ (id)stringWithContentsOfURL:(id)arg1 usedEncoding:(NSUInteger*)arg2 error:(id*)arg3;
+ (id)stringWithContentsOfFile:(id)arg1 usedEncoding:(NSUInteger*)arg2 error:(id*)arg3;
+ (NSUInteger)defaultCStringEncoding;
+ (id)stringWithCString:(const char *)arg1;
+ (id)localizedNameOfStringEncoding:(NSUInteger)arg1;
+ (id)localizedStringWithFormat:(id)arg1;
+ (id)stringWithCharacters:(const unsigned short*)arg1 length:(NSUInteger)arg2;
+ (id)string;
+ (void)initialize;
+ (id)stringWithString:(id)arg1;
+ (id)stringWithUTF8String:(const char *)arg1;
+ (id)stringWithFormat:(id)arg1;
+ (id)allocWithZone:(struct _NSZone { }*)arg1;
+ (id)pathWithComponents:(id)arg1;
+ (BOOL)_web_wordRoundingEnabled;
+ (void)_web_setWordRoundingEnabled:(BOOL)arg1;
+ (BOOL)_web_ascentRoundingEnabled;
+ (void)_web_setAscentRoundingEnabled:(BOOL)arg1;
+ (id)_web_stringWithData:(id)arg1 textEncodingName:(id)arg2;
+ (id)_webkit_localCacheDirectoryWithBundleIdentifier:(id)arg1;
+ (void)_pushWordRoundingEnabled:(BOOL)arg1;
+ (void)_popWordRoundingEnabled;
+ (void)_pushAscentRoundingEnabled:(BOOL)arg1;
+ (void)_popAscentRoundingEnabled;
+ (id)stringWithUnichar:(unsigned long)arg1;
+ (id)MCMakeUUID;
+ (id)stringGUID;
+ (id)generatedRoomNameForGroupChat;
+ (unsigned short)localizedCanonicalBucketCharacterCharacter:(unsigned short)arg1;
+ (void*)sectionSortKeyBytesForCharacters:(const unsigned short*)arg1 count:(NSUInteger)arg2 getLength:(NSInteger*)arg3;
+ (unsigned char)languagePreferenceSortKeyPrefixForCharacters:(const unsigned short*)arg1 count:(NSUInteger)arg2;
+ (id)indexBarBucketStringForSortKeyBytes:(void*)arg1 length:(NSInteger)arg2;
+ (id)indexBarBucketStringForCharacters:(unsigned short*)arg1 count:(NSUInteger)arg2;
+ (unsigned short)indexBarBucketCharacterForCharacter:(unsigned short)arg1;
+ (id)indexBarBucketStringForCharacter:(unsigned short)arg1;
+ (id)sqlFormattedStringWithCPRecordID:(NSInteger)arg1;
+ (id)sqlFormattedStringWithUInt64Value:(unsigned long long)arg1;
+ (id)_mapkit_formattedStringForNumber:(id)arg1 isInt:(BOOL)arg2;
+ (id)_mapkit_formattedStringForInt:(NSInteger)arg1;
+ (id)_mapkit_formattedStringForFloat:(float)arg1;
+ (id)_mapkit_localizedDistanceStringWithMeters:(NSInteger)arg1 inMetric:(BOOL)arg2 includeTrip:(BOOL)arg3;
+ (id)_mapkit_departureWithDate:(id)arg1;
+ (id)_referenceDateWithTimeZone:(id)arg1;
+ (id)_mapkit_departureWithDate:(id)arg1 allowCountdown:(BOOL)arg2;
+ (id)_mapkit_arrivalWithDate:(id)arg1;
+ (id)_mapkit_arrivalWithDate:(id)arg1 allowCountdown:(BOOL)arg2;
+ (id)_attendeeNameExtensions;
+ (id)_attendeePartialSurnames;
+ (id)mf_nameExtensions;
+ (id)mf_partialSurnames;
+ (id)mf_formattedAddressWithName:(id)arg1 email:(id)arg2 useQuotes:(BOOL)arg3;
+ (id)mf_stringWithData:(id)arg1 encoding:(NSUInteger)arg2;
+ (id)mf_stringFromMimeRichTextString:(id)arg1 asHTML:(BOOL)arg2;
+ (id)mf_stringFromMimeEnrichedString:(id)arg1 asHTML:(BOOL)arg2;
+ (id)mf_UUID;
+ (id)mf_stringWithAttachmentCharacter;
+ (id)mf_stringRepresentationForBytes:(long long)arg1;
+ (id)mf_messageIDStringWithDomainHint:(id)arg1;
+ (id)stringForRelativeRankInGame:(id)arg1 withPlayer:(id)arg2;
+ (id)stringForPercentileWithRank:(float)arg1 totalScores:(float)arg2 asPercentile:(BOOL)arg3 isTop:(BOOL*)arg4;
+ (id)stringForPercentileRankingWithRank:(float)arg1 totalScores:(float)arg2;
+ (id)stringForRankAndPercentileWithRank:(float)arg1 totalScores:(float)arg2;
+ (id)stringWithNameSpace:(const char *)arg1 elementName:(const char *)arg2;
+ (NSUInteger)encodingForIANACharSetName:(id)arg1;
+ (id)IANACharSetNameFromEncoding:(NSUInteger)arg1;
+ (id)mapString:(id)arg1;
+ (/* Warning: Unrecognized filer type: 'B' using 'void*' */ void*)skipString:(id)arg1;
     /* Encoded args for previous method: B12@0:4@8 */

+ (id)stringWithXmlString:(const char *)arg1;
+ (id)stringWithBytes:(const void*)arg1 length:(NSUInteger)arg2 codePointMapper:(int (*)())arg3;
+ (id)stringWithBytes:(const void*)arg1 length:(NSUInteger)arg2 fontFamilyName:(id)arg3;
+ (id)stringWithXmlChars:(const char *)arg1;
+ (id)numberSymbols;
+ (id)numberSymbols;
+ (id)stringWithWideCString:(NSInteger*)arg1;
+ (id)stringWithCsString:(const struct CsString { int (**x1)(); unsigned short *x2; NSUInteger x3; NSUInteger x4; }*)arg1;
+ (id)stringWithOcText:(const struct OcText { int (**x1)(); NSInteger x2; NSUInteger x3; NSUInteger x4; NSUInteger x5; char *x6; char *x7; /* Warning: Unrecognized filer type: 'B' using 'void*' */ void*x8; }*)arg1;
     /* Encoded args for previous method: @12@0:4r^{OcText=^^?iIII**B}8 */

+ (id)newUUID;
+ (id)customNumberFormatTokenStringOfType:(NSInteger)arg1 content:(id)arg2;
+ (id)customNumberFormatIntegerTokenDisplayStringWithDigits:(NSUInteger)arg1 separator:(BOOL)arg2 digitString:(id)arg3;
+ (id)customNumberFormatIntegerTokenRepresentedStringWithDigits:(NSUInteger)arg1 separator:(BOOL)arg2 digitString:(id)arg3;
+ (id)customNumberFormatIntegerFormatStringWithDigits:(NSUInteger)arg1 digitString:(id)arg2;
+ (id)customNumberFormatDecimalTokenDisplayStringWithDigits:(NSUInteger)arg1 digitString:(id)arg2;
+ (id)customNumberFormatDecimalTokenRepresentedStringWithDigits:(NSUInteger)arg1 digitString:(id)arg2;
+ (id)customNumberFormatDecimalFormatStringWithDigits:(NSUInteger)arg1 digitString:(id)arg2 includeDecimalSeparator:(BOOL)arg3;
+ (id)numberSymbols;

- (id)initWithCharactersNoCopy:(unsigned short*)arg1 length:(NSUInteger)arg2 freeWhenDone:(BOOL)arg3;
- (id)formatConfiguration;
- (id)_copyFormatStringWithConfiguration:(id)arg1;
- (id)_stringRepresentation;
- (id)initWithContentsOfURL:(id)arg1;
- (BOOL)isNSString__;
- (const unsigned short*)_fastCharacterContents;
- (const char *)_fastCStringContents:(BOOL)arg1;
- (NSUInteger)cStringLength;
- (id)_newSubstringWithRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg1 zone:(struct _NSZone { }*)arg2;
- (NSUInteger)fastestEncoding;
- (NSUInteger)smallestEncoding;
- (BOOL)_isCString;
- (unsigned long)_cfTypeID;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })rangeOfString:(id)arg1 options:(NSUInteger)arg2 range:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg3;
- (BOOL)canBeConvertedToEncoding:(NSUInteger)arg1;
- (id)precomposedStringWithCanonicalMapping;
- (void)getCharacters:(unsigned short*)arg1 range:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg2;
- (id)stringByAbbreviatingWithTildeInPath;
- (id)stringByStandardizingPath;
- (id)stringByResolvingSymlinksInPath;
- (id)stringByExpandingTildeInPath;
- (NSUInteger)lengthOfBytesUsingEncoding:(NSUInteger)arg1;
- (BOOL)writeToURL:(id)arg1 atomically:(BOOL)arg2;
- (NSInteger)localizedStandardCompare:(id)arg1;
- (NSUInteger)maximumLengthOfBytesUsingEncoding:(NSUInteger)arg1;
- (void)getCString:(char *)arg1;
- (BOOL)getBytes:(void*)arg1 maxLength:(NSUInteger)arg2 usedLength:(NSUInteger*)arg3 encoding:(NSUInteger)arg4 options:(NSUInteger)arg5 range:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg6 remainingRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; }*)arg7;
- (id)dataUsingEncoding:(NSUInteger)arg1 allowLossyConversion:(BOOL)arg2;
- (id)initWithContentsOfFile:(id)arg1 encoding:(NSUInteger)arg2 error:(id*)arg3;
- (id)initWithCString:(const char *)arg1 length:(NSUInteger)arg2;
- (id)stringByReplacingOccurrencesOfString:(id)arg1 withString:(id)arg2 options:(NSUInteger)arg3 range:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg4;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })rangeOfComposedCharacterSequenceAtIndex:(NSUInteger)arg1;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })significantText;
- (NSInteger)_web_countOfString:(id)arg1;
- (BOOL)_web_looksLikeIPAddress;
- (BOOL)_web_hasCountryCodeTLD;
- (BOOL)_web_domainMatches:(id)arg1;
- (id)_web_stringByExpandingTildeInPath;
- (id)_web_fixedCarbonPOSIXPath;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })_web_rangeOfURLUserPasswordHostPort;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })_web_rangeOfURLHost;
- (BOOL)_web_isFileURL;
- (id)_web_URLFragment;
- (id)_web_stringByCollapsingNonPrintingCharacters;
- (unsigned long)_web_extractFourCharCode;
- (id)_web_splitAtNonDateCommas_nowarn;
- (id)_web_parseAsKeyValuePair_nowarn;
- (id)_web_parseAsKeyValuePairHandleQuotes_nowarn:(BOOL)arg1;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })_web_rangeOfURLScheme_nowarn;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })_web_rangeOfURLResourceSpecifier_nowarn;
- (id)_web_mimeTypeFromContentTypeHeader_nowarn;
- (id)_web_characterSetFromContentTypeHeader_nowarn;
- (id)_web_fileNameFromContentDispositionHeader_nowarn;
- (id)_web_stringByReplacingValidPercentEscapes_nowarn;
- (BOOL)_web_isJavaScriptURL;
- (id)_web_filenameByFixingIllegalCharacters;
- (id)_web_HTTPStyleLanguageCode;
- (id)_web_HTTPStyleLanguageCodeWithoutRegion;
- (id)standardizedURLPath;
- (id)stringByRemovingPercentEscapes;
- (id)stringByAddingPercentEscapes;
- (id)urlPathRelativeToPath:(id)arg1;
- (void)getCString:(char *)arg1 maxLength:(NSUInteger)arg2 range:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg3 remainingRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; }*)arg4;
- (void)getCString:(char *)arg1 maxLength:(NSUInteger)arg2;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })_rangeOfRegularExpressionPattern:(id)arg1 options:(NSUInteger)arg2 range:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg3 locale:(id)arg4;
- (void)_flushRegularExpressionCaches;
- (id)_stringByReplacingOccurrencesOfRegularExpressionPattern:(id)arg1 withTemplate:(id)arg2 options:(NSUInteger)arg3 range:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg4;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })rangeOfComposedCharacterSequencesForRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg1;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })rangeOfString:(id)arg1 options:(NSUInteger)arg2 range:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg3 locale:(id)arg4;
- (id)stringByPaddingToLength:(NSUInteger)arg1 withString:(id)arg2 startingAtIndex:(NSUInteger)arg3;
- (id)stringByFoldingWithOptions:(NSUInteger)arg1 locale:(id)arg2;
- (void)_getBlockStart:(NSUInteger*)arg1 end:(NSUInteger*)arg2 contentsEnd:(NSUInteger*)arg3 forRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg4 stopAtLineSeparators:(BOOL)arg5;
- (void)getParagraphStart:(NSUInteger*)arg1 end:(NSUInteger*)arg2 contentsEnd:(NSUInteger*)arg3 forRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg4;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })lineRangeForRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg1;
- (void)enumerateSubstringsInRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg1 options:(NSUInteger)arg2 usingBlock:(id)arg3;
- (void)enumerateLinesUsingBlock:(id)arg1;
- (id)displayableString;
- (BOOL)getExternalRepresentation:(id*)arg1 extendedAttributes:(id*)arg2 forWritingToURLOrPath:(id)arg3 usingEncoding:(NSUInteger)arg4 error:(id*)arg5;
- (BOOL)writeToURL:(id)arg1 atomically:(BOOL)arg2 encoding:(NSUInteger)arg3 error:(id*)arg4;
- (id)_initWithBytesOfUnknownEncoding:(char *)arg1 length:(NSUInteger)arg2 copy:(BOOL)arg3 usedEncoding:(NSUInteger*)arg4;
- (id)_initWithDataOfUnknownEncoding:(id)arg1;
- (id)initWithContentsOfURL:(id)arg1 encoding:(NSUInteger)arg2 error:(id*)arg3;
- (id)initWithContentsOfURL:(id)arg1 usedEncoding:(NSUInteger*)arg2 error:(id*)arg3;
- (id)initWithContentsOfFile:(id)arg1 usedEncoding:(NSUInteger*)arg2 error:(id*)arg3;
- (id)initWithData:(id)arg1 usedEncoding:(NSUInteger*)arg2;
- (id)initWithFormat:(id)arg1 locale:(id)arg2;
- (id)propertyListFromStringsFileFormat;
- (id)stringsByAppendingPaths:(id)arg1;
- (NSUInteger)completePathIntoString:(id*)arg1 caseSensitive:(BOOL)arg2 matchesIntoArray:(id*)arg3 filterTypes:(id)arg4;
- (id)stringByConvertingPathToURL;
- (id)stringByConvertingURLToPath;
- (id)initWithCStringNoCopy:(char *)arg1 length:(NSUInteger)arg2 freeWhenDone:(BOOL)arg3;
- (id)initWithFormat:(id)arg1 locale:(id)arg2 arguments:(void*)arg3;
- (struct { unsigned int x1 : 8; unsigned int x2 : 4; unsigned int x3 : 1; unsigned int x4 : 1; unsigned int x5 : 18; unsigned short x6[8]; })decimalValue;
- (id)quotedStringRepresentation;
- (id)initWithBytesNoCopy:(void*)arg1 length:(NSUInteger)arg2 encoding:(NSUInteger)arg3 freeWhenDone:(BOOL)arg4;
- (const char *)lossyCString;
- (id)propertyList;
- (BOOL)getBytes:(char *)arg1 maxLength:(NSUInteger)arg2 filledLength:(NSUInteger*)arg3 encoding:(NSUInteger)arg4 allowLossyConversion:(BOOL)arg5 range:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg6 remainingRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; }*)arg7;
- (id)decomposedStringWithCompatibilityMapping;
- (id)precomposedStringWithCompatibilityMapping;
- (id)_createSubstringWithRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg1;
- (unsigned char)_encodingCantBeStoredInEightBitCFString;
- (unsigned long)_smallestEncodingInCFStringEncoding;
- (unsigned long)_fastestEncodingInCFStringEncoding;
- (BOOL)_getCString:(char *)arg1 maxLength:(NSUInteger)arg2 encoding:(unsigned long)arg3;
- (id)_stringByResolvingSymlinksInPathUsingCache:(BOOL)arg1;
- (id)_stringByStandardizingPathUsingCache:(BOOL)arg1;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })paragraphRangeForRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg1;
- (id)initWithCString:(const char *)arg1 encoding:(NSUInteger)arg2;
- (NSInteger)compare:(id)arg1 options:(NSUInteger)arg2 range:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg3 locale:(id)arg4;
- (id)_web_domainFromHost;
- (void)getLineStart:(NSUInteger*)arg1 end:(NSUInteger*)arg2 contentsEnd:(NSUInteger*)arg3 forRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg4;
- (id)_web_stringByTrimmingWhitespace;
- (id)initWithFormat:(id)arg1 arguments:(void*)arg2;
- (id)pathComponents;
- (BOOL)isAbsolutePath;
- (id)uppercaseString;
- (id)dataUsingEncoding:(NSUInteger)arg1;
- (NSInteger)integerValue;
- (Class)classForCoder;
- (id)stringByAddingPercentEscapesUsingEncoding:(NSUInteger)arg1;
- (BOOL)_web_isCaseInsensitiveEqualToString:(id)arg1;
- (BOOL)_web_hasCaseInsensitivePrefix:(id)arg1;
- (BOOL)_web_looksLikeAbsoluteURL;
- (id)stringByDeletingLastPathComponent;
- (long long)longLongValue;
- (id)stringByTrimmingCharactersInSet:(id)arg1;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })rangeOfCharacterFromSet:(id)arg1;
- (id)lowercaseString;
- (void)getCharacters:(unsigned short*)arg1;
- (id)substringWithRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg1;
- (id)componentsSeparatedByCharactersInSet:(id)arg1;
- (id)capitalizedString;
- (NSInteger)compare:(id)arg1;
- (id)initWithCharacters:(const unsigned short*)arg1 length:(NSUInteger)arg2;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })rangeOfCharacterFromSet:(id)arg1 options:(NSUInteger)arg2 range:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg3;
- (id)initWithFormat:(id)arg1;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })rangeOfString:(id)arg1 options:(NSUInteger)arg2;
- (id)pathExtension;
- (BOOL)getCString:(char *)arg1 maxLength:(NSUInteger)arg2 encoding:(NSUInteger)arg3;
- (unsigned short)characterAtIndex:(NSUInteger)arg1;
- (id)initWithString:(id)arg1;
- (id)initWithData:(id)arg1 encoding:(NSUInteger)arg2;
- (id)lastPathComponent;
- (BOOL)writeToFile:(id)arg1 atomically:(BOOL)arg2 encoding:(NSUInteger)arg3 error:(id*)arg4;
- (id)stringByAppendingPathExtension:(id)arg1;
- (id)stringByDeletingPathExtension;
- (double)doubleValue;
- (id)stringByReplacingPercentEscapesUsingEncoding:(NSUInteger)arg1;
- (const char *)cString;
- (BOOL)hasPrefix:(id)arg1;
- (BOOL)hasSuffix:(id)arg1;
- (NSInteger)caseInsensitiveCompare:(id)arg1;
- (id)stringByReplacingOccurrencesOfString:(id)arg1 withString:(id)arg2;
- (id)stringByReplacingCharactersInRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg1 withString:(id)arg2;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })rangeOfCharacterFromSet:(id)arg1 options:(NSUInteger)arg2;
- (float)floatValue;
- (id)componentsSeparatedByString:(id)arg1;
- (NSInteger)compare:(id)arg1 options:(NSUInteger)arg2 range:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg3;
- (id)substringToIndex:(NSUInteger)arg1;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })rangeOfString:(id)arg1;
- (id)substringFromIndex:(NSUInteger)arg1;
- (id)stringByAppendingString:(id)arg1;
- (id)initWithContentsOfFile:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (BOOL)isEqual:(id)arg1;
- (NSUInteger)hash;
- (id)description;
- (NSUInteger)length;
- (BOOL)getFileSystemRepresentation:(char *)arg1 maxLength:(NSUInteger)arg2;
- (NSInteger)intValue;
- (BOOL)boolValue;
- (id)stringByAppendingFormat:(id)arg1;
- (const char *)UTF8String;
- (NSInteger)compare:(id)arg1 options:(NSUInteger)arg2;
- (id)stringByAppendingPathComponent:(id)arg1;
- (const char *)fileSystemRepresentation;
- (BOOL)writeToFile:(id)arg1 atomically:(BOOL)arg2;
- (const char *)cStringUsingEncoding:(NSUInteger)arg1;
- (id)initWithUTF8String:(const char *)arg1;
- (BOOL)isEqualToString:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (NSInteger)localizedCompare:(id)arg1;
- (id)initWithCString:(const char *)arg1;
- (id)commonPrefixWithString:(id)arg1 options:(NSUInteger)arg2;
- (id)decomposedStringWithCanonicalMapping;
- (NSInteger)localizedCaseInsensitiveCompare:(id)arg1;
- (id)stringByEscapingXMLSpecialCharacters;
- (id)copyABVCardDataRepresentation;
- (id)abEscapeStringForUnichar:(unsigned short)arg1 and:(unsigned short)arg2 advance:(NSInteger*)arg3;
- (id)abVCardKoshify;
- (struct CGSize { float x1; float x2; })_web_drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 withFont:(struct __GSFont { }*)arg2;
- (struct CGSize { float x1; float x2; })_web_drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withFont:(struct __GSFont { }*)arg3 ellipsis:(NSInteger)arg4 letterSpacing:(float)arg5;
- (struct CGSize { float x1; float x2; })_web_drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(struct __GSFont { }*)arg2 ellipsis:(NSInteger)arg3 alignment:(NSInteger)arg4 lineSpacing:(NSInteger)arg5;
- (struct CGSize { float x1; float x2; })_web_sizeWithFont:(struct __GSFont { }*)arg1 forWidth:(float)arg2 ellipsis:(NSInteger)arg3 letterSpacing:(float)arg4 resultRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; }*)arg5;
- (struct CGSize { float x1; float x2; })__web_drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withFont:(struct __GSFont { }*)arg3 ellipsis:(NSInteger)arg4 letterSpacing:(float)arg5 includeEmoji:(BOOL)arg6 measureOnly:(BOOL)arg7;
- (struct CGSize { float x1; float x2; })__web_drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(struct __GSFont { }*)arg2 ellipsis:(NSInteger)arg3 alignment:(NSInteger)arg4 letterSpacing:(float)arg5 lineSpacing:(float)arg6 includeEmoji:(BOOL)arg7 truncationRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg8 measureOnly:(BOOL)arg9;
- (struct CGSize { float x1; float x2; })_web_drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(struct __GSFont { }*)arg2 ellipsis:(NSInteger)arg3 alignment:(NSInteger)arg4 lineSpacing:(NSInteger)arg5 includeEmoji:(BOOL)arg6 truncationRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg7 measureOnly:(BOOL)arg8;
- (struct CGSize { float x1; float x2; })_web_drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withFont:(struct __GSFont { }*)arg3 ellipsis:(NSInteger)arg4;
- (struct CGSize { float x1; float x2; })_web_drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(struct __GSFont { }*)arg2 ellipsis:(NSInteger)arg3 alignment:(NSInteger)arg4;
- (struct CGSize { float x1; float x2; })_web_sizeInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(struct __GSFont { }*)arg2 ellipsis:(NSInteger)arg3;
- (struct CGSize { float x1; float x2; })_web_sizeWithFont:(struct __GSFont { }*)arg1;
- (struct CGSize { float x1; float x2; })_web_sizeWithFont:(struct __GSFont { }*)arg1 forWidth:(float)arg2 ellipsis:(NSInteger)arg3 letterSpacing:(float)arg4;
- (struct CGSize { float x1; float x2; })_web_drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withFont:(struct __GSFont { }*)arg3 ellipsis:(NSInteger)arg4 letterSpacing:(float)arg5 includeEmoji:(BOOL)arg6;
- (id)_web_stringForWidth:(float)arg1 withFont:(struct __GSFont { }*)arg2 ellipsis:(NSInteger)arg3 letterSpacing:(float)arg4 includeEmoji:(BOOL)arg5;
- (struct CGSize { float x1; float x2; })_web_sizeInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(struct __GSFont { }*)arg2 ellipsis:(NSInteger)arg3 lineSpacing:(NSInteger)arg4;
- (struct CGSize { float x1; float x2; })_web_drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(struct __GSFont { }*)arg2 ellipsis:(NSInteger)arg3 alignment:(NSInteger)arg4 lineSpacing:(NSInteger)arg5 includeEmoji:(BOOL)arg6 truncationRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg7;
- (struct CGSize { float x1; float x2; })_web_sizeWithFont:(struct __GSFont { }*)arg1 forWidth:(float)arg2 ellipsis:(NSInteger)arg3;
- (id)_web_securedStringIncludingLastCharacter:(BOOL)arg1;
- (struct CGSize { float x1; float x2; })_web_sizeForWidth:(float)arg1 withAttributes:(id)arg2;
- (struct CGSize { float x1; float x2; })_web_drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withAttributes:(id)arg3;
- (struct CGSize { float x1; float x2; })_web_sizeInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withAttributes:(id)arg2;
- (struct CGSize { float x1; float x2; })_web_drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withAttributes:(id)arg2;
- (id)_webkit_stringByTrimmingWhitespace;
- (id)_web_stringByAbbreviatingWithTildeInPath;
- (id)_web_stringByStrippingReturnCharacters;
- (BOOL)_webkit_hasCaseInsensitiveSuffix:(id)arg1;
- (BOOL)_webkit_hasCaseInsensitiveSubstring:(id)arg1;
- (id)_webkit_filenameByFixingIllegalCharacters;
- (id)_webkit_stringByCollapsingNonPrintingCharacters;
- (id)_webkit_stringByCollapsingWhitespaceCharacters;
- (BOOL)_webkit_isCaseInsensitiveEqualToString:(id)arg1;
- (BOOL)_webkit_hasCaseInsensitivePrefix:(id)arg1;
- (id)_web_capitalizeRFC822HeaderFieldName;
- (BOOL)_web_isUserVisibleURL;
- (id)_web_decodeHostName;
- (id)_web_encodeHostName;
- (BOOL)_webkit_looksLikeAbsoluteURL;
- (id)_webkit_URLFragment;
- (BOOL)_web_hostNameNeedsEncodingWithRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg1;
- (BOOL)_web_hostNameNeedsDecodingWithRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg1;
- (id)_web_encodeHostNameWithRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg1;
- (id)_web_decodeHostNameWithRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg1;
- (BOOL)_webkit_isJavaScriptURL;
- (id)_webkit_scriptIfJavaScriptURL;
- (BOOL)_webkit_isFileURL;
- (BOOL)_webkit_isFTPDirectoryURL;
- (id)_webkit_stringByReplacingValidPercentEscapes;
- (id)_web_mapHostNameWithRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg1 encode:(BOOL)arg2 makeString:(BOOL)arg3;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })_webkit_rangeOfURLScheme;
- (id)_webkit_unescapedQueryValue;
- (id)_webkit_queryKeysAndValues;
- (id)_webkit_HTTPStyleLanguageCode;
- (id)_initWithUTF8String:(const char *)arg1 maxLength:(NSUInteger)arg2;
- (struct CGSize { float x1; float x2; })sizeWithFont:(id)arg1;
- (struct CGSize { float x1; float x2; })sizeWithFont:(id)arg1 forWidth:(float)arg2 lineBreakMode:(NSInteger)arg3;
- (struct CGSize { float x1; float x2; })sizeWithFont:(id)arg1 forWidth:(float)arg2 lineBreakMode:(NSInteger)arg3 letterSpacing:(float)arg4;
- (struct CGSize { float x1; float x2; })drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 withFont:(id)arg2;
- (struct CGSize { float x1; float x2; })drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withFont:(id)arg3 lineBreakMode:(NSInteger)arg4;
- (struct CGSize { float x1; float x2; })drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withFont:(id)arg3 lineBreakMode:(NSInteger)arg4 letterSpacing:(float)arg5;
- (struct CGSize { float x1; float x2; })drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withFont:(id)arg3 lineBreakMode:(NSInteger)arg4 letterSpacing:(float)arg5 includeEmoji:(BOOL)arg6;
- (id)stringWithFont:(id)arg1 forWidth:(float)arg2 lineBreakMode:(NSInteger)arg3;
- (struct CGSize { float x1; float x2; })sizeWithFont:(id)arg1 constrainedToSize:(struct CGSize { float x1; float x2; })arg2;
- (struct CGSize { float x1; float x2; })sizeWithFont:(id)arg1 constrainedToSize:(struct CGSize { float x1; float x2; })arg2 lineBreakMode:(NSInteger)arg3;
- (struct CGSize { float x1; float x2; })sizeWithFont:(id)arg1 constrainedToSize:(struct CGSize { float x1; float x2; })arg2 lineBreakMode:(NSInteger)arg3 lineSpacing:(NSInteger)arg4;
- (struct CGSize { float x1; float x2; })drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(id)arg2;
- (struct CGSize { float x1; float x2; })drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(NSInteger)arg3;
- (struct CGSize { float x1; float x2; })drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(NSInteger)arg3 alignment:(NSInteger)arg4;
- (struct CGSize { float x1; float x2; })drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(NSInteger)arg3 alignment:(NSInteger)arg4 lineSpacing:(NSInteger)arg5;
- (struct CGSize { float x1; float x2; })drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(NSInteger)arg3 alignment:(NSInteger)arg4 lineSpacing:(NSInteger)arg5 includeEmoji:(BOOL)arg6;
- (struct CGSize { float x1; float x2; })_drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(NSInteger)arg3 alignment:(NSInteger)arg4 lineSpacing:(NSInteger)arg5 includeEmoji:(BOOL)arg6 truncationRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg7;
- (struct CGSize { float x1; float x2; })sizeWithFont:(id)arg1 minFontSize:(float)arg2 actualFontSize:(float*)arg3 forWidth:(float)arg4 lineBreakMode:(NSInteger)arg5;
- (struct CGSize { float x1; float x2; })drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withFont:(id)arg3 fontSize:(float)arg4 lineBreakMode:(NSInteger)arg5 baselineAdjustment:(NSInteger)arg6 includeEmoji:(BOOL)arg7;
- (struct CGSize { float x1; float x2; })drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withFont:(id)arg3 fontSize:(float)arg4 lineBreakMode:(NSInteger)arg5 baselineAdjustment:(NSInteger)arg6;
- (struct CGSize { float x1; float x2; })drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withFont:(id)arg3 minFontSize:(float)arg4 actualFontSize:(float*)arg5 lineBreakMode:(NSInteger)arg6 baselineAdjustment:(NSInteger)arg7 includeEmoji:(BOOL)arg8;
- (struct CGSize { float x1; float x2; })drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withFont:(id)arg3 minFontSize:(float)arg4 actualFontSize:(float*)arg5 lineBreakMode:(NSInteger)arg6 baselineAdjustment:(NSInteger)arg7;
- (id)securedStringIncludingLastCharacter:(BOOL)arg1;
- (struct CGSize { float x1; float x2; })sizeForWidth:(float)arg1 withAttributes:(id)arg2;
- (struct CGSize { float x1; float x2; })drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withAttributes:(id)arg3;
- (struct CGSize { float x1; float x2; })sizeInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withAttributes:(id)arg2;
- (struct CGSize { float x1; float x2; })drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withAttributes:(id)arg2;
- (id)stringByStandardizingWhitespace;
- (id)stringByReplacingCharactersInSet:(struct __CFCharacterSet { }*)arg1 withCharacter:(unsigned long)arg2;
- (BOOL)endsSentence;
- (BOOL)endsWord;
- (BOOL)isLeftAssociative;
- (BOOL)isTripledPunctuation;
- (BOOL)isSpaceOrReturn;
- (BOOL)isSpace;
- (BOOL)looksLikeEmailAddress;
- (BOOL)looksLikeNumberInput;
- (BOOL)looksLikeURL;
- (BOOL)containsSubstring:(id)arg1;
- (NSUInteger)editDistanceFrom:(id)arg1;
- (BOOL)isPlainSpace;
- (BOOL)isDelete;
- (BOOL)isNewlineOrReturn;
- (id)stringByTrimmingLastCharacter;
- (BOOL)isNaturallyRTL;
- (id)stringByTrimmingCharactersInCFCharacterSet:(struct __CFCharacterSet { }*)arg1;
- (id)stringByReplacingCharacter:(unsigned long)arg1 withCharacter:(unsigned long)arg2;
- (id)unescapedQueryValue;
- (id)queryKeysAndValues;
- (id)stringByStrippingLeadingAndTrailingWhitespace;
- (void)drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 withStyle:(id)arg2;
- (void)drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withStyle:(id)arg2;
- (void)drawMarkupAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)drawMarkupInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (struct CGSize { float x1; float x2; })sizeWithStyle:(id)arg1 forWidth:(float)arg2;
- (struct CGSize { float x1; float x2; })sizeWithMarkupForWidth:(float)arg1;
- (void)setStringDrawingOrigin:(struct CGPoint { float x1; float x2; })arg1;
- (void)clearStringDrawingOrigin;
- (struct CGSize { float x1; float x2; })sizeWithFont:(id)arg1 forWidth:(float)arg2 ellipsis:(NSInteger)arg3;
- (struct CGSize { float x1; float x2; })drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withFont:(id)arg3 ellipsis:(NSInteger)arg4;
- (struct CGSize { float x1; float x2; })drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withFont:(id)arg3 fontSize:(float)arg4 ellipsis:(NSInteger)arg5 baselineAdjustment:(NSInteger)arg6;
- (struct CGSize { float x1; float x2; })drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 forWidth:(float)arg2 withFont:(id)arg3 minFontSize:(float)arg4 actualFontSize:(float*)arg5 ellipsis:(NSInteger)arg6 baselineAdjustment:(NSInteger)arg7;
- (struct CGSize { float x1; float x2; })drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(id)arg2 ellipsis:(NSInteger)arg3;
- (struct CGSize { float x1; float x2; })drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(id)arg2 ellipsis:(NSInteger)arg3 alignment:(NSInteger)arg4;
- (struct CGSize { float x1; float x2; })sizeInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(id)arg2 ellipsis:(NSInteger)arg3;
- (struct CGSize { float x1; float x2; })sizeInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(id)arg2;
- (struct CGSize { float x1; float x2; })sizeWithFont:(id)arg1 minFontSize:(float)arg2 actualFontSize:(float*)arg3 forWidth:(float)arg4 ellipsis:(NSInteger)arg5;
- (struct CGSize { float x1; float x2; })drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withFont:(id)arg2;
- (id)_uikit_stringByTrimmingWhitespaceAndNewlines;
- (id)MCSafeFilenameHash;
- (id)MCSafeFilenameHashWithExtension:(id)arg1;
- (id)MCSHA256DigestWithSalt;
- (id)MCAppendDeviceName;
- (id)MCAppendGreenteaSuffix;
- (NSInteger)abCompare:(id)arg1;
- (BOOL)isDirectory;
- (NSUInteger)hexValue;
- (NSInteger)localizedCompareToString:(id)arg1;
- (BOOL)localizedHasPrefix:(id)arg1 caseSensitive:(BOOL)arg2;
- (id)stringByRemovingURLEscapes;
- (id)stringByAddingURLEscapes;
- (id)urlFromString;
- (id)stringWithDefaultServerIfNeeded:(id)arg1;
- (BOOL)isICQ;
- (BOOL)isICQorPhone;
- (id)stringByResolvingAndStandardizingPath;
- (id)commaSeparatedComponents;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })rangeOfNewlineInRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg1;
- (id)stringByRemovingWhitespace;
- (id)uniqueSavePath;
- (id)stringByStrippingControlCharacters;
- (BOOL)roomNameIsProbablyAutomaticallyGenerated;
- (id)trimmedString;
- (BOOL)isPhone;
- (NSUInteger)unsignedIntValue;
- (BOOL)isEqualToIgnoringCase:(id)arg1;
- (id)stringByRemovingCharactersFromSet:(id)arg1;
- (id)equivalentEmailAddressForScreenName;
- (id)mobileMeDomain;
- (BOOL)hasMobileMeSuffix;
- (id)stripMobileMSuffixIfPresent;
- (id)_FTIDFromEmail;
- (NSInteger)_FTIDType;
- (id)_FTIDFromPhoneNumber;
- (id)_FTDataFromBase64String;
- (id)_FTDataFromHexString;
- (id)_FTStripFTIDPrefix;
- (NSInteger)_FTBestGuessFTIDType;
- (id)_FTIDFromFTIDType:(NSInteger)arg1;
- (NSUInteger)countOfStringOccurrences:(id)arg1;
- (id)commonNonWordBreakingPrefixWithString:(id)arg1 options:(NSUInteger)arg2;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })_rangeWithoutInsignificantPrefix:(BOOL)arg1 andCharacters:(BOOL)arg2;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })rangeWithoutInsignificantPrefixAndCharacters;
- (id)_copyWithoutInsignificantPrefix:(BOOL)arg1 andCharacters:(BOOL)arg2;
- (id)copyWithoutInsignificantPrefixAndCharacters;
- (id)copyWithoutInsignificantCharacters;
- (NSInteger)compareIgnoringInsignificantPrefixAndCharacters:(id)arg1;
- (NSInteger)cpRecordIDValue;
- (long)countOfSQLBindingTokens;
- (id)stringByResolvingSQLBindingTokensWithBindings:(id)arg1;
- (id)displayableStringByTrimmingPrefixString:(id)arg1;
- (id)displayableStringByStrippingOffCommonPrefixWithString:(id)arg1;
- (id)stringByQuotingString;
- (id)stringByEscapingDoubleQuotes;
- (BOOL)destinationIdIsPhoneNumber;
- (BOOL)destinationIdIsEmailAddress;
- (id)sqliteEscapedString;
- (NSInteger)_caseInsensitiveNumericCompare:(id)arg1;
- (id)_ICSStringForProperyValue;
- (id)_ICSStringForParameterValue;
- (id)_ICSStringForParameterQuotedValue;
- (void)_ICSStringWithOptions:(NSUInteger)arg1 appendingToString:(id)arg2;
- (id)stringMetricsForDrawingInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 usingFont:(struct __GSFont { }*)arg2 ellipsisStyle:(NSInteger)arg3 flowingFromX:(float)arg4 lastLineEnd:(struct CGPoint { float x1; float x2; }*)arg5 startOnSecondLineIfPossible:(BOOL)arg6;
- (void)drawUsingMetrics:(id)arg1 inRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 usingFont:(struct __GSFont { }*)arg3 ellipsisStyle:(NSInteger)arg4 firstLineX:(float)arg5;
- (void)drawUsingMetrics:(id)arg1 inRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 usingFont:(struct __GSFont { }*)arg3 ellipsisStyle:(NSInteger)arg4 firstLineX:(float)arg5 strikethrough:(BOOL)arg6;
- (BOOL)_attendeeAppearsToBeAnInitial;
- (id)_attendeeTrimCommasSpacesQuotes;
- (void)attendeeFirstName:(id*)arg1 middleName:(id*)arg2 lastName:(id*)arg3 extension:(id*)arg4;
- (id)mf_copyUncommentedAddress;
- (id)mf_uncommentedAddressRespectingGroups;
- (id)mf_copyAddressComment;
- (void)mf_firstName:(id*)arg1 middleName:(id*)arg2 lastName:(id*)arg3 extension:(id*)arg4;
- (BOOL)mf_appearsToBeAnInitial;
- (id)mf_trimCommasSpacesQuotes;
- (BOOL)mf_isLegalCommentedEmailAddress;
- (BOOL)mf_isLegalEmailAddress;
- (id)mf_addressComment;
- (id)mf_uncommentedAddress;
- (id)mf_addressDomain;
- (BOOL)mf_isEqualToAddress:(id)arg1;
- (id)_mf_bestMimeCharset:(id)arg1;
- (id)mf_bestMimeCharsetUsingHint:(unsigned long)arg1;
- (id)mf_bestMimeCharset;
- (id)mf_encodedHeaderDataWithEncodingHint:(unsigned long)arg1;
- (id)mf_decodeMimeHeaderValueWithCharsetHint:(id)arg1;
- (NSInteger)mf_caseInsensitiveCompareExcludingXDash:(id)arg1;
- (id)mf_dataUsingEncoding:(NSUInteger)arg1 allowLossyConversion:(BOOL)arg2;
- (id)mf_dataUsingEncoding:(NSUInteger)arg1;
- (const void*)mf_lossyDefaultCStringBytes;
- (id)stringByURLQuoting;
- (id)stringByAddingPercentEscapesForUsername;
- (id)stringByRemovingPercentEscapesForUsername;
- (id)appendSlashIfNeeded;
- (id)removeSlashIfNeeded;
- (id)stringByURLEscapingPathComponent;
- (id)mf_convertFromFlowedText:(NSUInteger)arg1;
- (NSUInteger)mf_lineBreakBeforeIndex:(NSUInteger)arg1 withinRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg2;
- (NSUInteger)mf_nextWordFromIndex:(NSUInteger)arg1 forward:(BOOL)arg2;
- (id)mf_stringByLocalizingReOrFwdPrefix;
- (NSUInteger)mf_subjectPrefixLength;
- (id)mf_MD5Digest;
- (id)mf_messageIDSubstring;
- (id)mf_encodedMessageID;
- (id)mf_encodedMessageIDString;
- (id)mf_uniqueFilenameWithRespectToFilenames:(id)arg1;
- (id)mf_componentsSeparatedByPattern:(id)arg1;
- (id)mf_stringByEscapingForXML;
- (id)mf_stringByEscapingHTMLCodes;
- (id)mf_stringWithNoExtraSpaces;
- (id)mf_fileSystemString;
- (id)mf_betterStringByResolvingSymlinksInPath;
- (BOOL)mf_isSubdirectoryOfPath:(id)arg1;
- (BOOL)mf_makeDirectoryWithMode:(NSInteger)arg1;
- (id)mf_stringByReallyAbbreviatingWithTildeInPath;
- (id)quotedString;
- (id)stringByAddingPercentEscapesIncludingReservedCharacters;
- (id)cacheKeyRepresenation;
- (id)unformattedPhoneNumber;
- (BOOL)_shouldUseDefaultFirstResponder;
- (BOOL)_shouldUseNextFirstResponder;
- (BOOL)_shouldUseKeyWindowStack;
- (id)linkProperties;
- (NSInteger)emojiCharacterCount;
- (BOOL)containsEmoji;
- (id)stringByRemovingPercentEscapesForHREF;
- (id)stringByAddingPercentEscapesForHREF;
- (id)initWithNameSpace:(const char *)arg1 elementName:(const char *)arg2;
- (id)stringByXMLQuoting;
- (id)stringByXMLUnquoting;
- (id)stringByURLQuotingPaths;
- (id)mimeAnalysis;
- (id)stringByURLQuoting;
- (id)stringByURLUnquoting;
- (id)_createCsvRows:(NSUInteger*)arg1 usingDelimiter:(id)arg2 columnCountIsConstant:(BOOL*)arg3;
- (id)createCsvRows:(NSUInteger*)arg1;
- (double)oi_sizeWithFontName:(id)arg1 size:(NSInteger)arg2;
- (double)oi_realSizeWithFontName:(id)arg1 size:(NSInteger)arg2 bold:(/* Warning: Unrecognized filer type: 'B' using 'void*' */ void*)arg3 italic:(/* Warning: Unrecognized filer type: 'B' using 'void*' */ void*)arg4;
     /* Encoded args for previous method: d24@0:4@8i12B16B20 */

- (struct _NSRange { NSUInteger x1; NSUInteger x2; })oi_rangeOfCharactersFromSet:(id)arg1 index:(NSInteger)arg2;
- (double)oi_sizeWithFontName:(id)arg1 size:(NSInteger)arg2 bold:(/* Warning: Unrecognized filer type: 'B' using 'void*' */ void*)arg3 italic:(/* Warning: Unrecognized filer type: 'B' using 'void*' */ void*)arg4;
     /* Encoded args for previous method: d24@0:4@8i12B16B20 */

- (id)initWithXmlString:(const char *)arg1;
- (id)initWithValueOfXmlAttribute:(struct _xmlAttr { void *x1; NSInteger x2; char *x3; struct _xmlNode {} *x4; struct _xmlNode {} *x5; struct _xmlNode {} *x6; struct _xmlAttr {} *x7; struct _xmlAttr {} *x8; struct _xmlDoc {} *x9; struct _xmlNs {} *x10; NSInteger x11; void *x12; }*)arg1;
- (id)initFromXmlNode:(struct _xmlNode { void *x1; NSInteger x2; char *x3; struct _xmlNode {} *x4; struct _xmlNode {} *x5; struct _xmlNode {} *x6; struct _xmlNode {} *x7; struct _xmlNode {} *x8; struct _xmlDoc {} *x9; struct _xmlNs {} *x10; char *x11; struct _xmlAttr {} *x12; struct _xmlNs {} *x13; void *x14; unsigned short x15; unsigned short x16; }*)arg1 ns:(const char *)arg2 attributeName:(const char *)arg3;
- (id)initWithContentOfXmlNode:(struct _xmlNode { void *x1; NSInteger x2; char *x3; struct _xmlNode {} *x4; struct _xmlNode {} *x5; struct _xmlNode {} *x6; struct _xmlNode {} *x7; struct _xmlNode {} *x8; struct _xmlDoc {} *x9; struct _xmlNs {} *x10; char *x11; struct _xmlAttr {} *x12; struct _xmlNs {} *x13; void *x14; unsigned short x15; unsigned short x16; }*)arg1;
- (id)componentsSeparatedByWhitespace;
- (const char *)xmlString;
- (id)stringByFixingSymbolCharacters;
- (BOOL)startsWithString:(id)arg1;
- (id)initWithXmlChars:(const char *)arg1;
- (id)initFromXmlNode:(struct _xmlNode { void *x1; NSInteger x2; char *x3; struct _xmlNode {} *x4; struct _xmlNode {} *x5; struct _xmlNode {} *x6; struct _xmlNode {} *x7; struct _xmlNode {} *x8; struct _xmlDoc {} *x9; struct _xmlNs {} *x10; char *x11; struct _xmlAttr {} *x12; struct _xmlNs {} *x13; void *x14; unsigned short x15; unsigned short x16; }*)arg1 attribute:(const char *)arg2 ns:(const struct _xmlNs { struct _xmlNs {} *x1; NSInteger x2; char *x3; char *x4; void *x5; struct _xmlDoc {} *x6; }*)arg3;
- (id)createStringBySubstitutingCharactersCFNumberFormatterDoesntUnderstand;
- (BOOL)isNumberFormatPattern;
- (id)createRangesOfEscapedCharactersInNumberFormatPattern;
- (id)stringByRemovingEscapedCharactersFromNumberFormatPattern;
- (NSInteger)indexOfNumberFormatSubpatternSeparator;
- (id)positiveSubpatternOfNumberFormatPattern;
- (id)negativeSubpatternOfNumberFormatPattern;
- (id)numberPortionOfNumberFormatSubpattern;
- (NSInteger)indexOfLastNonSuffixCharacterInNumberFormatSubpattern;
- (id)suffixOfNumberFormatSubpattern;
- (NSInteger)indexOfFirstNonPrefixCharacterInNumberFormatSubpattern;
- (id)prefixOfNumberFormatSubpattern;
- (id)createStringBySubstitutingCharactersCFNumberFormatterDoesntUnderstand;
- (BOOL)isNumberFormatPattern;
- (id)createRangesOfEscapedCharactersInNumberFormatPattern;
- (id)stringByRemovingEscapedCharactersFromNumberFormatPattern;
- (NSInteger)indexOfNumberFormatSubpatternSeparator;
- (id)positiveSubpatternOfNumberFormatPattern;
- (id)negativeSubpatternOfNumberFormatPattern;
- (id)numberPortionOfNumberFormatSubpattern;
- (NSInteger)indexOfLastNonSuffixCharacterInNumberFormatSubpattern;
- (id)suffixOfNumberFormatSubpattern;
- (NSInteger)indexOfFirstNonPrefixCharacterInNumberFormatSubpattern;
- (id)prefixOfNumberFormatSubpattern;
- (NSInteger*)cWideString;
- (id)initWithWideCString:(NSInteger*)arg1;
- (id)dataUsingWordEncoding:(NSInteger)arg1;
- (void)copyToOcText:(struct OcText { int (**x1)(); NSInteger x2; NSUInteger x3; NSUInteger x4; NSUInteger x5; char *x6; char *x7; /* Warning: Unrecognized filer type: 'B' using 'void*' */ void*x8; }*)arg1 encoding:(NSInteger)arg2;
     /* Encoded args for previous method: v16@0:4^{OcText=^^?iIII**B}8i12 */

- (NSInteger)languageTypeAtIndex:(NSUInteger)arg1 effectiveRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; }*)arg2;
- (id)initWithOcText:(const struct OcText { int (**x1)(); NSInteger x2; NSUInteger x3; NSUInteger x4; NSUInteger x5; char *x6; char *x7; /* Warning: Unrecognized filer type: 'B' using 'void*' */ void*x8; }*)arg1;
     /* Encoded args for previous method: @12@0:4r^{OcText=^^?iIII**B}8 */

- (id)initWithCsString:(const struct CsString { int (**x1)(); unsigned short *x2; NSUInteger x3; NSUInteger x4; }*)arg1;
- (void)copyToCsString:(struct CsString { int (**x1)(); unsigned short *x2; NSUInteger x3; NSUInteger x4; }*)arg1;
- (void)copyToOcText:(struct OcText { int (**x1)(); NSInteger x2; NSUInteger x3; NSUInteger x4; NSUInteger x5; char *x6; char *x7; /* Warning: Unrecognized filer type: 'B' using 'void*' */ void*x8; }*)arg1;
     /* Encoded args for previous method: v12@0:4^{OcText=^^?iIII**B}8 */

- (id)sqliteEscapedString;
- (id)threadDescription;
- (NSInteger)_brailleTableCompare:(id)arg1;
- (NSInteger)_brailleTableCompare:(id)arg1;
- (id)_withoutBracketedWords;
- (BOOL)_isWhitespace;
- (id)_firstWord;
- (id)_withoutExtraWhitespace;
- (id)_possibleURLsForForUserTypedString:(BOOL)arg1;
- (id)possibleURLPrefixesForUserTypedString;
- (id)possibleURLsForUserTypedString;
- (id)bestURLForUserTypedString;
- (id)stringBySubstitutingHTMLEntitiesForAmpersandAndAngleBrackets;
- (BOOL)isSyndicationScheme;
- (BOOL)isSyndicationURLString;
- (BOOL)isFeedURLString;
- (BOOL)isConfigProfileMIMEType;
- (NSInteger)compareDomain:(id)arg1;
- (id)canonicalQueryValue;
- (id)stringByStrippingEmojiCharacters;
- (id)newYouTubeVideoDescription;
- (id)escapedYouTubeSearchString;
- (id)youTubeTrimmedString;
- (id)stringByRemovingLTGT;
- (id)decodedWebSafeBase64Data;
- (id)copyUTF8StringOfLength:(NSUInteger)arg1;
- (BOOL)isSpecialCustomNumberFormatToken;
- (BOOL)isSpecialCustomNumberFormatTokenOfType:(NSInteger)arg1;
- (NSUInteger)numberOfDigitsInCustomNumberFormatIntegerToken;
- (BOOL)customFormatIntegerTokenUsesSeparator;
- (id)stringByInsertingGroupingSeparators;
- (NSUInteger)numberOfDigitsInCustomNumberFormatDecimalToken;
- (id)digitPlaceholderStringInDigitToken;
- (id)currencyCodeFromCustomNumberFormatCurrencyToken;
- (NSInteger)fractionAccuracyFromCustomNumberFormatFractionToken;
- (id)formatStringFromCustomNumberFormatScaleToken;
- (unsigned short)scaleCharacterInCustomNumberFormatScaleToken;
- (unsigned short)spaceCharacterInCustomNumberFormatSpaceToken;
- (id)createStringBySubstitutingCharactersCFNumberFormatterDoesntUnderstand;
- (BOOL)isNumberFormatPattern;
- (id)createRangesOfEscapedCharactersInNumberFormatPattern;
- (id)stringByRemovingEscapedCharactersFromNumberFormatPattern;
- (NSInteger)indexOfNumberFormatSubpatternSeparator;
- (id)positiveSubpatternOfNumberFormatPattern;
- (id)negativeSubpatternOfNumberFormatPattern;
- (id)numberPortionOfNumberFormatSubpattern;
- (NSInteger)indexOfLastNonSuffixCharacterInNumberFormatSubpattern;
- (id)suffixOfNumberFormatSubpattern;
- (NSInteger)indexOfFirstNonPrefixCharacterInNumberFormatSubpattern;
- (id)prefixOfNumberFormatSubpattern;

@end
