/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Foundation.framework/Foundation
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class NSString, NSDictionary;

@interface NSError : NSObject <NSCopying, NSCoding> {
    int _code;
    NSString *_domain;
    void *_reserved;
    NSDictionary *_userInfo;
}

@property(getter=_mapkit_isCLDenied,readonly) BOOL _mapkit_CLDenied;
@property(getter=_mapkit_isCLErrorNetwork,readonly) BOOL _mapkit_CLErrorNetwork;
@property(getter=_mapkit_isCLHeadingFailure,readonly) BOOL _mapkit_CLHeadingFailure;
@property(getter=_mapkit_isCLLocationUnknown,readonly) BOOL _mapkit_CLLocationUnknown;

+ (id)MCErrorWithDomain:(id)arg1 code:(int)arg2 description:(id)arg3 errorType:(id)arg4;
+ (id)MCErrorWithDomain:(id)arg1 code:(int)arg2 descriptionArray:(id)arg3 errorType:(id)arg4;
+ (id)MCErrorWithDomain:(id)arg1 code:(int)arg2 descriptionArray:(id)arg3 suggestion:(id)arg4 USEnglishSuggestion:(id)arg5 underlyingError:(id)arg6 errorType:(id)arg7;
+ (id)MCErrorWithDomain:(id)arg1 code:(int)arg2 descriptionArray:(id)arg3 underlyingError:(id)arg4 errorType:(id)arg5;
+ (id)_defaultDescriptionForCode:(int)arg1;
+ (id)_mapkit_unavailableError;
+ (void)_registerBuiltInFormatters;
+ (void)_registerFormatter:(int (*)())arg1 forErrorKey:(id)arg2 parameters:(const char *)arg3;
+ (void)_registerWebKitErrors;
+ (id)_webKitErrorWithCode:(int)arg1 failingURL:(id)arg2;
+ (id)_webKitErrorWithDomain:(id)arg1 code:(int)arg2 URL:(id)arg3;
+ (void)_web_addErrorsWithCodesAndDescriptions:(id)arg1 inDomain:(id)arg2;
+ (id)_web_errorWithDomain:(id)arg1 code:(int)arg2 URL:(id)arg3;
+ (id)_web_errorWithDomain:(id)arg1 code:(int)arg2 failingURL:(id)arg3;
+ (void)_webkit_addErrorsWithCodesAndDescriptions:(id)arg1 inDomain:(id)arg2;
+ (id)_webkit_errorWithDomain:(id)arg1 code:(int)arg2 URL:(id)arg3;
+ (id)errorWithCADResult:(int)arg1;
+ (id)errorWithCode:(int)arg1 description:(id)arg2;
+ (id)errorWithCode:(int)arg1;
+ (id)errorWithDomain:(id)arg1 code:(int)arg2 localizedDescription:(id)arg3;
+ (id)errorWithDomain:(id)arg1 code:(int)arg2 userInfo:(id)arg3;
+ (id)errorWithStreamDomain:(long)arg1 code:(long)arg2 localizedDescription:(id)arg3;
+ (id)genericErrorWithFile:(const char *)arg1 function:(const char *)arg2 lineNumber:(int)arg3;
+ (id)serverErrorForCode:(int)arg1 withReason:(id)arg2;
+ (id)serverErrorForCode:(int)arg1 withUserInfo:(id)arg2;
+ (id)userErrorForCode:(int)arg1 underlyingError:(id)arg2;
+ (id)userErrorForServerError:(id)arg1;

- (BOOL)MCContainsErrorDomain:(id)arg1 code:(int)arg2;
- (id)MCErrorType;
- (id)MCFindPrimaryError;
- (id)MCMakePrimaryError;
- (id)MCUSEnglishDescription;
- (id)MCUSEnglishSuggestion;
- (id)MCVerboseDescription;
- (unsigned long)_cfTypeID;
- (id)_cocoaErrorString:(id)arg1 fromBundle:(id)arg2 tableName:(id)arg3;
- (id)_cocoaErrorString:(id)arg1;
- (id)_cocoaErrorStringWithKind:(id)arg1 variant:(id)arg2;
- (id)_cocoaErrorStringWithKind:(id)arg1;
- (int)_collectApplicableUserInfoFormatters:(struct { /* ? */ }**)arg1 max:(int)arg2;
- (id)_formatCocoaErrorString:(id)arg1 parameters:(const char *)arg2 applicableFormatters:(struct { /* ? */ }**)arg3 count:(int)arg4;
- (id)_initWithPluginErrorCode:(int)arg1 contentURL:(id)arg2 pluginPageURL:(id)arg3 pluginName:(id)arg4 MIMEType:(id)arg5;
- (id)_mapkit_error;
- (BOOL)_mapkit_isCLDenied;
- (BOOL)_mapkit_isCLErrorNetwork;
- (BOOL)_mapkit_isCLHeadingFailure;
- (BOOL)_mapkit_isCLLocationUnknown;
- (struct __CFString { }*)_retainedUserInfoCallBackForKey:(id)arg1;
- (BOOL)_web_errorIsInDomain:(id)arg1;
- (id)_web_failingURL;
- (id)_web_initWithDomain:(id)arg1 code:(int)arg2 failingURL:(id)arg3;
- (id)_web_initWithDomain_nowarn:(id)arg1 code:(int)arg2 URL:(id)arg3;
- (id)_web_localizedDescription;
- (id)_webkit_initWithDomain:(id)arg1 code:(int)arg2 URL:(id)arg3;
- (int)code;
- (id)copyPropertyListEncoding;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (id)domain;
- (void)encodeWithCoder:(id)arg1;
- (id)errorBySettingFatalError:(BOOL)arg1;
- (void)finalize;
- (id)helpAnchor;
- (id)initWithCoder:(id)arg1;
- (id)initWithDomain:(id)arg1 code:(int)arg2 userInfo:(id)arg3;
- (id)initWithPropertyListEncoding:(id)arg1;
- (BOOL)isConnectivityError;
- (BOOL)isEqual:(id)arg1 compareUserInfo:(BOOL)arg2;
- (BOOL)isEqualToError:(id)arg1;
- (BOOL)isExpiredPasswordError;
- (BOOL)isFatalError;
- (BOOL)isInvalidSubscriberError;
- (BOOL)isNewPasswordError;
- (BOOL)isPasswordMismatchError;
- (BOOL)isSecurityError;
- (BOOL)isServerError;
- (BOOL)isStreamDomain:(long)arg1 error:(long)arg2;
- (id)localizedDescription;
- (id)localizedFailureReason;
- (id)localizedRecoveryOptions;
- (id)localizedRecoverySuggestion;
- (BOOL)mf_isUserCancelledError;
- (id)mf_moreInfo;
- (id)mf_shortDescription;
- (BOOL)mf_shouldBeReportedToUser;
- (id)recoveryAttempter;
- (BOOL)shouldPresentErrorForTaskType:(int)arg1;
- (id)userInfo;

@end
