/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/CoreMotion.framework/CoreMotion
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class CMGyroData, CMMagnetometerData, CMDeviceMotion, CMAccelerometerData;

@interface CMMotionManager : NSObject  {
    id _internal;
}

@property double magnetometerUpdateInterval;
@property(getter=isMagnetometerAvailable,readonly) BOOL magnetometerAvailable;
@property(getter=isMagnetometerActive,readonly) BOOL magnetometerActive;
@property(readonly) CMMagnetometerData * magnetometerData;
@property BOOL showsDeviceMovementDisplay;
@property(readonly) CMDeviceMotion * deviceMotion;
@property double deviceMotionUpdateInterval;
@property(getter=isDeviceMotionActive,readonly) BOOL deviceMotionActive;
@property(getter=isDeviceMotionAvailable,readonly) BOOL deviceMotionAvailable;
@property(readonly) CMGyroData * gyroData;
@property double gyroUpdateInterval;
@property(getter=isGyroActive,readonly) BOOL gyroActive;
@property(getter=isGyroAvailable,readonly) BOOL gyroAvailable;
@property(readonly) CMAccelerometerData * accelerometerData;
@property double accelerometerUpdateInterval;
@property(getter=isAccelerometerActive,readonly) BOOL accelerometerActive;
@property(getter=isAccelerometerAvailable,readonly) BOOL accelerometerAvailable;

+ (void)setAllowInBackground:(BOOL)arg1;

- (BOOL)isAccelerometerAvailable;
- (BOOL)isAccelerometerActive;
- (double)accelerometerUpdateInterval;
- (void)startAccelerometerUpdatesToQueue:(id)arg1 withHandler:(id)arg2;
- (BOOL)isGyroAvailable;
- (BOOL)isGyroActive;
- (void)setGyroUpdateInterval:(double)arg1;
- (double)gyroUpdateInterval;
- (id)gyroData;
- (void)startGyroUpdates;
- (void)startGyroUpdatesToQueue:(id)arg1 withHandler:(id)arg2;
- (void)stopGyroUpdates;
- (BOOL)isDeviceMotionActive;
- (double)deviceMotionUpdateInterval;
- (void)startDeviceMotionUpdatesToQueue:(id)arg1 withHandler:(id)arg2;
- (BOOL)isMagnetometerAvailable;
- (BOOL)isMagnetometerActive;
- (void)setMagnetometerUpdateInterval:(double)arg1;
- (double)magnetometerUpdateInterval;
- (id)magnetometerData;
- (void)startMagnetometerUpdates;
- (void)startMagnetometerUpdatesToQueue:(id)arg1 withHandler:(id)arg2;
- (void)stopMagnetometerUpdates;
- (void)setShowsDeviceMovementDisplay:(BOOL)arg1;
- (BOOL)showsDeviceMovementDisplay;
- (void)dismissDeviceMovementDisplay;
- (void)onAccelerometer:(const struct Sample { double x1; struct { float x_2_1_1; float x_2_1_2; float x_2_1_3; } x2; }*)arg1;
- (void)onGyro:(const struct Sample { double x1; struct { float x_2_1_1; float x_2_1_2; float x_2_1_3; } x2; boolx3; }*)arg1;
- (void)onDeviceMotion:(const struct Sample { double x1; struct { struct { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_2_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; } x_2_1_2; struct { float x_3_2_1; float x_3_2_2; float x_3_2_3; } x_2_1_3; } x2; boolx3; }*)arg1;
- (void)onMagnetometer:(const struct Sample { double x1; struct { float x_2_1_1; float x_2_1_2; float x_2_1_3; } x2; }*)arg1;
- (void)dummySelector:(id)arg1;
- (id)initPrivate;
- (void)willResignActive:(id)arg1;
- (void)didBecomeActive:(id)arg1;
- (void)deallocPrivate;
- (void)setAccelerometerUpdateIntervalPrivate:(double)arg1;
- (void)startAccelerometerUpdatesPrivateToQueue:(id)arg1 withHandler:(id)arg2;
- (void)stopAccelerometerUpdatesPrivate;
- (void)setGyroUpdateIntervalPrivate:(double)arg1;
- (void)startGyroUpdatesPrivateToQueue:(id)arg1 withHandler:(id)arg2;
- (void)stopGyroUpdatesPrivate;
- (void)setDeviceMotionUpdateIntervalPrivate:(double)arg1;
- (void)startDeviceMotionUpdatesPrivateToQueue:(id)arg1 withHandler:(id)arg2;
- (void)stopDeviceMotionUpdatesPrivate;
- (void)setGyroDataCallback:(int (*)())arg1 info:(void*)arg2 interval:(double)arg3;
- (void)setMagnetometerUpdateIntervalPrivate:(double)arg1;
- (void)startMagnetometerUpdatesPrivateToQueue:(id)arg1 withHandler:(id)arg2;
- (void)stopMagnetometerUpdatesPrivate;
- (void)setShowsDeviceMovementDisplayPrivate:(BOOL)arg1;
- (void)willResignActivePrivate:(id)arg1;
- (void)didBecomeActivePrivate:(id)arg1;
- (id)init;
- (void)dealloc;
- (void)setAccelerometerDataCallback:(int (*)())arg1 info:(void*)arg2 interval:(double)arg3;
- (void)setDeviceMotionCallback:(int (*)())arg1 info:(void*)arg2 interval:(double)arg3 fsync:(BOOL)arg4 bandwidth:(int)arg5;
- (void)stopDeviceMotionUpdates;
- (void)stopAccelerometerUpdates;
- (void)setDeviceMotionUpdateInterval:(double)arg1;
- (void)setAccelerometerUpdateInterval:(double)arg1;
- (BOOL)isDeviceMotionAvailable;
- (void)startDeviceMotionUpdates;
- (void)startAccelerometerUpdates;
- (id)deviceMotion;
- (id)accelerometerData;

@end
