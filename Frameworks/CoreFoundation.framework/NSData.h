/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@interface NSData : NSObject <NSCopying, NSMutableCopying, NSCoding> {
     /* Encoded args for previous method: @12@0:4r^{OcBinaryData=^^?IIII*B^{SsrwOOStream}}8 */
}

+ (id)MCDataWithCFData:(struct __CFData { }*)arg1;
+ (id)MCDataWithHexString:(id)arg1;
+ (id)allocWithZone:(struct _NSZone { }*)arg1;
+ (id)data;
+ (id)dataWithBytes:(const void*)arg1 length:(NSUInteger)arg2;
+ (id)dataWithBytesNoCopy:(void*)arg1 length:(NSUInteger)arg2 freeWhenDone:(BOOL)arg3;
+ (id)dataWithBytesNoCopy:(void*)arg1 length:(NSUInteger)arg2;
+ (id)dataWithCertificate:(struct __SecCertificate { }*)arg1;
+ (id)dataWithContentsOfFile:(id)arg1 options:(NSUInteger)arg2 error:(id*)arg3;
+ (id)dataWithContentsOfFile:(id)arg1;
+ (id)dataWithContentsOfMappedFile:(id)arg1;
+ (id)dataWithContentsOfURL:(id)arg1 options:(NSUInteger)arg2 error:(id*)arg3;
+ (id)dataWithContentsOfURL:(id)arg1;
+ (id)dataWithData:(id)arg1;
+ (id)dataWithHexString:(id)arg1 stringIsUppercase:(BOOL)arg2;
+ (id)dataWithHexString:(id)arg1;
+ (id)dataWithHexString:(id)arg1;
+ (id)dataWithRandomBytes:(NSUInteger)arg1;
+ (id)nsDataWithOcBinaryData:(const struct OcBinaryData { int (**x1)(); NSUInteger x2; NSUInteger x3; NSUInteger x4; NSUInteger x5; char *x6; /* Warning: Unrecognized filer type: 'B' using 'void*' */ void*x7; struct SsrwOOStream {} *x8; }*)arg1;

- (const struct CDXTicket { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; struct { unsigned char x_5_1_1[6]; unsigned short x_5_1_2; } x5; NSUInteger x6; unsigned char x7[0]; }*)CDXTicket;
- (id)CDXTicketExpirationDate;
- (BOOL)CDXTicketIsHolePunch;
- (BOOL)CDXTicketIsReflected;
- (BOOL)CDXTicketIsRelatedToTicket:(id)arg1;
- (BOOL)CDXTicketIsStub;
- (NSInteger)CDXTicketPCNT;
- (NSInteger)CDXTicketPID;
- (NSUInteger)CDXTicketRevision;
- (unsigned long long)CDXTicketSID;
- (id)CDXTicketTrimmed;
- (BOOL)CDXTicketWellFormed;
- (id)CRAM_MD5DataWithKey:(id)arg1;
- (id)CRAM_MD5HexStringWithKey:(id)arg1;
- (id)MCHexString;
- (id)SHA1Data;
- (id)SHA1HexString;
- (void)_ICSStringWithOptions:(NSUInteger)arg1 appendingToString:(id)arg2;
- (id)_adlib_inflate:(NSUInteger)arg1;
- (id)_asciiDescription;
- (BOOL)_bytesAreVM;
- (unsigned long)_cfTypeID;
- (id)_replaceCString:(const char *)arg1 withCString:(const char *)arg2;
- (id)_web_guessedMIMEType;
- (id)_web_guessedMIMETypeForExtension:(id)arg1;
- (id)_web_guessedMIMETypeForXML;
- (BOOL)_web_isCaseInsensitiveEqualToCString:(const char *)arg1;
- (NSInteger)_web_locationAfterFirstBlankLine;
- (id)_web_parseRFC822HeaderFields;
- (BOOL)_web_startsWithBlankLine;
- (id)_webkit_guessedMIMEType;
- (id)_webkit_guessedMIMETypeForXML;
- (id)_webkit_parseRFC822HeaderFields;
- (id)abDecodedUTF7;
- (id)abEncodeBase64DataBreakLines:(BOOL)arg1 allowSlash:(BOOL)arg2 padChar:(BOOL)arg3;
- (BOOL)abIsUTF16EntourageVCard;
- (id)abStringAtRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg1 inEncoding:(NSUInteger)arg2;
- (id)base64Decoded;
- (id)base64Encoded;
- (id)base64Encoding;
- (const void*)bytes;
- (struct __SecCertificate { }*)certificateFromData;
- (Class)classForCoder;
- (id)copyHexDescription;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (void)getBytes:(void*)arg1 length:(NSUInteger)arg2;
- (void)getBytes:(void*)arg1 range:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg2;
- (void)getBytes:(void*)arg1;
- (NSUInteger)hash;
- (id)hexString;
- (id)hexString;
- (id)hexStringOfBytes:(char *)arg1 withLength:(NSInteger)arg2;
- (id)hexStringValue;
- (id)initWithBase64Encoding:(id)arg1;
- (id)initWithBytes:(const void*)arg1 length:(NSUInteger)arg2;
- (id)initWithBytes:(void*)arg1 length:(NSUInteger)arg2 copy:(BOOL)arg3 freeWhenDone:(BOOL)arg4 bytesAreVM:(BOOL)arg5;
- (id)initWithBytesNoCopy:(void*)arg1 length:(NSUInteger)arg2 freeWhenDone:(BOOL)arg3;
- (id)initWithBytesNoCopy:(void*)arg1 length:(NSUInteger)arg2;
- (id)initWithCoder:(id)arg1;
- (id)initWithContentsOfFile:(id)arg1 error:(id*)arg2;
- (id)initWithContentsOfFile:(id)arg1 options:(NSUInteger)arg2 error:(id*)arg3;
- (id)initWithContentsOfFile:(id)arg1;
- (id)initWithContentsOfMappedFile:(id)arg1 error:(id*)arg2;
- (id)initWithContentsOfMappedFile:(id)arg1;
- (id)initWithContentsOfURL:(id)arg1 options:(NSUInteger)arg2 error:(id*)arg3;
- (id)initWithContentsOfURL:(id)arg1;
- (id)initWithData:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isEqualToData:(id)arg1;
- (BOOL)isNSData__;
- (NSUInteger)length;
- (id)lowercaseHexStringWithoutSpaces;
- (id)md5Digest;
- (id)mf_MD5Digest;
- (id)mf_copyHexString;
- (id)mf_dataByConvertingUnixNewlinesToNetwork;
- (id)mf_decodeBase64;
- (id)mf_decodeBase64InRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; }*)arg1;
- (id)mf_decodeModifiedBase64;
- (id)mf_decodeQuotedPrintableForText:(BOOL)arg1;
- (id)mf_decodeUuencoded;
- (id)mf_encodeBase64;
- (id)mf_encodeBase64HeaderData;
- (id)mf_encodeBase64WithoutLineBreaks;
- (id)mf_encodeBase64WithoutLineBreaksOrPadding;
- (id)mf_encodeModifiedBase64;
- (BOOL)mf_immutable;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })mf_rangeOfByteFromSet:(id)arg1 range:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg2;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })mf_rangeOfByteFromSet:(id)arg1;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })mf_rangeOfCString:(const char *)arg1 options:(NSUInteger)arg2 range:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg3;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })mf_rangeOfCString:(const char *)arg1 options:(NSUInteger)arg2;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })mf_rangeOfCString:(const char *)arg1;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })mf_rangeOfData:(id)arg1 options:(NSUInteger)arg2 range:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg3;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })mf_rangeOfRFC822HeaderData;
- (id)mf_subdataFromIndex:(NSUInteger)arg1;
- (id)mf_subdataToIndex:(NSUInteger)arg1;
- (id)mf_subdataWithRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg1;
- (struct CDXTicket { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; struct { unsigned char x_5_1_1[6]; unsigned short x_5_1_2; } x5; NSUInteger x6; unsigned char x7[0]; }*)mutableCDXTicket;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (unsigned long long)myHashHack;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })rangeOfData:(id)arg1 options:(NSUInteger)arg2 range:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg3;
- (id)sha1Digest;
- (id)subdataWithRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg1;
- (id)uppercaseHexStringWithoutSpaces;
- (id)webSafeBase64Data;
- (BOOL)writeToFile:(id)arg1 atomically:(BOOL)arg2 error:(id*)arg3;
- (BOOL)writeToFile:(id)arg1 atomically:(BOOL)arg2;
- (BOOL)writeToFile:(id)arg1 options:(NSUInteger)arg2 error:(id*)arg3;
- (BOOL)writeToURL:(id)arg1 atomically:(BOOL)arg2;
- (BOOL)writeToURL:(id)arg1 options:(NSUInteger)arg2 error:(id*)arg3;

@end
