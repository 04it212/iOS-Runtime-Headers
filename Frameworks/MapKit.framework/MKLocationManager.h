/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/MapKit.framework/MapKit
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class CLHeading, CLLocation, CLLocationManager, GEOLocation, GEOLocationShiftFunctionRequest, GEOLocationShiftFunctionResponse, MKTripRecorder, NSBundle, NSHashTable, NSMutableArray, NSString, NSTimer, RadiosPreferences;

@interface MKLocationManager : NSObject <CLLocationManagerDelegateInternal, PBRequesterDelegate, RadiosPreferencesDelegate> {
    double _applicationResumeTime;
    double _applicationSuspendTime;
    int _authorizationStatus;
    double _calculatingLocationStartTime;
    BOOL _chinaShiftEnabled;
    CLLocationManager *_clLocationManager;
    NSTimer *_coalesceTimer;
    BOOL _corrected;
    CLLocation *_delayedLocationToShift;
    NSBundle *_effectiveBundle;
    BOOL _enabled;
    double _expectedTimeTillNextUpdate;
    BOOL _hasCheckedChinaShiftEnabled;
    CLHeading *_heading;
    NSHashTable *_headingObservers;
    double _headingUpdateTime;
    BOOL _isLastLocationStale;
    BOOL _isRequestingShiftFunction;
    CLLocation *_lastLocation;
    double _lastLocationReportTime;
    double _lastLocationUpdateTime;
    double _locationAccuracyUpdateTime;
    id _locationCorrecter;
    NSHashTable *_locationObservers;
    BOOL _locationServicesPreferencesDialogEnabled;
    id _networkActivity;
    RadiosPreferences *_radiosPreferences;
    MKTripRecorder *_recorder;
    GEOLocationShiftFunctionResponse *_shiftFunction;
    int _shiftProvider;
    GEOLocationShiftFunctionRequest *_shiftRequest;
    BOOL _shouldThrottleHeading;
    int _staleWiFiStatus;
    CLHeading *_throttledHeading;
    BOOL _trackingHeading;
    BOOL _trackingLocation;
    NSString *_tripPath;
    NSMutableArray *_tripPaths;
    BOOL _useCourseForHeading;
    double _userLocationCacheDuration;
    int _wiFiStatus;
}

@property BOOL chinaShiftEnabled;
@property(getter=isCorrected) BOOL corrected;
@property(readonly) GEOLocation * currentLocation;
@property(retain) CLLocation * delayedLocationToShift;
@property double desiredAccuracy;
@property(retain) NSBundle * effectiveBundle;
@property(getter=isEnabled) BOOL enabled;
@property(readonly) double expectedGpsUpdateInterval;
@property double expectedTimeTillNextUpdate;
@property(readonly) GEOLocation * gridSnappedCurrentLocation;
@property(readonly) BOOL hasLocation;
@property(readonly) CLHeading * heading;
@property int headingOrientation;
@property(readonly) double headingUpdateTimeInterval;
@property(readonly) BOOL isAirplaneModeBlockingLocation;
@property(readonly) BOOL isHeadingServicesAvailable;
@property(readonly) BOOL isLastLocationStale;
@property(readonly) BOOL isLocationServicesApproved;
@property(readonly) BOOL isLocationServicesAvailable;
@property(readonly) BOOL isLocationServicesDenied;
@property(readonly) BOOL isLocationServicesEnabled;
@property(readonly) BOOL isLocationServicesPossiblyAvailable;
@property(readonly) BOOL isLocationServicesRestricted;
@property(readonly) BOOL isWiFiEnabled;
@property(readonly) CLLocation * lastLocation;
@property(readonly) int lastLocationSource;
@property(copy) id locationCorrecter;
@property(getter=isLocationServicesPreferencesDialogEnabled) BOOL locationServicesPreferencesDialogEnabled;
@property(copy) id networkActivity;
@property(getter=isPlayingTrip,readonly) BOOL playingTrip;
@property(getter=isRecordingTrip,readonly) BOOL recordingTrip;
@property(retain) GEOLocationShiftFunctionResponse * shiftFunction;
@property(retain) GEOLocationShiftFunctionRequest * shiftRequest;
@property BOOL shouldThrottleHeading;
@property(retain) CLHeading * throttledHeading;
@property(retain) NSString * tripPath;
@property(retain) NSMutableArray * tripPaths;
@property BOOL useCourseForHeading;
@property double userLocationCacheDuration;

+ (id)sharedLocationManager;

- (id)_applyChinaLocationShift:(id)arg1;
- (int)_authorizationStatus;
- (void)_countryProvidersDidChange:(id)arg1;
- (void)_createCLLocationManager;
- (BOOL)_isTimeToResetOnResume;
- (id)_radiosPreferences;
- (void)_reportHeadingFailureWithError:(id)arg1;
- (void)_reportHeadingSuccess;
- (void)_reportLocationFailureWithError:(id)arg1;
- (void)_reportLocationReset;
- (void)_reportLocationStatus:(SEL)arg1;
- (void)_reportLocationSuccess;
- (void)_setTrackingHeading:(BOOL)arg1;
- (void)_setTrackingLocation:(BOOL)arg1;
- (void)_startCoalescingUpdates:(int)arg1;
- (void)_stopCoalescingUpdates;
- (void)_updateAuthorizationStatus;
- (void)_updateWifiEnabled;
- (void)airplaneModeChanged;
- (void)applicationDidBecomeActive:(id)arg1;
- (void)applicationDidEnterBackground:(id)arg1;
- (void)applicationWillResignActive:(id)arg1;
- (BOOL)chinaShiftEnabled;
- (id)clLocationManager;
- (id)currentLocation;
- (void)dampenGPSLocationAccuracy:(id*)arg1 oldLocationSource:(int)arg2;
- (id)delayedLocationToShift;
- (double)desiredAccuracy;
- (void)dismissHeadingCalibrationDisplay;
- (BOOL)displayCoreLocationStats;
- (id)effectiveBundle;
- (double)expectedGpsUpdateInterval;
- (double)expectedTimeTillNextUpdate;
- (id)gridSnappedCurrentLocation;
- (BOOL)hasLocation;
- (id)heading;
- (int)headingOrientation;
- (double)headingUpdateTimeInterval;
- (id)init;
- (BOOL)isAirplaneModeBlockingLocation;
- (BOOL)isCorrected;
- (BOOL)isEnabled;
- (BOOL)isHeadingServicesAvailable;
- (BOOL)isLastLocationStale;
- (BOOL)isLocationServicesApproved;
- (BOOL)isLocationServicesAvailable;
- (BOOL)isLocationServicesDenied;
- (BOOL)isLocationServicesEnabled;
- (BOOL)isLocationServicesPossiblyAvailable:(id*)arg1;
- (BOOL)isLocationServicesPossiblyAvailable;
- (BOOL)isLocationServicesPreferencesDialogEnabled;
- (BOOL)isLocationServicesRestricted;
- (BOOL)isPlayingTrip;
- (BOOL)isRecordingTrip;
- (BOOL)isWiFiEnabled;
- (id)lastLocation;
- (int)lastLocationSource;
- (void)listenForLocationUpdates:(id)arg1;
- (void)loadRecording:(id)arg1;
- (void)loadRecordings:(id)arg1;
- (id)locationCorrecter;
- (void)locationManager:(id)arg1 didChangeAuthorizationStatus:(int)arg2;
- (void)locationManager:(id)arg1 didFailWithError:(id)arg2;
- (void)locationManager:(id)arg1 didUpdateHeading:(id)arg2;
- (void)locationManager:(id)arg1 didUpdateToLocation:(id)arg2 fromLocation:(id)arg3;
- (BOOL)locationManagerShouldDisplayHeadingCalibration:(id)arg1;
- (id)networkActivity;
- (void)reportCoalescedUpdated;
- (void)repostLastKnownLocation;
- (void)requestShiftFunctionForLocation:(id)arg1 wrap:(BOOL)arg2;
- (void)reset;
- (void)setChinaShiftEnabled:(BOOL)arg1;
- (void)setClLocationManager:(id)arg1;
- (void)setCoalesceTimer:(id)arg1;
- (void)setCorrected:(BOOL)arg1;
- (void)setDelayedLocationToShift:(id)arg1;
- (void)setDesiredAccuracy:(double)arg1;
- (void)setEffectiveBundle:(id)arg1;
- (void)setEnabled:(BOOL)arg1;
- (void)setExpectedTimeTillNextUpdate:(double)arg1;
- (void)setHeading:(id)arg1;
- (void)setHeadingOrientation:(int)arg1;
- (void)setLastLocation:(id)arg1;
- (void)setLocationCorrecter:(id)arg1;
- (void)setLocationServicesPreferencesDialogEnabled:(BOOL)arg1;
- (void)setNetworkActivity:(id)arg1;
- (void)setShiftFunction:(id)arg1;
- (void)setShiftRequest:(id)arg1;
- (void)setShouldThrottleHeading:(BOOL)arg1;
- (void)setThrottledHeading:(id)arg1;
- (void)setTripPath:(id)arg1;
- (void)setTripPaths:(id)arg1;
- (void)setUseCourseForHeading:(BOOL)arg1;
- (void)setUserLocationCacheDuration:(double)arg1;
- (id)shiftFunction;
- (id)shiftRequest;
- (BOOL)shouldCoalesceUpdates;
- (BOOL)shouldStartCoalescingLocation:(id)arg1;
- (BOOL)shouldStopCoalescingLocation:(id)arg1;
- (BOOL)shouldThrottleHeading;
- (void)startHeadingUpdateWithObserver:(id)arg1;
- (void)startLocationUpdateWithObserver:(id)arg1;
- (void)startRecording;
- (void)stopHeadingUpdateWithObserver:(id)arg1;
- (void)stopLocationUpdateWithObserver:(id)arg1;
- (void)stopRecording;
- (id)throttledHeading;
- (id)tripPath;
- (id)tripPaths;
- (void)tripPlayerDidEnd:(id)arg1;
- (void)unloadRecording;
- (BOOL)useCourseForHeading;
- (double)userLocationCacheDuration;
- (void)wiFiStatusChanged:(id)arg1;
- (void)writeCoreLocationLog;
- (void)writeRecording;
- (void)writeRecordingToPath:(id)arg1;

@end
