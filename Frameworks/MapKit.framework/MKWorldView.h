/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/MapKit.framework/MapKit
 */

@class MKWorldViewInternal, NSArray, MKUserLocation, VKTrafficIncident, VKMapView, GEOMapRegion, <MKWorldViewDelegate>, VKLabelMarker, VKAnnotationMarker, UITapGestureRecognizer;

@interface MKWorldView : UIView <VKMapViewDelegate, UIGestureRecognizerDelegate, MKAnnotationManagerDelegate, MKAnnotationMarkerContainer, MKWorldAnnotationManagerDragDelegate, MKMapGestureControllerDelegate, MKWorldGestureControllerDelegate> {
    MKWorldViewInternal *_internal;
    BOOL _fullyDrawn;
}

@property <MKWorldViewDelegate> * delegate;
@property BOOL shouldSplitRouteLine;
@property(getter=isFullyDrawn) BOOL fullyDrawn;
@property struct CGSize { float x1; float x2; } attributionAnchorOffset;
@property(readonly) UITapGestureRecognizer * nonselectingTapGestureRecognizer;
@property double longPressDuration;
@property(getter=isZoomEnabled) BOOL zoomEnabled;
@property(getter=isScrollEnabled) BOOL scrollEnabled;
@property(getter=isRotationEnabled) BOOL rotationEnabled;
@property(getter=isRotating,readonly) BOOL rotating;
@property(getter=isTiltEnabled) BOOL tiltEnabled;
@property(readonly) BOOL allowsRotation;
@property(readonly) BOOL allowsTilt;
@property(getter=isLocationPropagationEnabled) BOOL locationPropagationEnabled;
@property struct UIEdgeInsets { float x1; float x2; float x3; float x4; } edgeInsets;
@property struct { double x1; double x2; } centerCoordinate;
@property(retain) GEOMapRegion * mapRegion;
@property(readonly) GEOMapRegion * mapRegionOfInterest;
@property unsigned int mapType;
@property(readonly) float zoomLevel;
@property(getter=isChangingRegion,readonly) BOOL changingRegion;
@property(readonly) BOOL regionChangeIsUserInitiated;
@property(readonly) MKUserLocation * userLocation;
@property BOOL userInteractionPausesLocationUpdates;
@property(getter=isGoingToDefaultLocation,readonly) BOOL goingToDefaultLocation;
@property BOOL canSelectPOIs;
@property(readonly) VKLabelMarker * selectedLabelMarker;
@property BOOL canSelectAllLabels;
@property(readonly) VKTrafficIncident * selectedTrafficIncident;
@property(readonly) NSArray * annotations;
@property(readonly) VKAnnotationMarker * selectedAnnotationMarker;
@property(readonly) NSArray * annotationMarkers;
@property(readonly) BOOL canShowAnimationForPlaceCard;
@property Class calloutViewClass;
@property(readonly) BOOL hasUserLocation;
@property BOOL showsUserLocation;
@property BOOL trackingAutoSelectsZoomScale;
@property int userTrackingMode;
@property BOOL showingTraffic;
@property(getter=isLoadingEnabled) BOOL loadingEnabled;
@property(getter=isPitched,readonly) BOOL pitched;
@property(readonly) BOOL canEnter3DMode;
@property(getter=isShowingFlyover,readonly) BOOL showingFlyover;
@property(readonly) BOOL canShowFlyover;
@property(getter=isDebugConsoleEnabled) BOOL debugConsoleEnabled;
@property(readonly) VKMapView * mapView;
@property(readonly) double yaw;
@property(readonly) NSArray * visibleTileSets;
@property(getter=isLocationPulseEnabled) BOOL locationPulseEnabled;

+ (id)mapRegionWithCenterCoordinate:(struct { double x1; double x2; })arg1 zoomScale:(float)arg2 size:(struct CGSize { float x1; float x2; })arg3;

- (double)yaw;
- (void)puckAnimator:(id)arg1 updatedPosition:(struct { double x1; double x2; double x3; })arg2 course:(double)arg3;
- (float)zoomLevel;
- (void)setShouldSplitRouteLine:(BOOL)arg1;
- (BOOL)shouldSplitRouteLine;
- (id)snapshotImage;
- (void)stopScenicAnimation;
- (void)stopPlaceCardAnimation;
- (void)setCenterCoordinate:(struct { double x1; double x2; })arg1;
- (void)setMapRegion:(id)arg1;
- (void)puckAnimator:(id)arg1 updatedTargetPosition:(struct { double x1; double x2; double x3; })arg2;
- (void)puckAnimatorDidStop:(id)arg1;
- (BOOL)isFullyDrawn;
- (void)mapView:(id)arg1 didBecomePitched:(BOOL)arg2;
- (void)mapView:(id)arg1 didDeselectTrafficIncident:(id)arg2;
- (void)mapView:(id)arg1 trafficIncident:(id)arg2 calloutAccessoryControlTapped:(id)arg3;
- (void)mapView:(id)arg1 willSelectTrafficIncident:(id)arg2;
- (void)mapView:(id)arg1 didDeselectLabelMarker:(id)arg2;
- (void)mapView:(id)arg1 labelMarker:(id)arg2 calloutAccessoryControlTapped:(id)arg3;
- (void)mapViewDidBecomeFullyDrawn:(id)arg1;
- (id)mapView:(id)arg1 painterForOverlay:(id)arg2;
- (void)mapView:(id)arg1 didUpdateCalloutView:(id)arg2 forSource:(id)arg3 animated:(BOOL)arg4;
- (void)mapView:(id)arg1 willShowCalloutView:(id)arg2 forSource:(id)arg3;
- (void)mapView:(id)arg1 didUpdateCalloutPopoverController:(id)arg2 forSource:(id)arg3;
- (void)mapView:(id)arg1 willShowCalloutPopoverController:(id)arg2 forSource:(id)arg3;
- (void)mapView:(id)arg1 didAnimateInAnnotationMarkers:(id)arg2;
- (void)mapView:(id)arg1 willAnimateInAnnotationMarkers:(id)arg2;
- (void)mapView:(id)arg1 annotationMarker:(id)arg2 calloutAccessoryControlTapped:(id)arg3;
- (id)mapView:(id)arg1 presentationForAnnotation:(id)arg2;
- (void)mapViewDidStopRegionAnimation:(id)arg1 completed:(BOOL)arg2;
- (void)mapViewWillStartRegionAnimation:(id)arg1;
- (void)mapViewDidChangeVisibleRegion:(id)arg1;
- (void)mapViewDidFailLoadingTiles:(id)arg1 withError:(id)arg2;
- (void)mapViewDidFinishLoadingTiles:(id)arg1;
- (void)mapViewDidStartLoadingTiles:(id)arg1;
- (void)setTracePlaybackSpeedMultiplier:(double)arg1;
- (id)selectedLabelMarker;
- (void)dismissExpandedCallout;
- (id)calloutPopoverController;
- (id)annotationCoordinateTest;
- (id)annotationRectTest;
- (BOOL)isPitched;
- (void)exit3DMode;
- (void)enter3DMode;
- (id)selectedTrafficIncident;
- (void)startPlaceCardAnimationAtCoordinate:(struct { double x1; double x2; })arg1 andDistance:(double)arg2;
- (BOOL)canShowAnimationForPlaceCard;
- (BOOL)canShowAnimationForSearchResultWithMapRegion:(id)arg1;
- (struct { double x1; double x2; })convertPoint:(struct CGPoint { float x1; float x2; })arg1 toCoordinateFromView:(id)arg2;
- (struct { double x1; double x2; })centerCoordinate;
- (void)setCenterCoordinate:(struct { double x1; double x2; })arg1 animated:(BOOL)arg2;
- (id)mapRegionOfInterest;
- (id)mapRegion;
- (void)setMapRegion:(id)arg1 animated:(BOOL)arg2;
- (void)mapView:(id)arg1 showingFlyoverDidChange:(BOOL)arg2;
- (void)mapView:(id)arg1 canShowFlyoverDidChange:(BOOL)arg2;
- (void)mapView:(id)arg1 canEnter3DModeDidChange:(BOOL)arg2;
- (BOOL)canEnter3DMode;
- (void)setMapType:(unsigned int)arg1;
- (void)deselectTrafficIncidentAnimated:(BOOL)arg1;
- (void)deselectLabelMarkerAnimated:(BOOL)arg1;
- (void)addOverlay:(id)arg1;
- (void)removeOverlay:(id)arg1;
- (void)addPersistentOverlay:(id)arg1;
- (void)removePersistentOverlay:(id)arg1;
- (id)annotationMarkers;
- (id)selectedAnnotationMarker;
- (void)setTrackingAutoSelectsZoomScale:(BOOL)arg1;
- (BOOL)trackingAutoSelectsZoomScale;
- (BOOL)isShowingFlyover;
- (BOOL)canShowFlyover;
- (void)setCalloutViewClass:(Class)arg1;
- (Class)calloutViewClass;
- (BOOL)writeVisibleTrafficTilesToDirectory:(id)arg1 error:(id*)arg2;
- (id)detailedDescription;
- (id)visibleTileSets;
- (unsigned int)mapType;
- (void)mapView:(id)arg1 willSelectLabelMarker:(id)arg2;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (void)dealloc;
- (BOOL)allowsRotation;
- (void)locationManagerDidResumeLocationUpdates:(id)arg1;
- (void)locationManagerDidPauseLocationUpdates:(id)arg1;
- (struct CGPoint { float x1; float x2; })convertCoordinate:(struct { double x1; double x2; })arg1 toPointToView:(id)arg2;
- (void)deselectAnnotation:(id)arg1 animated:(BOOL)arg2;
- (void)removeAnnotations:(id)arg1;
- (void)addAnnotations:(id)arg1;
- (void)removeAnnotation:(id)arg1;
- (id)annotations;
- (id)mapView;
- (BOOL)isRotationEnabled;
- (void)addAnnotation:(id)arg1;
- (id)userLocation;
- (BOOL)hasUserLocation;
- (void)setEdgeInsets:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (BOOL)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (BOOL)isZoomEnabled;
- (void)setZoomEnabled:(BOOL)arg1;
- (void)setScrollEnabled:(BOOL)arg1;
- (float)_zoomScale;
- (BOOL)isRotating;
- (BOOL)isScrollEnabled;
- (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })edgeInsets;
- (void)applicationWillResignActive:(id)arg1;
- (void)applicationDidBecomeActive:(id)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setHidden:(BOOL)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)_handleLongPress:(id)arg1;
- (int)_interfaceOrientation;
- (void)setFullyDrawn:(BOOL)arg1;
- (BOOL)isDebugConsoleEnabled;
- (void)setUserInteractionPausesLocationUpdates:(BOOL)arg1;
- (BOOL)userInteractionPausesLocationUpdates;
- (void)setShowingTraffic:(BOOL)arg1;
- (BOOL)showingTraffic;
- (id)wrappedAnnotationForAnnotation:(id)arg1;
- (void)setCanSelectAllLabels:(BOOL)arg1;
- (BOOL)canSelectAllLabels;
- (void)setCanSelectPOIs:(BOOL)arg1;
- (BOOL)canSelectPOIs;
- (void)addMarkersForAnnotations:(id)arg1;
- (id)markerForAnnotation:(id)arg1;
- (id)dequeueReusableAnnotationMarkerWithIdentifier:(id)arg1;
- (void)performScenicAnimationForLocation:(struct { double x1; double x2; })arg1 animationType:(int)arg2;
- (void)prepareScenicAnimationForLocation:(struct { double x1; double x2; })arg1 animationType:(int)arg2 completion:(id)arg3;
- (void)showAnimationForSearchResult:(id)arg1 withMapRegion:(id)arg2;
- (void)goToCoordinateRegion:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 animationType:(int)arg2;
- (void)setMapRegion:(id)arg1 animationDuration:(double)arg2 pitch:(double)arg3 yaw:(double)arg4 completion:(id)arg5;
- (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })defaultInsetsForPinAnnotations;
- (void)restoreViewportFromDictionary:(id)arg1;
- (id)viewportDictionary;
- (void)setLocationPulseEnabled:(BOOL)arg1;
- (BOOL)isLocationPulseEnabled;
- (void)setLocationPropagationEnabled:(BOOL)arg1;
- (BOOL)isLocationPropagationEnabled;
- (id)nonselectingTapGestureRecognizer;
- (void)setAttributionAnchorOffset:(struct CGSize { float x1; float x2; })arg1;
- (struct CGSize { float x1; float x2; })attributionAnchorOffset;
- (void)setLongPressDuration:(double)arg1;
- (double)longPressDuration;
- (void)gestureControllerDidStopRotatingDecelerating:(id)arg1;
- (void)gestureControllerDidStopRotating:(id)arg1 willDecelerate:(BOOL)arg2;
- (void)gestureControllerWillStartRotating:(id)arg1;
- (void)annotationManager:(id)arg1 annotationMarker:(id)arg2 didChangeDragState:(int)arg3 fromOldState:(int)arg4;
- (void)setAnnotationDeselectionCallback:(id)arg1;
- (void)deselectAnnotationRepresentation:(id)arg1 animated:(BOOL)arg2;
- (void)selectAnnotationRepresentation:(id)arg1 animated:(BOOL)arg2 avoid:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3;
- (void)removeAnnotationRepresentation:(id)arg1;
- (void)addAnnotationRepresentation:(id)arg1 allowAnimation:(BOOL)arg2;
- (void)annotationManager:(id)arg1 didDeselectAnnotationRepresentation:(id)arg2;
- (void)annotationManager:(id)arg1 didSelectAnnotationRepresentation:(id)arg2;
- (id)annotationManager:(id)arg1 representationForAnnotation:(id)arg2;
- (void)annotationManager:(id)arg1 didAddAnnotationRepresentations:(id)arg2;
- (BOOL)hitSomethingAtTouch:(id)arg1;
- (void)setDebugConsoleEnabled:(BOOL)arg1;
- (void)_updateDebugConsole;
- (id)_descriptionForLocation:(id)arg1 compact:(BOOL)arg2;
- (void)_stopUpdatingUserLocation;
- (void)_startUpdatingUserLocation;
- (void)replaceAnnotation:(id)arg1 withAnnotation:(id)arg2;
- (void)addAnnotations:(id)arg1 allowAnimation:(BOOL)arg2;
- (void)addAnnotation:(id)arg1 allowAnimation:(BOOL)arg2;
- (void)_goToMapRegion:(id)arg1 animationType:(int)arg2;
- (id)mapRegionThatFits:(id)arg1 edgePadding:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg2;
- (void)setMapRegion:(id)arg1 animated:(BOOL)arg2 completion:(id)arg3;
- (BOOL)isTiltEnabled;
- (void)_sizeDidChange;
- (BOOL)_supportsVKMapType:(int)arg1;
- (void)_didChangeRegion;
- (void)_willChangeRegion:(BOOL)arg1 userInitiated:(BOOL)arg2;
- (BOOL)isChangingRegion;
- (void)_toggleDebugConsole:(id)arg1;
- (void)_updateUserLocationEffects;
- (void)setTiltEnabled:(BOOL)arg1;
- (BOOL)allowsTilt;
- (void)setRotationEnabled:(BOOL)arg1;
- (void)_handleTapToDeselect:(id)arg1;
- (void)_handleTapToSelect:(id)arg1;
- (void)_updateAllowsTilt;
- (void)_updateAllowsRotation;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 gestureRecognizerHostView:(id)arg2;
- (BOOL)regionChangeIsUserInitiated;
- (void)selectAnnotation:(id)arg1 animated:(BOOL)arg2 avoid:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3;
- (void)resetUserLocation;
- (void)_setUserTrackingMode:(int)arg1 animated:(BOOL)arg2 fromTrackingButton:(BOOL)arg3;
- (int)userTrackingMode;
- (BOOL)canRotateForHeading;
- (BOOL)isGoingToDefaultLocation;
- (BOOL)isLoadingEnabled;
- (double)gestureController:(id)arg1 shouldWaitForNextTapForDuration:(double)arg2 afterTouch:(id)arg3;
- (void)gestureControllerDidStopZoomingDecelerating:(id)arg1 direction:(int)arg2;
- (void)gestureControllerDidStopZooming:(id)arg1 direction:(int)arg2 willDecelerate:(BOOL)arg3;
- (void)gestureControllerWillStartZooming:(id)arg1 animated:(BOOL)arg2;
- (void)gestureControllerDidStopPanningDecelerating:(id)arg1;
- (void)gestureControllerDidStopPanning:(id)arg1 willDecelerate:(BOOL)arg2;
- (void)gestureControllerWillStartPanning:(id)arg1;
- (void)gestureControllerDidStopUserInteraction:(id)arg1;
- (void)gestureControllerWillStartUserInteraction:(id)arg1;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })mapRectThatFits:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 edgePadding:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_debugViewFrame;
- (void)selectAnnotation:(id)arg1 animated:(BOOL)arg2;
- (void)goToCenterCoordinate:(struct { double x1; double x2; })arg1 zoomLevel:(float)arg2 animationType:(int)arg3;
- (id)_mapRegionWithCenterCoordinate:(struct { double x1; double x2; })arg1 zoomScale:(float)arg2;
- (void)pauseUserLocationUpdates;
- (float)_zoomScaleForMapRegion:(id)arg1;
- (void)setUserTrackingMode:(int)arg1;
- (void)resumeUserLocationUpdates;
- (id)mapAttributionWithStringAttributes:(id)arg1;
- (void)_addDebugGesture;
- (void)setUserTrackingMode:(int)arg1 animated:(BOOL)arg2;
- (void)startEffects;
- (void)stopEffects;
- (void)_updateHeadingOrientation;
- (BOOL)showsUserLocation;
- (void)setShowsUserLocation:(BOOL)arg1;
- (void)_updateAttribution;
- (void)goToDefaultLocation;
- (void)deviceOrientationDidChange:(id)arg1;
- (void)geoDefaultsDidChange:(id)arg1;
- (void)activeTileGroupDidChange:(id)arg1;
- (void)setLoadingEnabled:(BOOL)arg1;
- (BOOL)locationManagerShouldPauseLocationUpdates:(id)arg1;
- (void)locationManagerUpdatedHeading:(id)arg1;
- (void)locationManagerDidReset:(id)arg1;
- (void)locationManagerUpdatedLocation:(id)arg1;
- (void)locationManagerFailedToUpdateLocation:(id)arg1 withError:(id)arg2;

@end
