/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/QuartzCore.framework/QuartzCore
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class CALayer, CALayerArray;

@interface CALayer : NSObject <CAMediaTiming, CAPropertyInfo> {
    struct _CALayerIvars { 
        NSInteger refcount; 
        NSUInteger flags; 
        NSUInteger parent; 
        CALayerArray *sublayers; 
        CALayer *mask; 
        struct _CALayerState {} *state; 
        struct _CALayerState {} *previous_state; 
        struct _CALayerAnimation {} *animations; 
        NSUInteger slots[3]; 
     /* Encoded args for previous method: B12@0:4I8 */
    } _attr;
}

@property(readonly) CALayer *_mapKit_mapLayer;
@property(copy) NSDictionary *actions;
@property CGColor *backgroundColor;
@property(copy) NSArray *backgroundFilters;
@property CGColor *borderColor;
@property(copy) NSString *contentsGravity;
@property(readonly) CALayer *currentLayer;
@property(copy) NSString *fillMode;
@property(copy) NSArray *filters;
@property(copy) NSString *magnificationFilter;
@property(retain) CALayer *mask;
@property(copy) NSString *minificationFilter;
@property(copy) NSString *name;
@property(copy) NSDictionary *style;
@property(copy) NSArray *sublayers;
@property(readonly) CALayer *superlayer;
@property CGPoint anchorPoint;
@property float anchorPointZ;
@property BOOL autoreverses;
@property double beginTime;
@property float borderWidth;
@property CGRect bounds;
@property BOOL canDrawConcurrently;
@property BOOL clearsContext;
@property(retain) id compositingFilter;
@property(retain) id contents;
@property CGRect contentsCenter;
@property CGRect contentsRect;
@property CGAffineTransform contentsTransform;
@property float cornerRadius;
@property id delegate;
@property(getter=isDoubleSided) BOOL doubleSided;
@property double duration;
@property NSUInteger edgeAntialiasingMask;
@property CGRect frame;
@property(getter=isGeometryFlipped) BOOL geometryFlipped;
@property(getter=isHidden) BOOL hidden;
@property BOOL masksToBounds;
@property float minificationFilterBias;
@property BOOL needsDisplayOnBoundsChange;
@property BOOL needsLayoutOnGeometryChange;
@property float opacity;
@property(getter=isOpaque) BOOL opaque;
@property CGPoint position;
@property(getter=isRasterizationEnabled) BOOL rasterizationEnabled;
@property float rasterizationScale;
@property float repeatCount;
@property double repeatDuration;
@property BOOL sortsSublayers;
@property float speed;
@property CATransform3D sublayerTransform;
@property double timeOffset;
@property CATransform3D transform;
@property(readonly) CGRect visibleRect;
@property float zPosition;

+ (int (*)())CA_getterForType:(NSInteger)arg1;
+ (int (*)())CA_setterForType:(NSInteger)arg1;
+ (id)defaultActionForKey:(id)arg1;
+ (id)defaultValueForKey:(id)arg1;
+ (id)layer;
+ (BOOL)needsDisplayForKey:(id)arg1;
+ (id)properties;
+ (BOOL)resolveInstanceMethod:(SEL)arg1;

- (struct Layer { int (**x1)(); struct Atomic { struct { NSInteger x_1_2_1; } x_2_1_1; } x2; NSUInteger x3; struct LayerExt {} *x4; struct Handle {} *x5; struct Object {} *x6; struct CGPoint { float x_7_1_1; float x_7_1_2; } x7; struct CGSize { float x_8_1_1; float x_8_1_2; } x8; struct TypedArray<CA::Render::Layer> {} *x9; struct TypedArray<CA::Render::Animation> {} *x10; }*)_copyRenderLayer:(struct Transaction { struct Shared {} *x1; NSUInteger x2; struct HashTable<CALayer*,uintptr_t*> {} *x3; struct SpinLock {} *x4; NSUInteger x5; struct Level {} *x6; struct Command {} *x7; struct Deleted {} *x8; struct List<const void*> {} *x9; struct Context {} *x10; struct HashTable<CALayer*,CALayer*> {} *x11; struct __CFRunLoop {} *x12; struct __CFRunLoopObserver {} *x13; unsigned int x14 : 1; }*)arg1 flags:(NSUInteger*)arg2;
- (BOOL)_canDisplayConcurrently;
- (void)_cancelAnimationTimer;
- (void)_display;
- (id)_mapKit_mapLayer;
- (void)_prepareContext:(struct CGContext { }*)arg1;
- (/* Warning: Unrecognized filer type: 'B' using 'void*' */ void*)_renderLayerDefinesProperty:(NSUInteger)arg1;
- (NSUInteger)_renderLayerPropertyAnimationFlags:(NSUInteger)arg1;
- (BOOL)_scheduleAnimationTimer;
- (void)_scrollPoint:(struct CGPoint { float x1; float x2; })arg1 fromLayer:(id)arg2;
- (void)_scrollRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 fromLayer:(id)arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_visibleRectOfLayer:(id)arg1;
- (id)actionForKey:(id)arg1;
- (id)actions;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (void)addSublayer:(id)arg1;
- (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })affineTransform;
- (id)ancestorSharedWithLayer:(id)arg1;
- (struct CGPoint { float x1; float x2; })anchorPoint;
- (float)anchorPointZ;
- (id)animationForKey:(id)arg1;
- (id)animationKeys;
- (BOOL)autoreverses;
- (struct CGColor { }*)backgroundColor;
- (id)backgroundFilters;
- (double)beginTime;
- (struct CGColor { }*)borderColor;
- (float)borderWidth;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })bounds;
- (BOOL)canDrawConcurrently;
- (BOOL)clearsContext;
- (NSInteger)compareTextEffectsOrdering:(id)arg1;
- (id)compositingFilter;
- (BOOL)containsPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)contents;
- (BOOL)contentsAreFlipped;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })contentsCenter;
- (id)contentsGravity;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })contentsRect;
- (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })contentsTransform;
- (struct CGPoint { float x1; float x2; })convertPoint:(struct CGPoint { float x1; float x2; })arg1 fromLayer:(id)arg2;
- (struct CGPoint { float x1; float x2; })convertPoint:(struct CGPoint { float x1; float x2; })arg1 toLayer:(id)arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 fromLayer:(id)arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 toLayer:(id)arg2;
- (double)convertTime:(double)arg1 fromLayer:(id)arg2;
- (double)convertTime:(double)arg1 toLayer:(id)arg2;
- (float)cornerRadius;
- (id)currentLayer;
- (void)dealloc;
- (id)debugDescription;
- (id)delegate;
- (void)didChangeValueForKey:(id)arg1;
- (void)display;
- (void)displayIfNeeded;
- (BOOL)doubleSided;
- (void)drawInContext:(struct CGContext { }*)arg1;
- (BOOL)drawsMipmapLevels;
- (double)duration;
- (NSUInteger)edgeAntialiasingMask;
- (id)fillMode;
- (id)filters;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })frame;
- (BOOL)hasBeenCommitted;
- (BOOL)hidden;
- (id)hitTest:(struct CGPoint { float x1; float x2; })arg1;
- (BOOL)ignoresHitTesting;
- (id)init;
- (id)initWithBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (id)initWithLayer:(id)arg1;
- (void)insertSublayer:(id)arg1 above:(id)arg2;
- (void)insertSublayer:(id)arg1 atIndex:(NSUInteger)arg2;
- (void)insertSublayer:(id)arg1 below:(id)arg2;
- (void)invalidateContents;
- (BOOL)isDescendantOf:(id)arg1;
- (BOOL)isDoubleSided;
- (BOOL)isFlipped;
- (BOOL)isGeometryFlipped;
- (BOOL)isHidden;
- (BOOL)isOpaque;
- (BOOL)isRasterizationEnabled;
- (id)layerAtTime:(double)arg1;
- (id)layerBeingDrawn;
- (void)layerDidBecomeVisible:(BOOL)arg1;
- (void)layoutBelowIfNeeded;
- (void)layoutIfNeeded;
- (BOOL)layoutIsActive;
- (void)layoutSublayers;
- (id)magnificationFilter;
- (id)mask;
- (BOOL)masksToBounds;
- (id)minificationFilter;
- (float)minificationFilterBias;
- (id)modelLayer;
- (id)name;
- (BOOL)needsDisplay;
- (BOOL)needsDisplayOnBoundsChange;
- (BOOL)needsLayout;
- (BOOL)needsLayoutOnGeometryChange;
- (float)opacity;
- (BOOL)opaque;
- (struct CGPoint { float x1; float x2; })position;
- (struct CGSize { float x1; float x2; })preferredFrameSize;
- (id)presentationLayer;
- (BOOL)presentationValue:(id*)arg1 forKey:(id)arg2 removeAnimation:(BOOL)arg3;
- (float)rasterizationScale;
- (void*)regionBeingDrawn;
- (void)release;
- (void)reloadValueForKeyPath:(id)arg1;
- (void)removeAllAnimations;
- (void)removeAnimationForKey:(id)arg1;
- (void)removeFromSuperlayer;
- (void)renderInContext:(struct CGContext { }*)arg1;
- (float)repeatCount;
- (double)repeatDuration;
- (void)replaceSublayer:(id)arg1 with:(id)arg2;
- (id)retain;
- (NSUInteger)retainCount;
- (void)scrollPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)scrollRectToVisible:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setActions:(id)arg1;
- (void)setAffineTransform:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg1;
- (void)setAnchorPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)setAnchorPointZ:(float)arg1;
- (void)setAutoreverses:(BOOL)arg1;
- (void)setBackgroundColor:(struct CGColor { }*)arg1;
- (void)setBackgroundFilters:(id)arg1;
- (void)setBeginTime:(double)arg1;
- (void)setBorderColor:(struct CGColor { }*)arg1;
- (void)setBorderWidth:(float)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setCanDrawConcurrently:(BOOL)arg1;
- (void)setClearsContext:(BOOL)arg1;
- (void)setCompositingFilter:(id)arg1;
- (void)setContents:(id)arg1;
- (void)setContentsCenter:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setContentsChanged;
- (void)setContentsGravity:(id)arg1;
- (void)setContentsRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setContentsTransform:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg1;
- (void)setCornerRadius:(float)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDoubleSided:(BOOL)arg1;
- (void)setDuration:(double)arg1;
- (void)setEdgeAntialiasingMask:(NSUInteger)arg1;
- (void)setFillMode:(id)arg1;
- (void)setFilters:(id)arg1;
- (void)setFlipped:(BOOL)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setGeometryFlipped:(BOOL)arg1;
- (void)setHidden:(BOOL)arg1;
- (void)setMagnificationFilter:(id)arg1;
- (void)setMask:(id)arg1;
- (void)setMasksToBounds:(BOOL)arg1;
- (void)setMinificationFilter:(id)arg1;
- (void)setMinificationFilterBias:(float)arg1;
- (void)setName:(id)arg1;
- (void)setNeedsDisplay;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setNeedsDisplayOnBoundsChange:(BOOL)arg1;
- (void)setNeedsLayout;
- (void)setNeedsLayoutOnGeometryChange:(BOOL)arg1;
- (void)setOpacity:(float)arg1;
- (void)setOpaque:(BOOL)arg1;
- (void)setPosition:(struct CGPoint { float x1; float x2; })arg1;
- (void)setRasterizationEnabled:(BOOL)arg1;
- (void)setRasterizationScale:(float)arg1;
- (void)setRepeatCount:(float)arg1;
- (void)setRepeatDuration:(double)arg1;
- (void)setSortsSublayers:(BOOL)arg1;
- (void)setSpeed:(float)arg1;
- (void)setStyle:(id)arg1;
- (void)setSublayerTransform:(struct CATransform3D { float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; })arg1;
- (void)setSublayers:(id)arg1;
- (void)setTimeOffset:(double)arg1;
- (void)setTransform:(struct CATransform3D { float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; })arg1;
- (void)setValue:(id)arg1 forKey:(id)arg2;
- (void)setValue:(id)arg1 forKeyPath:(id)arg2;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (void)setZPosition:(float)arg1;
- (struct CGSize { float x1; float x2; })size;
- (BOOL)sortsSublayers;
- (float)speed;
- (id)style;
- (struct CATransform3D { float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; })sublayerTransform;
- (id)sublayers;
- (id)superlayer;
- (double)timeOffset;
- (struct CATransform3D { float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; })transform;
- (id)valueForKey:(id)arg1;
- (id)valueForKeyPath:(id)arg1;
- (id)valueForUndefinedKey:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })visibleRect;
- (void)willChangeValueForKey:(id)arg1;
- (float)zPosition;

@end
