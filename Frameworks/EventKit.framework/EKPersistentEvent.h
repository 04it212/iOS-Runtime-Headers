/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/EventKit.framework/EventKit
 */

@class NSDate, NSString, NSURL;

@interface EKPersistentEvent : EKPersistentCalendarItem  {
    struct { 
        int years; 
        int months; 
        int days; 
        int hours; 
        int minutes; 
        double seconds; 
    } _cachedDurationUnits;
}

@property(readonly) NSString * eventIdentifier;
@property(copy) NSDate * endDate;
@property(readonly) struct { int x1; int x2; int x3; int x4; int x5; double x6; } durationUnits;
@property(readonly) double duration;
@property(readonly) int birthdayID;
@property(copy) NSURL * URL;
@property(copy) NSString * responseComment;
@property unsigned int readStatus;
@property int status;
@property int availability;
@property unsigned int privacyLevel;
@property(getter=isFloating,readonly) BOOL floating;
@property(getter=isEditable,readonly) BOOL editable;
@property(getter=isMeeting,readonly) BOOL meeting;
@property(getter=isInvitation,readonly) BOOL invitation;
@property unsigned int modifiedProperties;
@property BOOL needsOccurrenceCacheUpdate;
@property int participationStatus;
@property(readonly) int pendingParticipationStatus;
@property(copy) NSDate * originalStartDate;

+ (id)defaultPropertiesToLoad;
+ (id)relations;
+ (id)generateUniqueIDWithEvent:(id)arg1 originalEvent:(id)arg2 calendar:(id)arg3;

- (int)availability;
- (void)setStatus:(int)arg1;
- (BOOL)isFloating;
- (double)duration;
- (void)removeAction:(id)arg1;
- (void)addAction:(id)arg1;
- (void)setActions:(id)arg1;
- (void)setReadStatus:(unsigned int)arg1;
- (unsigned int)readStatus;
- (int)birthdayId;
- (BOOL)isMeeting;
- (id)committedStartDate;
- (void)setPrivacyLevel:(unsigned int)arg1;
- (unsigned int)privacyLevel;
- (void)_adjustForNewCalendar;
- (BOOL)_hasExternalIDOrDeliverySource;
- (BOOL)isInvitation;
- (id)actions;
- (BOOL)_hasValidEventAction;
- (BOOL)_areDurationUnitsCached;
- (void)_invalidateCachedDurationUnits;
- (void)primitiveValueChangedForKey:(id)arg1;
- (void)setResponseComment:(id)arg1;
- (id)responseComment;
- (BOOL)needsOccurrenceCacheUpdate;
- (void)setOriginalStartDate:(id)arg1;
- (id)detachWithStartDate:(id)arg1 newStartDate:(id)arg2 future:(BOOL)arg3;
- (void)deleteFromOccurrenceDateOnward:(id)arg1;
- (id)originalStartDate;
- (void)filterExceptionDates;
- (void)clearExceptionDatesAndUpdateDetachedOriginalDates;
- (void)setParticipationStatus:(int)arg1;
- (int)pendingParticipationStatus;
- (BOOL)responseMustApplyToAll;
- (id)organizer;
- (int)birthdayID;
- (int)participationStatus;
- (void)setNeedsOccurrenceCacheUpdate:(BOOL)arg1;
- (void)setAvailability:(int)arg1;
- (void)setModifiedProperties:(unsigned int)arg1;
- (unsigned int)modifiedProperties;
- (BOOL)allowsParticipationStatusModifications;
- (struct { int x1; int x2; int x3; int x4; int x5; double x6; })durationUnits;
- (void)setEndDate:(id)arg1;
- (id)exportToICS;
- (id)eventIdentifier;
- (id)endDate;
- (int)entityType;
- (BOOL)validate:(id*)arg1;
- (BOOL)refresh;
- (void)setURL:(id)arg1;
- (id)initCommon;
- (id)URL;
- (BOOL)isEditable;
- (int)status;
- (id)description;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;

@end
