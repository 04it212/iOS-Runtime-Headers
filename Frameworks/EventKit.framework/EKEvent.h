/* Generated by RuntimeBrowser on iPhone OS 4.0
   Image: /System/Library/Frameworks/EventKit.framework/EventKit
 */

@class EKCalendar, EKParticipant, NSTimeZone, NSArray, NSMutableArray, EKEventStore, NSString, NSURL, NSDate, NSNumber;



@interface EKEvent : NSObject 
{
    EKEventStore *_store;
    void *_event;
    NSDate *_occurrenceDate;
    NSString *_eventId;
    NSNumber *_calendarId;
    NSDate *_dateStamp;
    NSURL *_url;
    BOOL _allDay;
    BOOL _detached;
    BOOL _unread;
    NSString *_title;
    NSString *_location;
    NSString *_notes;
    NSMutableArray *_alarms;
    NSMutableArray *_attendees;
    EKParticipant *_organizer;
    NSDate *_startDate;
    NSDate *_endDate;
    double _duration;
    EKCalendar *_calendar;
    NSInteger _status;
    NSInteger _partStatus;
    NSInteger _availability;
    NSString *_responseComment;
    NSTimeZone *_timeZone;
    NSDate *_originalStartDate;
    NSArray *_exceptionDates;
    NSArray *_recurrenceRules;
    unsigned long long _loadFlags;
    unsigned long long _dirtyFlags;
}

@property(readonly) NSString *eventIdentifier;
@property(copy) NSString *title;
@property(copy) NSString *location;
@property(retain) EKCalendar *calendar;
@property(copy) NSString *notes;
@property(readonly) NSDate *lastModifiedDate;
@property(copy) NSArray *alarms;
@property(getter=isAllDay) BOOL allDay;
@property(copy) NSDate *startDate;
@property(copy) NSDate *endDate;
@property(readonly) NSArray *attendees;
@property(readonly) EKParticipant *organizer;
@property(retain) EKRecurrenceRule *recurrenceRule;
@property NSInteger availability;
@property(readonly) NSInteger status;
@property(readonly) BOOL isDetached;

+ (id)eventWithEventStore:(id)arg1;

- (id)startDate;
- (void)setStartDate:(id)arg1;
- (NSInteger)status;
- (id)timeZone;
- (double)duration;
- (void)setURL:(id)arg1;
- (void)setCalendar:(id)arg1;
- (void)setTimeZone:(id)arg1;
- (BOOL)isEditable;
- (void)setLocation:(id)arg1;
- (id)calendar;
- (id)URL;
- (void)encodeWithCoder:(id)arg1;
- (id)init;
- (BOOL)isEqual:(id)arg1;
- (id)title;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (id)description;
- (id)location;
- (void)setTitle:(id)arg1;
- (BOOL)isFloating;
- (BOOL)refresh;
- (id)lastModifiedDate;
- (void)_setStoreInternal:(id)arg1;
- (id)initWithEventStore:(id)arg1 event:(void*)arg2 occurrenceDate:(id)arg3 eventIdentifier:(id)arg4;
- (void)_clearCachedData;
- (id)rowId;
- (void)_reconnectEvent;
- (void)_reconnectCalendar;
- (void)_storeClosed;
- (void)_reconnectToServer;
- (BOOL)isDirtyIgnoringCalendar;
- (void)_sendModifiedNote;
- (id)_canMoveToCalendar:(id)arg1;
- (id)initialEndDate;
- (BOOL)hasAlarm;
- (id)nextAlarmDate;
- (BOOL)_areAlarmsDirty;
- (BOOL)_areRecurrenceRulesDirty;
- (NSInteger)recurrenceRuleCountInDB;
- (void)clearUnreadState;
- (id)exceptionDates;
- (id)detachedEvents;
- (NSInteger)pendingParticipationStatus;
- (BOOL)hasActionWithExternalAndFolderID;
- (BOOL)canAddAttendees;
- (BOOL)hasSelfAttendee;
- (BOOL)canSetAlarms;
- (void)_disassociate;
- (BOOL)_commitRecurrenceRule:(id*)arg1;
- (BOOL)_commitAlarms:(id*)arg1;
- (BOOL)_commitAttendees:(id*)arg1;
- (BOOL)_validateDatesAndRecurrencesGivenSpan:(NSInteger)arg1 error:(id*)arg2;
- (BOOL)_validateDurationConstrainedToRecurrenceInterval;
- (BOOL)_validateAlarmIntervalConstrainedToRecurrenceInterval:(NSInteger)arg1;
- (BOOL)_occurrenceExistsOnDate:(double)arg1;
- (BOOL)_checkStartDateConstraintAgainstDate:(struct { NSInteger x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })arg1 error:(id*)arg2;
- (id)_recurrenceRules;
- (id)_attendees;
- (id)_alarms;
- (id)initWithEventStore:(id)arg1 event:(void*)arg2 occurrenceDate:(id)arg3;
- (BOOL)commit:(NSInteger)arg1 error:(id*)arg2;
- (BOOL)remove:(NSInteger)arg1 error:(id*)arg2;
- (void*)objectRef;
- (id)initialStartDate;
- (id)allRecurrenceRules;
- (void)setAttendees:(id)arg1;
- (id)originalEvent;
- (id)attendees;
- (id)notes;
- (void)setNotes:(id)arg1;
- (id)store;
- (BOOL)canSetAvailability;
- (void)setAvailability:(NSInteger)arg1;
- (NSInteger)availability;
- (struct { NSInteger x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })startDatePinnedForAllDay;
- (id)endDate;
- (NSInteger)compareStartDateWithEvent:(id)arg1;
- (BOOL)isInvite;
- (void)setRecurrenceRule:(id)arg1;
- (struct { NSInteger x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })endDatePinnedForAllDay;
- (id)occurrenceDate;
- (void)setEndDate:(id)arg1;
- (id)initWithEventStore:(id)arg1;
- (id)eventIdentifier;
- (id)copyState;
- (void)restoreState:(id)arg1;
- (BOOL)canDetachSingleOccurrence;
- (BOOL)canAddRecurrence;
- (NSInteger)recurrenceRuleCount;
- (BOOL)requiresDetach;
- (NSInteger)participationStatus;
- (id)organizer;
- (id)alarms;
- (void)removeAlarm:(id)arg1;
- (void)addAlarm:(id)arg1;
- (void)setAlarms:(id)arg1;
- (BOOL)canBeRespondedTo;
- (BOOL)isStatusDirty;
- (BOOL)isUnread;
- (id)recurrenceRule;
- (BOOL)responseMustApplyToAll;
- (BOOL)isRecurring;
- (BOOL)isDetached;
- (void)setParticipationStatus:(NSInteger)arg1;
- (void)revert;
- (id)externalId;
- (void)setResponseComment:(id)arg1;
- (id)responseComment;
- (void)setStore:(id)arg1;
- (BOOL)isAllDay;
- (struct { NSInteger x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })endDateGr;
- (BOOL)isDirty;
- (struct { NSInteger x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })startDateGr;
- (void)setAllDay:(BOOL)arg1;
- (NSInteger)alarmCount;
- (NSInteger)attendeeCount;
- (struct { NSInteger x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })startDatePinnedForAllDay;
- (struct { NSInteger x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })endDatePinnedForAllDay;

@end
