/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/EventKit.framework/EventKit
 */

@class EKCalendar, EKParticipant, NSTimeZone, NSArray, EKRecurrenceRule, NSMutableArray, EKEventStore, NSString, NSURL, NSDate, NSNumber;

@interface EKEvent : NSObject  {
    EKEventStore *_store;
    void *_event;
    NSDate *_occurrenceDate;
    NSString *_eventId;
    NSNumber *_calendarId;
    NSDate *_dateStamp;
    NSURL *_url;
    BOOL _allDay;
    BOOL _detached;
    BOOL _unread;
    NSString *_title;
    NSString *_location;
    NSString *_notes;
    NSMutableArray *_alarms;
    NSMutableArray *_attendees;
    EKParticipant *_organizer;
    NSDate *_startDate;
    NSDate *_endDate;
    double _duration;
    EKCalendar *_calendar;
    int _status;
    int _partStatus;
    int _availability;
    NSString *_responseComment;
    NSTimeZone *_timeZone;
    NSDate *_originalStartDate;
    NSArray *_exceptionDates;
    NSArray *_recurrenceRules;
    int _birthdayId;
    unsigned long long _loadFlags;
    unsigned long long _dirtyFlags;
}

@property(readonly) NSString * eventIdentifier;
@property(copy) NSString * title;
@property(copy) NSString * location;
@property(retain) EKCalendar * calendar;
@property(copy) NSString * notes;
@property(readonly) NSDate * lastModifiedDate;
@property(copy) NSArray * alarms;
@property(getter=isAllDay) BOOL allDay;
@property(copy) NSDate * startDate;
@property(copy) NSDate * endDate;
@property(readonly) NSArray * attendees;
@property(readonly) EKParticipant * organizer;
@property(retain) EKRecurrenceRule * recurrenceRule;
@property int availability;
@property(readonly) int status;
@property(readonly) BOOL isDetached;
@property(readonly) NSDate * _startDate;

+ (id)eventWithEventStore:(id)arg1;
+ (void)addEvent:(id)arg1 toStore:(id)arg2;
+ (void)removeEvent:(id)arg1 fromStore:(id)arg2;
+ (void)storeClosed:(id)arg1;
+ (void)daemonRestarted;
+ (void)storeOpened:(id)arg1;

- (void)setNotes:(id)arg1;
- (void)setEndDate:(id)arg1;
- (void)setAllDay:(BOOL)arg1;
- (void)setTimeZone:(id)arg1;
- (void)setURL:(id)arg1;
- (double)duration;
- (void)setCalendar:(id)arg1;
- (id)timeZone;
- (id)URL;
- (void)setLocation:(id)arg1;
- (id)calendar;
- (BOOL)isEditable;
- (BOOL)isEqual:(id)arg1;
- (id)title;
- (void)encodeWithCoder:(id)arg1;
- (id)init;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (id)description;
- (id)location;
- (void)setTitle:(id)arg1;
- (id)lastModifiedDate;
- (BOOL)isFloating;
- (id)uniqueId;
- (id)startDate;
- (void)setStartDate:(id)arg1;
- (id)organizer;
- (id)notes;
- (id)store;
- (BOOL)isDirty;
- (void)setStore:(id)arg1;
- (BOOL)refresh;
- (void)_setStoreInternal:(id)arg1;
- (id)externalId;
- (BOOL)isDetached;
- (id)recurrenceRule;
- (id)initWithEventStore:(id)arg1;
- (void)_clearCachedData;
- (id)externalURL;
- (id)rowId;
- (void*)objectRef;
- (id)copyState;
- (void)restoreState:(id)arg1;
- (id)exportToICS;
- (void)_reconnectEvent;
- (void)_reconnectCalendar;
- (void)_storeClosed;
- (void)_reconnectToServer;
- (BOOL)isStatusDirty;
- (BOOL)isDirtyIgnoringCalendar;
- (void)_sendModifiedNote;
- (id)_canMoveToCalendar:(id)arg1;
- (id)birthdayTitleWithAddressBook:(void*)arg1;
- (int)compareStartDateWithEvent:(id)arg1;
- (BOOL)isAllDay;
- (id)initialEndDate;
- (struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })startDateGr;
- (struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })endDateGr;
- (struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })startDatePinnedForAllDay;
- (struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })endDatePinnedForAllDay;
- (BOOL)isInvite;
- (int)attendeeCount;
- (BOOL)hasAlarm;
- (id)nextAlarmDate;
- (int)alarmCount;
- (void)setAlarms:(id)arg1;
- (void)addAlarm:(id)arg1;
- (void)removeAlarm:(id)arg1;
- (BOOL)_areAlarmsDirty;
- (BOOL)_areRecurrenceRulesDirty;
- (BOOL)isRecurring;
- (int)recurrenceRuleCountInDB;
- (void)setRecurrenceRule:(id)arg1;
- (int)recurrenceRuleCount;
- (BOOL)canAddRecurrence;
- (void)setParticipationStatus:(int)arg1;
- (int)birthdayId;
- (BOOL)responseMustApplyToAll;
- (BOOL)isUnread;
- (void)setUnread:(BOOL)arg1;
- (void)setAvailability:(int)arg1;
- (id)responseComment;
- (void)setResponseComment:(id)arg1;
- (id)exceptionDates;
- (id)detachedEvents;
- (BOOL)requiresDetach;
- (BOOL)canDetachSingleOccurrence;
- (int)pendingParticipationStatus;
- (BOOL)hasActionWithExternalAndFolderID;
- (BOOL)canSetAvailability;
- (BOOL)canAddAttendees;
- (BOOL)hasSelfAttendee;
- (BOOL)canSetAlarms;
- (BOOL)canBeRespondedTo;
- (void)_loadPropertyIfNeeded:(int)arg1 loader:(id)arg2;
- (void)_disassociate;
- (BOOL)commit:(int)arg1 error:(id*)arg2;
- (BOOL)remove:(int)arg1 error:(id*)arg2;
- (BOOL)_commitRecurrenceRule:(id*)arg1;
- (BOOL)_commitAlarms:(id*)arg1;
- (BOOL)_commitAttendees:(id*)arg1;
- (BOOL)_validateDatesAndRecurrencesGivenSpan:(int)arg1 error:(id*)arg2;
- (BOOL)_validateDurationConstrainedToRecurrenceInterval;
- (BOOL)_validateAlarmIntervalConstrainedToRecurrenceInterval:(int)arg1;
- (BOOL)_occurrenceExistsOnDate:(double)arg1;
- (BOOL)_checkStartDateConstraintAgainstDate:(struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })arg1 error:(id*)arg2;
- (id)_recurrenceRules;
- (id)_startDate;
- (id)_attendees;
- (id)_alarms;
- (int)participationStatus;
- (id)initWithEventStore:(id)arg1 event:(void*)arg2 occurrenceDate:(id)arg3 eventIdentifier:(id)arg4;
- (id)eventIdentifier;
- (void)revert;
- (id)initWithEventStore:(id)arg1 event:(void*)arg2 occurrenceDate:(id)arg3;
- (void)clearUnreadState;
- (id)occurrenceDate;
- (id)endDate;
- (id)initialStartDate;
- (id)allRecurrenceRules;
- (int)availability;
- (id)alarms;
- (int)status;
- (void)setAttendees:(id)arg1;
- (id)originalEvent;
- (id)attendees;
- (id)sortEKParticipantsIgnoringNonHumans:(id)arg1;
- (id)sortedEKParticipantsDisplayStringsIgnoringNonHumans:(id)arg1;
- (BOOL)hasHumanInviteesToDisplay;
- (struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })startDatePinnedForAllDay;
- (struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })endDatePinnedForAllDay;

@end
