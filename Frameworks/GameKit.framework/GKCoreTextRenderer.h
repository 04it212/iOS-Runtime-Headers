/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/GameKit.framework/GameKit
 */

@class UIColor, NSString, NSAttributedString;

@interface GKCoreTextRenderer : NSObject  {
    NSAttributedString *_attributedText;
    struct __CTFrame { } *_textFrame;
    struct __CTFramesetter { } *_framesetter;
    id _contentPath;
    float _leading;
    BOOL _shouldQuoteText;
    BOOL _shouldDrawEmoji;
    BOOL _shouldSizeToTextImageBounds;
    BOOL _hasTruncationClusters;
    BOOL _adjustsFontSizeToFitWidth;
    NSString *_truncationSymbol;
    int _numberOfLines;
    float _minimumFontSize;
    int _baselineAdjustment;
    UIColor *_textColor;
    UIColor *_shadowColor;
    struct CGSize { 
        float width; 
        float height; 
    } _shadowOffset;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } _bounds;
}

@property(readonly) float baselineYOffset;
@property struct CGRect { struct CGPoint { float x; float y; } origin; struct CGSize { float width; float height; } size; } bounds;
@property struct CGSize { float width; float height; } shadowOffset;
@property(retain) UIColor * shadowColor;
@property(retain) UIColor * textColor;
@property int baselineAdjustment;
@property float minimumFontSize;
@property int numberOfLines;
@property(copy) NSString * truncationSymbol;
@property BOOL adjustsFontSizeToFitWidth;
@property BOOL hasTruncationClusters;
@property BOOL shouldSizeToTextImageBounds;
@property BOOL shouldDrawEmoji;
@property BOOL shouldQuoteText;
@property float leading;
@property(retain) id contentPath;
@property(readonly) struct __CTFramesetter { }* framesetter;
@property(readonly) struct __CTFrame { }* textFrame;
@property(retain) NSAttributedString * attributedText;


- (BOOL)shouldQuoteText;
- (void)invalidateTextFrame;
- (void)invalidateFramesetter;
- (void)setContentPath:(id)arg1;
- (struct __CTFrame { }*)textFrame;
- (struct __CTFramesetter { }*)framesetter;
- (struct CGSize { float x1; float x2; })suggestFrameSizeForString:(id)arg1 withConstraints:(struct CGSize { float x1; float x2; })arg2 fitsRange:(struct { int x1; int x2; }*)arg3;
- (struct CGSize { float x1; float x2; })suggestFrameSizeWithConstraints:(struct CGSize { float x1; float x2; })arg1 fitsRange:(struct { int x1; int x2; }*)arg2;
- (id)string:(id)arg1 withCTFont:(struct __CTFont { }*)arg2;
- (id)overallAttribute:(id)arg1 forString:(id)arg2;
- (float)calculatedFontSizeForString:(id)arg1 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (float)baselineYOffset;
- (float)lineHeightForFont:(struct __CTFont { }*)arg1;
- (float)lineImageHeightForAttributedString:(id)arg1;
- (float)lineHeightForAttributedString:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })textRectForBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 limitedToNumberOfLines:(int)arg2 adjustForShadow:(BOOL)arg3;
- (struct __CTRun { }*)truncateLine:(struct __CTLine { }*)arg1 removingStringRange:(struct { int x1; int x2; })arg2 runAttributes:(struct __CFDictionary { }*)arg3 truncationSymbol:(id)arg4;
- (void)_drawInContext:(struct CGContext { }*)arg1 drawEmoji:(BOOL)arg2;
- (id)truncationSymbol;
- (void)setTruncationSymbol:(id)arg1;
- (BOOL)hasTruncationClusters;
- (void)setHasTruncationClusters:(BOOL)arg1;
- (BOOL)shouldSizeToTextImageBounds;
- (void)setShouldSizeToTextImageBounds:(BOOL)arg1;
- (BOOL)shouldDrawEmoji;
- (void)setShouldDrawEmoji:(BOOL)arg1;
- (void)setShouldQuoteText:(BOOL)arg1;
- (void)setLeading:(float)arg1;
- (id)contentPath;
- (id)attributedText;
- (void)setAttributedText:(id)arg1;
- (void)setNumberOfLines:(int)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })textRectForBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 limitedToNumberOfLines:(int)arg2;
- (id)shadowColor;
- (int)baselineAdjustment;
- (int)numberOfLines;
- (void)setShadowOffset:(struct CGSize { float x1; float x2; })arg1;
- (void)drawInContext:(struct CGContext { }*)arg1;
- (void)setTextColor:(id)arg1;
- (void)setAdjustsFontSizeToFitWidth:(BOOL)arg1;
- (id)textColor;
- (BOOL)adjustsFontSizeToFitWidth;
- (float)minimumFontSize;
- (void)setMinimumFontSize:(float)arg1;
- (struct CGSize { float x1; float x2; })shadowOffset;
- (float)leading;
- (void)setBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (id)init;
- (void)setBaselineAdjustment:(int)arg1;
- (void)dealloc;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })bounds;
- (void)setShadowColor:(id)arg1;

@end
