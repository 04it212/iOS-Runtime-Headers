/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/GameKit.framework/GameKit
 */

@class NSString, GKCoreTextRenderer, NSAttributedString;

@interface GKLabel : UILabel  {
    struct { 
        struct CGSize { 
            float width; 
            float height; 
        } constraints; 
        struct CGSize { 
            float width; 
            float height; 
        } sizeThatFit; 
        float fontSize; 
    } _sizeThatFitsCache;
    NSAttributedString *_attributedString;
    float _leading;
    BOOL _shouldQuoteText;
    BOOL _shouldDrawEmoji;
    BOOL _shouldSizeToTextImageBounds;
    NSAttributedString *_attributedText;
    BOOL _forceNaturalAlignment;
    GKCoreTextRenderer *_coreTextRenderer;
}

@property(retain) id contentPath;
@property(copy) NSAttributedString * attributedText;
@property float leading;
@property BOOL shouldQuoteText;
@property BOOL shouldDrawEmoji;
@property(readonly) float baselineYOffset;
@property BOOL shouldSizeToTextImageBounds;
@property BOOL forceNaturalAlignment;
@property(copy) NSString * truncationSymbol;
@property(readonly) unsigned int actualLineCount;
@property(readonly) NSAttributedString * attributedString;
@property(retain) GKCoreTextRenderer * coreTextRenderer;


- (BOOL)shouldSizeToTextImageBounds;
- (BOOL)shouldDrawEmoji;
- (BOOL)shouldQuoteText;
- (float)preferredHeightForWidth:(float)arg1;
- (void)setForceNaturalAlignment:(BOOL)arg1;
- (struct CGSize { float x1; float x2; })sizeThatFits:(struct CGSize { float x1; float x2; })arg1 calculatedFontSize:(float*)arg2;
- (id)attributedString;
- (void)setShouldSizeToTextImageBounds:(BOOL)arg1;
- (void)setShouldQuoteText:(BOOL)arg1;
- (void)setLeading:(float)arg1;
- (void)setTruncationSymbol:(id)arg1;
- (id)truncationSymbol;
- (void)setContentPath:(id)arg1;
- (id)contentPath;
- (unsigned int)actualLineCount;
- (float)baselineYOffset;
- (BOOL)forceNaturalAlignment;
- (id)attributedStringForBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (struct __CTParagraphStyle { }*)paragraphStyleWithLineHeight:(float)arg1;
- (id)coreTextRenderer;
- (void)invalidateAttributedString;
- (void)setShouldDrawEmoji:(BOOL)arg1;
- (void)setCoreTextRenderer:(id)arg1;
- (id)attributedText;
- (void)setAttributedText:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setNumberOfLines:(int)arg1;
- (void)drawTextInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (float)leading;
- (void)setTextAlignment:(int)arg1;
- (void)sizeToFit;
- (void)setBaselineAdjustment:(int)arg1;
- (int)baselineAdjustment;
- (void)setLineBreakMode:(int)arg1;
- (void)setMinimumFontSize:(float)arg1;
- (float)minimumFontSize;
- (void)setTextColor:(id)arg1;
- (void)setFont:(id)arg1;
- (void)setAdjustsFontSizeToFitWidth:(BOOL)arg1;
- (void)setShadowOffset:(struct CGSize { float x1; float x2; })arg1;
- (void)setShadowColor:(id)arg1;
- (struct CGSize { float x1; float x2; })sizeThatFits:(struct CGSize { float x1; float x2; })arg1;
- (void)setText:(id)arg1;
- (void)layoutSubviews;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)dealloc;

@end
