/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/CoreData.framework/CoreData
 */

@class NSDate, NSNumber, NSManagedObject, NSDictionary, NSString, PFUbiquityImportContext, PFUbiquityKnowledgeVector, NSArray;

@interface PFUbiquityRecordImportConflict : NSObject  {
    NSString *_conflictingObjectGlobalIDStr;
    NSManagedObject *_sourceObject;
    NSDictionary *_conflictingLogContent;
    PFUbiquityKnowledgeVector *_conflictingLogKnowledgeVector;
    PFUbiquityKnowledgeVector *_currentKnowledgeVector;
    int _conflictingLogTransactionType;
    NSDate *_conflictLogDate;
    NSNumber *_conflictingLogTransactionNumber;
    NSArray *_transactionHistory;
    NSDictionary *_globalIDIndexToLocalIDURIMap;
    PFUbiquityImportContext *_importContext;
}

@property(retain) NSString * conflictingObjectGlobalIDStr;
@property(retain) NSManagedObject * sourceObject;
@property(retain) NSDictionary * conflictingLogContent;
@property(retain) PFUbiquityKnowledgeVector * conflictingLogKnowledgeVector;
@property(retain) PFUbiquityKnowledgeVector * currentKnowledgeVector;
@property int conflictingLogTransactionType;
@property(retain) NSDate * conflictLogDate;
@property(retain) NSNumber * conflictingLogTransactionNumber;
@property(retain) NSArray * transactionHistory;
@property(retain) NSDictionary * globalIDIndexToLocalIDURIMap;
@property(retain) PFUbiquityImportContext * importContext;

+ (id)createTransactionLogForTransactionEntry:(id)arg1 withImportContext:(id)arg2 error:(id*)arg3;
+ (id)electAncestorKnowledgeVectorForKnowledgeVector:(id)arg1 withExportingPeerID:(id)arg2 fromPeerSnapshotCollection:(id)arg3;
+ (int)resolvedTypeForConflictingLogType:(int)arg1 andLatestTransactionEntry:(id)arg2 skipObject:(BOOL*)arg3;
+ (void)initialize;

- (id)description;
- (void)dealloc;
- (id)init;
- (id)conflictingLogTransactionNumber;
- (id)conflictLogDate;
- (int)conflictingLogTransactionType;
- (id)conflictingLogContent;
- (id)conflictingObjectGlobalIDStr;
- (id)createSetOfManagedObjectIDsForGlobalIDsInRelationship:(id)arg1 withValue:(id)arg2 withGlobalIDToLocalIDURIMap:(id)arg3 andTransactionLog:(id)arg4;
- (id)globalIDIndexToLocalIDURIMap;
- (id)createSnapshotDictionaryForObjectWithEntry:(id)arg1 inTransactionLog:(id)arg2 withError:(id*)arg3;
- (id)createSnapshotFromManagedObject:(id)arg1;
- (BOOL)resolveMergeConflictForLogContent:(id)arg1 previousSnapshot:(id)arg2 andAncestorSnapshot:(id)arg3 withOldVersion:(unsigned int)arg4 andNewVersion:(unsigned int)arg5 error:(id*)arg6;
- (id)conflictingLogKnowledgeVector;
- (id)createSnapshotDictionaryFromLogEntry:(id)arg1 withError:(id*)arg2;
- (id)transactionHistory;
- (id)_newNormalizedSnapshot:(id)arg1 forObject:(id)arg2;
- (void)setConflictingObjectGlobalIDStr:(id)arg1;
- (void)setConflictingLogContent:(id)arg1;
- (id)createSnapshotFromLogContent:(id)arg1 withTransactionLog:(id)arg2;
- (void)setImportContext:(id)arg1;
- (void)setGlobalIDIndexToLocalIDURIMap:(id)arg1;
- (void)setTransactionHistory:(id)arg1;
- (void)setConflictingLogTransactionNumber:(id)arg1;
- (id)currentKnowledgeVector;
- (void)setConflictingLogKnowledgeVector:(id)arg1;
- (void)setConflictingLogTransactionType:(int)arg1;
- (void)setSourceObject:(id)arg1;
- (void)setConflictLogDate:(id)arg1;
- (void)setCurrentKnowledgeVector:(id)arg1;
- (id)importContext;
- (BOOL)resolveConflict:(id*)arg1;
- (id)sourceObject;

@end
