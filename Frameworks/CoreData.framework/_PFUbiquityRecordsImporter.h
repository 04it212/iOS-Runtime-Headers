/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreData.framework/CoreData
 */

@class NSLock, NSMutableDictionary, NSMutableSet, NSObject<OS_dispatch_queue>, NSObject<OS_dispatch_source>, NSOperationQueue, NSRecursiveLock, NSSet, NSString, PFUbiquityLocation;

@interface _PFUbiquityRecordsImporter : NSObject <_PFUbiquityRecordImportOperationDelegate, NSManagedObjectContextFaultingDelegate, PFUbiquityImportScanOperationDelegate, PFUbiquityBaselineRollOperationDelegate, PFUbiquityBaselineRecoveryOperationDelegate, PFUbiquityBaselineRollResponseOperationDelegate> {
    BOOL _allowBaselineRoll;
    NSSet *_failedPendingTransactionLogLocations;
    NSMutableSet *_failedPendingTransactionLogs;
    BOOL _hasScheduledFailedLogsBlock;
    BOOL _hasScheduledPendingLogsBlock;
    BOOL _importOnlyActiveStores;
    NSOperationQueue *_importQueue;
    BOOL _isMonitoring;
    NSString *_localPeerID;
    NSObject<OS_dispatch_source> *_logRestartTimer;
    unsigned int _numPendingNotifications;
    unsigned int _pendingImportOperationsCount;
    NSLock *_pendingLocationsLock;
    NSMutableDictionary *_pendingNotificationUserInfo;
    NSMutableSet *_pendingTransactionLogLocations;
    NSObject<OS_dispatch_queue> *_privateQueue;
    NSRecursiveLock *_schedulingLock;
    BOOL _throttleNotifications;
    PFUbiquityLocation *_ubiquityRootLocation;
}

@property BOOL allowBaselineRoll;
@property(readonly) NSSet * failedPendingTransactionLogLocations;
@property BOOL importOnlyActiveStores;
@property(readonly) NSOperationQueue * importQueue;
@property(readonly) BOOL isMonitoring;
@property(readonly) NSString * localPeerID;
@property NSObject<OS_dispatch_source> * logRestartTimer;
@property(readonly) NSSet * pendingTransactionLogLocations;
@property(readonly) NSRecursiveLock * schedulingLock;
@property BOOL throttleNotifications;
@property(readonly) PFUbiquityLocation * ubiquityRootLocation;

+ (void)afterDelay:(double)arg1 executeBlockOnRootQueue:(id)arg2;
+ (BOOL)canProcessContentsOfUbiquityRootPath:(id)arg1;
+ (void)executeBlockOnRootQueue:(id)arg1;
+ (void)initialize;

- (void)_applicationResumed:(id)arg1;
- (BOOL)allowBaselineRoll;
- (void)awakeFromLaunch:(BOOL)arg1;
- (void)baselineRollOperationEncounteredAnInconsistentBaselineState:(id)arg1;
- (void)baselineRollOperationWasUnableToLockPersistentStore:(id)arg1;
- (BOOL)canProcessTransactionLogWithScore:(id)arg1 afterLogWithScore:(id)arg2;
- (BOOL)checkSchedulingContextForMissingLocalPeerOperations:(id)arg1 error:(id*)arg2;
- (int)compareScoreKnowledgeVector:(id)arg1 withScoreDictionary:(id)arg2;
- (int)context:(id)arg1 shouldHandleInaccessibleFault:(id)arg2 forObjectID:(id)arg3 andTrigger:(id)arg4;
- (id)createDictionaryOfStoreNameToLocations:(id)arg1;
- (id)createSortedOperationsArrayForLogLocationsInContext:(id)arg1 isFirstImport:(BOOL)arg2;
- (void)dealloc;
- (id)description;
- (void)executeBlockOnPrivateQueue:(id)arg1;
- (id)failedPendingTransactionLogLocations;
- (void)filePresenter:(id)arg1 wasNotifiedOfTransactionLogLocation:(id)arg2;
- (BOOL)importOnlyActiveStores;
- (id)importQueue;
- (id)init;
- (id)initWithLocalPeerID:(id)arg1 andUbiquityRootLocation:(id)arg2;
- (BOOL)isMonitoring;
- (id)localPeerID;
- (id)logRestartTimer;
- (void)metadataInconsistencyDetectedForStore:(id)arg1;
- (void)operation:(id)arg1 failedWithError:(id)arg2;
- (void)operationDidFinish:(id)arg1;
- (void)operationWasInterruptedDuringImport:(id)arg1;
- (id)pendingTransactionLogLocations;
- (void)postImportNotificationForStoreName:(id)arg1 andLocalPeerID:(id)arg2 withUserInfo:(id)arg3;
- (void)recoverFailedLogs;
- (void)recoveryOperation:(id)arg1 didReplaceLocalStoreFileWithBaseline:(id)arg2;
- (void)recoveryOperation:(id)arg1 encounteredAnError:(id)arg2 duringRecoveryOfBaseline:(id)arg3;
- (void)requestBaselineRollForStore:(id)arg1;
- (void)rollResponseOperation:(id)arg1 encounteredAnError:(id)arg2 whileTryingToAdoptBaseline:(id)arg3;
- (void)rollResponseOperation:(id)arg1 successfullyAdoptedBaseline:(id)arg2;
- (void)scanOperation:(id)arg1 failedWithError:(id)arg2;
- (BOOL)scanOperationFinished:(id)arg1 withDiscoveredLogLocation:(id)arg2 error:(id*)arg3;
- (void)scheduleBaselineRecoveryOperationWithActiveBaselineOperation:(id)arg1;
- (void)scheduleBaselineRollResponseOperationForBaselineAtLocation:(id)arg1;
- (void)schedulePendingLogs;
- (void)scheduleRecoveryTimer;
- (BOOL)scheduleTransactionLogOperations:(id)arg1 synchronous:(BOOL)arg2 error:(id*)arg3;
- (BOOL)scheduleUbiquityRootScan:(BOOL)arg1 withLocalPeerLogs:(BOOL)arg2 error:(id*)arg3;
- (id)schedulingLock;
- (void)setAllowBaselineRoll:(BOOL)arg1;
- (void)setImportOnlyActiveStores:(BOOL)arg1;
- (void)setLogRestartTimer:(id)arg1;
- (void)setThrottleNotifications:(BOOL)arg1;
- (BOOL)shouldThrottleNotificationsWithOperation:(id)arg1;
- (BOOL)startMonitor:(id*)arg1;
- (void)stopMonitor;
- (BOOL)throttleNotifications;
- (void)ubiquityIdentityChanged:(id)arg1;
- (id)ubiquityRootLocation;

@end
