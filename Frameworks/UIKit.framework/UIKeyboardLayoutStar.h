/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@class NSMutableArray, NSMutableDictionary, NSMutableSet, NSString, NSTimer, UIKBKey, UIKBKeyboard, UIKBKeyplane, UIKBKeyplaneView;

@interface UIKeyboardLayoutStar : UIKeyboardLayout {
    struct CGPoint { 
        float x; 
        float y; 
    struct USet { } *m_accentInfo;
    NSMutableDictionary *m_activatedKeys;
    NSTimer *m_activatedTimer;
    UIKBKey *m_activeKey;
    NSMutableDictionary *m_allKeyplaneViews;
    NSMutableDictionary *m_allKeys;
    NSInteger m_appearance;
    SEL m_deleteAction;
    SEL m_deleteLongAction;
    id m_deleteTarget;
    BOOL m_didLongPress;
    BOOL m_dragChangedKey;
    } m_dragPoint;
    BOOL m_dragged;
    struct USet { } *m_hasAccents;
    NSMutableArray *m_keyIndexMap;
    UIKBKeyboard *m_keyboard;
    NSString *m_keyboardName;
    NSInteger m_keyboardType;
    NSMutableDictionary *m_keyboards;
    UIKBKeyplane *m_keyplane;
    NSString *m_keyplaneName;
    UIKBKeyplaneView *m_keyplaneView;
    NSString *m_localizedInputMode;
    NSInteger m_preferredTrackingChangeCount;
    NSMutableDictionary *m_renderedKeys;
    SEL m_returnAction;
    SEL m_returnLongAction;
    id m_returnTarget;
    BOOL m_secureTextEntry;
    BOOL m_settingShift;
    BOOL m_shift;
    SEL m_spaceAction;
    SEL m_spaceLongAction;
    id m_spaceTarget;
    NSMutableDictionary *m_states;
    BOOL m_touchDownInMoreKey;
    NSMutableSet *m_variantKeyTokens;
}

@property(retain) UIKBKey *activeKey;
@property(readonly) UIKBKeyboard *keyboard;
@property(copy) NSString *keyboardName;
@property(readonly) UIKBKeyplane *keyplane;
@property(copy) NSString *keyplaneName;
@property BOOL didLongPress;
@property BOOL shift;

- (id)activeKey;
- (void)addKeyToActivatedSet:(id)arg1;
- (id)cacheIdentifierForKeyplaneNamed:(id)arg1 withVisualStyle:(id)arg2;
- (id)cacheIdentifierForState:(NSInteger)arg1 ofKey:(id)arg2;
- (void)cancelPeriodicProcessActivatedSet;
- (void)confirmAction;
- (void)deactivateActiveKeys;
- (void)deactivateAllInActivatedSet;
- (void)dealloc;
- (void)deleteAction;
- (BOOL)didLongPress;
- (void)didRotate;
- (NSInteger)displayTypeHintForMoreKey;
- (NSInteger)displayTypeHintForShiftKey;
- (NSUInteger)downActionFlagsForKey:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (BOOL)isLongPressedKey:(id)arg1;
- (BOOL)isShiftKeyBeingHeld;
- (BOOL)isShiftKeyPlaneChooser;
- (BOOL)keyHasAccentedVariants:(id)arg1;
- (id)keyHitTest:(struct CGPoint { float x1; float x2; })arg1 touchStage:(NSInteger)arg2 atTime:(double)arg3 withPathInfo:(struct { unsigned char x1; unsigned char x2; unsigned char x3; float x4; float x5; struct CGPoint { float x_6_1_1; float x_6_1_2; } x6; void *x7; }*)arg4;
- (id)keyHitTest:(struct CGPoint { float x1; float x2; })arg1;
- (id)keyHitTestClosestToPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)keyHitTestContainingPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)keyHitTestWithoutCharging:(struct CGPoint { float x1; float x2; })arg1;
- (id)keyboard;
- (id)keyboardName;
- (id)keyplane;
- (id)keyplaneName;
- (void)longPressAction;
- (void)nextCandidatesAction;
- (void)periodicProcessActivatedSet:(id)arg1;
- (BOOL)pointInside:(struct CGPoint { float x1; float x2; })arg1 withEvent:(id)arg2;
- (void)removeKeyFromActivatedSet:(id)arg1;
- (void)restoreDefaultsForAllKeys;
- (void)restoreDefaultsForKey:(id)arg1;
- (void)schedulePeriodicProcessActivatedSet;
- (id)scriptingInfoWithChildren;
- (void)sendStringAction:(id)arg1 forKey:(id)arg2;
- (void)setAction:(SEL)arg1 forKey:(id)arg2;
- (void)setActiveKey:(id)arg1;
- (void)setCurrencyKeysForCurrentLocale:(id)arg1;
- (void)setDidLongPress:(BOOL)arg1;
- (void)setKeyboardName:(id)arg1 appearance:(NSInteger)arg2;
- (void)setKeyboardName:(id)arg1;
- (void)setKeyplaneName:(id)arg1;
- (void)setLabel:(id)arg1 forKey:(id)arg2;
- (void)setLongPressAction:(SEL)arg1 forKey:(id)arg2;
- (void)setReturnKeyType:(NSInteger)arg1;
- (void)setShift:(BOOL)arg1;
- (void)setState:(NSInteger)arg1 forKey:(id)arg2;
- (void)setTarget:(id)arg1 forKey:(id)arg2;
- (BOOL)shift;
- (void)showKeyboardType:(NSInteger)arg1 appearance:(NSInteger)arg2 orientation:(id)arg3;
- (void)showPopupVariantsForKey:(id)arg1;
- (void)touchDown:(struct __GSEvent { }*)arg1 withPathInfo:(struct { unsigned char x1; unsigned char x2; unsigned char x3; float x4; float x5; struct CGPoint { float x_6_1_1; float x_6_1_2; } x6; void *x7; }*)arg2;
- (void)touchDownWithKey:(id)arg1 atPoint:(struct CGPoint { float x1; float x2; })arg2;
- (void)touchDragged:(struct __GSEvent { }*)arg1 withPathInfo:(struct { unsigned char x1; unsigned char x2; unsigned char x3; float x4; float x5; struct CGPoint { float x_6_1_1; float x_6_1_2; } x6; void *x7; }*)arg2;
- (void)touchUp:(struct __GSEvent { }*)arg1 withPathInfo:(struct { unsigned char x1; unsigned char x2; unsigned char x3; float x4; float x5; struct CGPoint { float x_6_1_1; float x_6_1_2; } x6; void *x7; }*)arg2;
- (NSUInteger)upActionFlagsForKey:(id)arg1;
- (void)updateKeyCentroids:(BOOL)arg1;
- (void)updateMoreAndInternationalKeys;
- (void)updateReturnKey;
- (BOOL)usesAutoShift;

@end
