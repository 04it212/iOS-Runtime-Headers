/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@class NSTimer, UIKBKeyboard, UISwipeGestureRecognizer, UIPinchGestureRecognizer, UIView<UIKeyboardRivenTransitionView>, UIView<UIKeyboardRivenCenterView>, NSMutableSet, UIKBKeyplaneView, UIView, UIKBKeyplane, UIKBKey, NSString, NSMutableArray, NSMutableDictionary;

@interface UIKeyboardLayoutStar : UIKeyboardLayout  {
    UIKBKeyboard *_keyboard;
    UIKBKeyplane *_keyplane;
    NSString *_keyboardName;
    NSString *_keyplaneName;
    int _appearance;
    UIKBKey *_activeKey;
    UIKBKeyplaneView *_keyplaneView;
    UIView *_savedKeyplaneView;
    UIView *_animationKeyplaneBackground;
    int _keyboardType;
    UIView *_animationBackgroundView;
    UIView *_animationFromView;
    UIView *_animationToView;
    struct CGPoint { 
        float x; 
        float y; 
    } _initialDragPoint;
    struct CGPoint { 
        float x; 
        float y; 
    } _dragPrevPoint;
    float _dragValues[4];
    float _dragVelocity;
    double _prevTouchUpTime;
    double _prevTouchDownTime;
    int _prevUpActions;
    NSMutableDictionary *_keyboards;
    NSMutableDictionary *_states;
    NSMutableDictionary *_allKeys;
    NSMutableDictionary *_renderedKeys;
    NSMutableDictionary *_variantKeys;
    NSMutableDictionary *_allKeyplaneViews;
    NSMutableSet *_allKeyplaneKeycaps;
    NSMutableSet *_variantKeyTokens;
    NSMutableSet *_validInputStrings;
    NSString *_localizedInputKey;
    NSMutableArray *_keyIndexMap;
    NSMutableDictionary *_activatedKeys;
    struct __CFDictionary { } *_extendedTouchInfoMap;
    NSTimer *_activatedTimer;
    int _preferredTrackingChangeCount;
    int _shiftTrackingChangeCount;
    NSMutableSet *_accentInfo;
    NSMutableSet *_hasAccents;
    id _spaceTarget;
    SEL _spaceAction;
    SEL _spaceLongAction;
    id _returnTarget;
    SEL _returnAction;
    SEL _returnLongAction;
    id _deleteTarget;
    SEL _deleteAction;
    SEL _deleteLongAction;
    BOOL _secureTextEntry;
    BOOL _shift;
    BOOL _autoshift;
    BOOL _settingShift;
    BOOL _didLongPress;
    BOOL _dragged;
    BOOL _dragChangedKey;
    BOOL _touchDownInMoreKey;
    BOOL _touchDownInShiftKey;
    BOOL _wasShifted;
    BOOL _dragDismissStarted;
    BOOL _currentInputModeVariantsOnly;
    BOOL _previousTouchInMore;
    BOOL _keyplaneDidTransition;
    BOOL _supportsSplit;
    BOOL _shiftLockReady;
    double _shiftLockFirstTapTime;
    UISwipeGestureRecognizer *_rightSwipeRecognizer;
    UISwipeGestureRecognizer *_leftSwipeRecognizer;
    UISwipeGestureRecognizer *_upSwipeRecognizer;
    UIPinchGestureRecognizer *_pinchRecognizer;
    UIView<UIKeyboardRivenTransitionView> *_transitionView;
    UIView<UIKeyboardRivenCenterView> *_centerView;
    float _initialSplitProgress;
    float _initialPinchSeparation;
    float _lastPinchSeparation;
    float _initialScale;
    BOOL _pinchDetected;
    BOOL _preRotateShift;
    NSString *_preRotateKeyplaneName;
    struct CGPoint { 
        float x; 
        float y; 
    } _keyPeripheralInset;
    int _lastFlickDirection;
    UIView *_flickPopupView;
    NSMutableDictionary *_compositeImages;
    NSTimer *_flickPopuptimer;
    id _touchInfo;
    BOOL _popupViewIsShown;
    UIView *_dimKeyboardImageView;
    BOOL _keyboardImageViewIsDim;
}

@property(readonly) NSString * localizedInputMode;
@property(getter=isRotating,readonly) BOOL rotating;
@property BOOL didLongPress;
@property BOOL autoShift;
@property BOOL shift;
@property(retain) UIKBKey * activeKey;
@property(copy) NSString * keyplaneName;
@property(copy) NSString * keyboardName;
@property(readonly) UIKBKeyplane * keyplane;
@property(readonly) UIKBKeyboard * keyboard;

+ (void)_initializeSafeCategory;

- (void)willRotate;
- (id)keyplaneName;
- (void)updateBackground:(id)arg1;
- (void)updateKeys;
- (id)localizedInputMode;
- (id)keyboardWithName:(id)arg1;
- (id)visualStyleForRivenStyle:(unsigned int)arg1;
- (void)updateKeyboardForKeyplane:(id)arg1;
- (void)setKeyboardName:(id)arg1 appearance:(int)arg2;
- (BOOL)keyboardWillSplit;
- (void)updateLocalizedKeys:(id)arg1;
- (void)setKeyplaneName:(id)arg1;
- (void)setCurrencyKeysForCurrentLocale:(id)arg1;
- (int)displayTypeHintForMoreKey;
- (int)displayTypeHintForShiftKey;
- (int)displayTypeHintForKeyplaneSwitchKey:(id)arg1;
- (void)setKeyViewFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 forKey:(id)arg2;
- (id)findMoreKeyOnKeyPlane:(id)arg1 onLeftMostSide:(BOOL)arg2;
- (id)findKanaKeyPlaneSwitchKeyOnKeyPlane:(id)arg1;
- (void)updateLatinAccentsKey;
- (void)updateMoreAndInternationalKeys;
- (int)stateForKey:(id)arg1;
- (void)setState:(int)arg1 forKey:(id)arg2;
- (void)addKeyToActivatedSet:(id)arg1;
- (void)removeKeyFromActivatedSet:(id)arg1;
- (void)schedulePeriodicProcessActivatedSet;
- (void)cancelPeriodicProcessActivatedSet;
- (void)periodicProcessActivatedSet:(id)arg1;
- (void)deactivateAllInActivatedSet;
- (id)cacheIdentifierForState:(int)arg1 ofKey:(id)arg2;
- (id)cacheIdentifierForKeyplaneNamed:(id)arg1 withVisualStyle:(id)arg2;
- (id)keyHitTestClosestToPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)keyHitTestWithoutCharging:(struct CGPoint { float x1; float x2; })arg1;
- (id)keyHitTest:(struct CGPoint { float x1; float x2; })arg1 touchStage:(int)arg2 atTime:(double)arg3 withTouch:(id)arg4;
- (void)sendStringAction:(id)arg1 forKey:(id)arg2;
- (void)setLabel:(id)arg1 forKey:(id)arg2;
- (void)setAction:(SEL)arg1 forKey:(id)arg2;
- (void)setLongPressAction:(SEL)arg1 forKey:(id)arg2;
- (void)nextCandidatesAction;
- (void)confirmAction;
- (void)showPopupVariantsForKey:(id)arg1;
- (void)addPinchRecognizerAfterDelay:(float)arg1;
- (void)touchCancelled:(id)arg1;
- (void)uninstallGestureRecognizers;
- (void)pinchSeparationUpdate:(float)arg1;
- (void)merge;
- (void)finishSplit;
- (void)pinchSeparationUntouch;
- (void)pinchDetected:(id)arg1;
- (void)swipeDetected:(id)arg1;
- (id)infoForTouch:(id)arg1;
- (id)generateInfoForTouch:(id)arg1;
- (void)clearInfoForTouch:(id)arg1;
- (void)clearAllTouchInfo;
- (id)touchForKey:(id)arg1;
- (id)activeTouchForKey:(id)arg1;
- (id)spaceKey;
- (BOOL)keyHasAccentedVariants:(id)arg1;
- (void)downActionShiftWithKey:(id)arg1;
- (void)upActionShift;
- (BOOL)usesAutoShift;
- (unsigned int)stateForShiftKey:(id)arg1;
- (void)updateShiftKeyState;
- (void)setAutoshift:(BOOL)arg1;
- (void)updateKeyCentroids;
- (BOOL)shouldRetestKey:(id)arg1 withKeyplane:(id)arg2;
- (struct CGPoint { float x1; float x2; })applyError:(struct CGPoint { float x1; float x2; })arg1 toKey:(id)arg2;
- (BOOL)didLongPress;
- (void)setDidLongPress:(BOOL)arg1;
- (BOOL)autoShift;
- (void)setActiveKey:(id)arg1;
- (void)setKeyboardName:(id)arg1;
- (id)keyplane;
- (id)keyWithRepresentedString:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })frameForKeyWithRepresentedString:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })frameForLastKeyWithRepresentedString:(id)arg1;
- (id)popupKeyViews;
- (void)setKeyForTouchInfo:(id)arg1 key:(id)arg2;
- (id)keyHitTestContainingPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)keyHitTestContainingPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)handleFlick:(id)arg1;
- (void)showFlickView:(int)arg1 withKey:(id)arg2 flickString:(id)arg3;
- (id)getPopupBackgroundImageForKey:(id)arg1 direction:(int)arg2 popupInfo:(id)arg3 rect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg4;
- (id)getFlickCompositeImageForKey:(id)arg1 direction:(int)arg2 rect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3;
- (id)overlayCharacterImageForKey:(id)arg1 direction:(int)arg2 rect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3 flickString:(id)arg4 popupInfo:(id)arg5;
- (void)handlePopupView:(id)arg1;
- (void)setKeyboardDim:(BOOL)arg1;
- (void)showPopupView:(int)arg1 withKey:(id)arg2 popupInfo:(id)arg3 force:(BOOL)arg4;
- (void)activateCompositeKey:(id)arg1 direction:(int)arg2 flickString:(id)arg3 popupInfo:(id)arg4;
- (void)split;
- (BOOL)shift;
- (void)setTarget:(id)arg1 forKey:(id)arg2;
- (void)setAutoShift:(BOOL)arg1;
- (void)setKeyboardAppearance:(int)arg1;
- (void)installGestureRecognizers;
- (void)setCompositeImage:(id)arg1 forKey:(id)arg2;
- (id)compositeImageForKey:(id)arg1;
- (unsigned int)downActionFlagsForKey:(id)arg1;
- (unsigned int)upActionFlagsForKey:(id)arg1;
- (void)restoreDefaultsForKey:(id)arg1;
- (void)deleteAction;
- (id)activeKey;
- (id)keyHitTest:(struct CGPoint { float x1; float x2; })arg1;
- (BOOL)isLongPressedKey:(id)arg1;
- (void)touchDownWithKey:(id)arg1 atPoint:(struct CGPoint { float x1; float x2; })arg2;
- (void)touchUp:(id)arg1;
- (void)didRotate;
- (void)setReturnKeyEnabled:(BOOL)arg1 withDisplayName:(id)arg2 withType:(int)arg3;
- (void)didClearInput;
- (BOOL)performReturnAction;
- (id)candidateList;
- (void)touchDown:(id)arg1;
- (void)touchDragged:(id)arg1;
- (void)changeToKeyplane:(id)arg1;
- (id)baseKeyForString:(id)arg1;
- (id)keyplaneForKey:(id)arg1;
- (id)simulateTouchForCharacter:(id)arg1 errorVector:(struct CGPoint { float x1; float x2; })arg2 shouldTypeVariants:(BOOL)arg3 baseKeyForVariants:(BOOL)arg4;
- (void)deactivateActiveKeys;
- (BOOL)shouldShowIndicator;
- (id)activationIndicatorView;
- (BOOL)doesKeyCharging;
- (void)showKeyboardType:(int)arg1 appearance:(int)arg2 orientation:(id)arg3 withShift:(BOOL)arg4;
- (void)restoreDefaultsForAllKeys;
- (BOOL)canProduceString:(id)arg1;
- (float)hitBuffer;
- (BOOL)isShiftKeyPlaneChooser;
- (BOOL)isShiftKeyBeingHeld;
- (id)keyboardName;
- (void)longPressAction;
- (BOOL)pointInside:(struct CGPoint { float x1; float x2; })arg1 withEvent:(id)arg2;
- (id)keyboard;
- (BOOL)gestureRecognizerShouldBegin:(id)arg1;
- (void)removeFromSuperview;
- (BOOL)isRotating;
- (BOOL)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (id)scriptingInfoWithChildren;
- (void)dealloc;
- (void)setShift:(BOOL)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (id)_accessibilityCreateElementForKey:(id)arg1;
- (id)_accessibilityInternalData;
- (id)_accessibilityKeys;
- (id)_accessibilityHitTest:(struct CGPoint { float x1; float x2; })arg1 withEvent:(id)arg2;
- (BOOL)accessibilityTreeHidden;
- (id)accessibilityLabel;
- (int)indexOfAccessibilityElement:(id)arg1;
- (id)accessibilityElementAtIndex:(int)arg1;
- (int)accessibilityElementCount;
- (BOOL)isAccessibilityElement;
- (unsigned long long)accessibilityTraits;

@end
