/* Generated by RuntimeBrowser on iPhone OS 4.1
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */



@interface UIImage : NSObject 
{
    void *_imageRef;
    float _scale;
    struct { 
        unsigned int named : 1; 
        unsigned int imageOrientation : 3; 
        unsigned int cached : 1; 
        unsigned int stretchable : 1; 
        unsigned int hasBeenCached : 1; 
    } _imageFlags;
}

@property(readonly) CGSize size;
@property(readonly) CGImage *CGImage;
@property(readonly) NSInteger imageOrientation;
@property(readonly) float scale;
@property(readonly) NSInteger leftCapWidth;
@property(readonly) NSInteger topCapHeight;

+ (void)initialize;
+ (id)imageNamed:(id)arg1;
+ (id)imageWithContentsOfFile:(id)arg1;
+ (id)imageWithData:(id)arg1;
+ (id)imageWithData:(id)arg1 scale:(float)arg2;
+ (id)imageWithCGImage:(struct CGImage { }*)arg1;
+ (id)applicationImageNamed:(id)arg1;
+ (id)kitImageNamed:(id)arg1;
+ (id)imageNamed:(id)arg1 inBundle:(id)arg2;
+ (id)_imageWithContentsOfFileIfPathExists:(id)arg1;
+ (BOOL)getDefaultDesktopImage:(id*)arg1 composedPortraitImage:(id*)arg2 composedLandscapeImage:(id*)arg3 forVariant:(NSInteger)arg4;
+ (BOOL)getDefaultDesktopImageIfExists:(id*)arg1 composedPortraitImage:(id*)arg2 composedLandscapeImage:(id*)arg3 forVariant:(NSInteger)arg4;
+ (id)defaultDesktopImage;
+ (id)_defaultBackgroundGradient;
+ (void)setDesktopImageData:(id)arg1 composedPortraitImageData:(id)arg2 composedLandscapeImageData:(id)arg3 forVariant:(NSInteger)arg4;
+ (void)removeComposedWallpaper;
+ (void)removeAllWallpaper;
+ (BOOL)getDefaultDesktopThumbnailImage:(id*)arg1 forVariant:(NSInteger)arg2;
+ (void)setDesktopThumbnailImageData:(id)arg1 forVariant:(NSInteger)arg2;
+ (id)desktopImagePathForVariant:(NSInteger)arg1;
+ (id)desktopImageThumbnailPathForVariant:(NSInteger)arg1;
+ (id)imageFromAlbumArtData:(id)arg1 height:(NSInteger)arg2 width:(NSInteger)arg3 bytesPerRow:(NSInteger)arg4 cache:(BOOL)arg5;
+ (void)setPreferredSharedImageScale:(float)arg1;
+ (id)imageAtPath:(id)arg1;
+ (void)removeImageNameFromCache:(id)arg1;
+ (void)_flushCacheOnMemoryWarning:(id)arg1;
+ (NSInteger)_iconVariantForUIApplicationIconFormat:(NSInteger)arg1 scale:(float*)arg2;
+ (id)_applicationIconImageForBundleIdentifier:(id)arg1 roleIdentifier:(id)arg2 format:(NSInteger)arg3;
+ (id)_applicationIconImageForBundleIdentifier:(id)arg1 roleIdentifier:(id)arg2 format:(NSInteger)arg3 scale:(float)arg4;
+ (id)_iconForResourceProxy:(id)arg1 variant:(NSInteger)arg2 variantsScale:(float)arg3;
+ (id)_iconForResourceProxy:(id)arg1 format:(NSInteger)arg2;
+ (id)imageWithCGImage:(struct CGImage { }*)arg1 scale:(float)arg2 orientation:(NSInteger)arg3;
+ (void)_flushSharedImageCache;
+ (void)_initializeSafeCategory;
+ (id)abImageNamed:(id)arg1;
+ (id)sharedImageNamed:(id)arg1 size:(struct CGSize { float x1; float x2; })arg2 drawUsingBlock:(id)arg3;
+ (id)tpImageNamed:(id)arg1 inBundle:(id)arg2;
+ (id)imageFromAlbumArtData:(id)arg1 artworkInfo:(struct MLArtworkInstanceInfo { struct MLArtworkFormatSpec { NSUInteger x_1_1_1; NSUInteger x_1_1_2; NSUInteger x_1_1_3; NSUInteger x_1_1_4; NSInteger x_1_1_5; NSInteger x_1_1_6; } x1; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_2_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_2_1_2; } x2; }*)arg2 cache:(BOOL)arg3;
+ (id)_mapkit_imageNamed:(id)arg1;
+ (struct CGImage { }*)missingMapTileImage;
+ (id)_adlib_imageNamed:(id)arg1;
+ (id)_balloonMask:(BOOL)arg1;
+ (id)_highlightImage;
+ (id)_imageWithColor:(BOOL)arg1;
+ (id)_balloonImage:(BOOL)arg1 color:(BOOL)arg2;
+ (id)ckImageWithData:(id)arg1;
+ (id)ckImageNamed:(id)arg1;
+ (id)nikeBackgroundImage;
+ (id)nikeRunLandscapeBackgroundImage;
+ (id)reversedNikeRunLandscapeBackgroundImage;

- (id)initWithContentsOfFile:(id)arg1;
- (id)initWithData:(id)arg1;
- (id)initWithData:(id)arg1 scale:(float)arg2;
- (id)initWithCGImage:(struct CGImage { }*)arg1;
- (id)initWithCGImage:(struct CGImage { }*)arg1 scale:(float)arg2 orientation:(NSInteger)arg3;
- (struct CGImage { }*)CGImage;
- (NSInteger)imageOrientation;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_contentStretch;
- (BOOL)_isStretchable;
- (void)drawAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)drawAtPoint:(struct CGPoint { float x1; float x2; })arg1 blendMode:(NSInteger)arg2 alpha:(float)arg3;
- (void)drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)drawInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 blendMode:(NSInteger)arg2 alpha:(float)arg3;
- (void)drawAsPatternInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (NSInteger)leftCapWidth;
- (NSInteger)topCapHeight;
- (id)stretchableImageWithLeftCapWidth:(NSInteger)arg1 topCapHeight:(NSInteger)arg2;
- (id)_automationID;
- (id)initWithContentsOfFile:(id)arg1 cache:(BOOL)arg2;
- (id)_initWithData:(id)arg1 preserveScale:(BOOL)arg2;
- (id)initWithCGImage:(struct CGImage { }*)arg1 imageOrientation:(NSInteger)arg2;
- (id)_initWithIOSurface:(struct __IOSurface { }*)arg1 scale:(float)arg2 orientation:(NSInteger)arg3;
- (id)_initWithIOSurface:(struct __IOSurface { }*)arg1 imageOrientation:(NSInteger)arg2;
- (id)initWithIOSurface:(struct __IOSurface { }*)arg1;
- (struct __IOSurface { }*)ioSurface;
- (id)initWithData:(id)arg1 cache:(BOOL)arg2;
- (id)initWithImageRef:(struct CGImage { }*)arg1;
- (struct CGImage { }*)imageRef;
- (void)compositeToRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 operation:(NSInteger)arg3 fraction:(float)arg4;
- (void)compositeToPoint:(struct CGPoint { float x1; float x2; })arg1 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 operation:(NSInteger)arg3 fraction:(float)arg4;
- (void)compositeToPoint:(struct CGPoint { float x1; float x2; })arg1 operation:(NSInteger)arg2 fraction:(float)arg3;
- (void)compositeToPoint:(struct CGPoint { float x1; float x2; })arg1 operation:(NSInteger)arg2;
- (void)draw9PartImageWithSliceRects:(struct { struct { struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_1_1_1; struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_1_1_2; struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_3_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_3_2_2; } x_1_1_3; } x1; struct { struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_2_1_1; struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_2_1_2; struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_3_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_3_2_2; } x_2_1_3; } x2; struct { struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_3_1_1; struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_3_1_2; struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_3_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_3_2_2; } x_3_1_3; } x3; })arg1 inRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (void)draw9PartImageWithSliceRects:(struct { struct { struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_1_1_1; struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_1_1_2; struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_3_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_3_2_2; } x_1_1_3; } x1; struct { struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_2_1_1; struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_2_1_2; struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_3_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_3_2_2; } x_2_1_3; } x2; struct { struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_3_1_1; struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_3_1_2; struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_3_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_3_2_2; } x_3_1_3; } x3; })arg1 inRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 fraction:(float)arg3;
- (void)draw9PartImageWithSliceRects:(struct { struct { struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_1_1_1; struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_1_1_2; struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_3_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_3_2_2; } x_1_1_3; } x1; struct { struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_2_1_1; struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_2_1_2; struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_3_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_3_2_2; } x_2_1_3; } x2; struct { struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_3_1_1; struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_3_1_2; struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_3_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_3_2_2; } x_3_1_3; } x3; })arg1 inRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 operation:(NSInteger)arg3 fraction:(float)arg4;
- (void)draw3PartImageWithSliceRects:(struct { struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_1_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_1_1_2; } x1; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_2_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_2_1_2; } x2; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_3_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_3_1_2; } x3; })arg1 inRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (void)draw3PartImageWithSliceRects:(struct { struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_1_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_1_1_2; } x1; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_2_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_2_1_2; } x2; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_3_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_3_1_2; } x3; })arg1 inRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 fraction:(float)arg3;
- (void)draw1PartImageInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)draw1PartImageInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 fraction:(float)arg2;
- (struct CGColor { }*)_patternColor;
- (void)_setCached:(BOOL)arg1;
- (BOOL)_isCached;
- (BOOL)_hasBeenCached;
- (void)_setNamed:(BOOL)arg1;
- (BOOL)_isNamed;
- (id)_flatImageWithWhite:(float)arg1 alpha:(float)arg2;
- (id)_bezeledImageWithShadowRed:(float)arg1 green:(float)arg2 blue:(float)arg3 alpha:(float)arg4 fillRed:(float)arg5 green:(float)arg6 blue:(float)arg7 alpha:(float)arg8 drawShadow:(BOOL)arg9;
- (id)_doubleBezeledImageWithExteriorShadowRed:(float)arg1 green:(float)arg2 blue:(float)arg3 alpha:(float)arg4 interiorShadowRed:(float)arg5 green:(float)arg6 blue:(float)arg7 alpha:(float)arg8 fillRed:(float)arg9 green:(float)arg10 blue:(float)arg11 alpha:(float)arg12;
- (id)_imageScaledToProportion:(float)arg1 interpolationQuality:(NSInteger)arg2;
- (id)_applicationIconImageForFormat:(NSInteger)arg1 precomposed:(BOOL)arg2;
- (id)_applicationIconImageForFormat:(NSInteger)arg1 precomposed:(BOOL)arg2 scale:(float)arg3;
- (float)scale;
- (struct CGSize { float x1; float x2; })size;
- (void)draw3PartImageWithSliceRects:(struct { struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_1_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_1_1_2; } x1; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_2_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_2_1_2; } x2; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_3_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_3_1_2; } x3; })arg1 inRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 operation:(NSInteger)arg3 fraction:(float)arg4;
- (void)draw1PartImageInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 fraction:(float)arg2 operation:(NSInteger)arg3;
- (id)patternColor;
- (void)dealloc;
- (void)setCacheNameKey:(id)arg1;
- (id)cacheNameKey;
- (void)setCacheSizeKey:(id)arg1;
- (id)cacheSizeKey;
- (void)removeFromCache;
- (void)abpis_swizzleClass;
- (id)imageWithRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (BOOL)isCoverflowPlaceholder;
- (id)_mapkit_createImagesOfSize:(struct CGSize { float x1; float x2; })arg1;
- (id)_createCGImagesFromHorizontalSequenceOfSize:(struct CGSize { float x1; float x2; })arg1;
- (id)_createCGImagesFromVerticalSequenceOfSize:(struct CGSize { float x1; float x2; })arg1;
- (id)newImageRotatedByDegrees:(float)arg1;
- (id)newImageWithOrientation:(NSInteger)arg1;
- (void*)PL_imageContents;
- (void)draw9PartImageWithSliceRects:(struct { struct { struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_1_1_1; struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_1_1_2; struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_3_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_3_2_2; } x_1_1_3; } x1; struct { struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_2_1_1; struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_2_1_2; struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_3_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_3_2_2; } x_2_1_3; } x2; struct { struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_3_1_1; struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_3_1_2; struct CGRect { struct CGPoint { float x_1_3_1; float x_1_3_2; } x_3_2_1; struct CGSize { float x_2_3_1; float x_2_3_2; } x_3_2_2; } x_3_1_3; } x3; })arg1 usingSliceEdges:(NSInteger)arg2 inRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3 operation:(NSInteger)arg4 fraction:(float)arg5;
- (id)GKScaleToSize:(struct CGSize { float x1; float x2; })arg1;
- (id)newBalloonImageWithTail:(BOOL)arg1 size:(struct CGSize { float x1; float x2; })arg2;
- (id)newColoredImageWithColor:(id)arg1;
- (id)stretchableImageWithLeftCapWidth:(NSInteger)arg1 rightCapWidth:(NSInteger)arg2;

@end
