/* Generated by RuntimeBrowser on iPhone OS 3.0
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@class UIFont, NSString, UIColor;



@interface UILabel : UIView <NSCoding>
{
    struct CGSize { 
        float width; 
        float height; 
    } _size;
    NSString *_text;
    UIColor *_color;
    UIColor *_highlightedColor;
    UIColor *_shadowColor;
    UIFont *_font;
    struct CGSize { 
        float width; 
        float height; 
    } _shadowOffset;
    float _minFontSize;
    float _actualFontSize;
    NSInteger _numberOfLines;
    float _lastLineBaseline;
    NSInteger _lineSpacing;
    struct { 
        unsigned int lineBreakMode : 3; 
        unsigned int highlighted : 1; 
        unsigned int autosizeTextToFit : 1; 
        unsigned int baselineAdjustment : 2; 
        unsigned int alignment : 2; 
        unsigned int enabled : 1; 
        unsigned int wordRoundingEnabled : 1; 
        unsigned int explicitAlignment : 1; 
    } _textLabelFlags;
}

@property(copy) NSString *text;
@property(retain) UIFont *font;
@property(retain) UIColor *textColor;
@property(retain) UIColor *shadowColor;
@property CGSize shadowOffset;
@property NSInteger textAlignment;
@property NSInteger lineBreakMode;
@property(retain) UIColor *highlightedTextColor;
@property(getter=isHighlighted) BOOL highlighted;
@property(getter=isEnabled) BOOL enabled;
@property NSInteger numberOfLines;
@property BOOL adjustsFontSizeToFitWidth;
@property float minimumFontSize;
@property NSInteger baselineAdjustment;
@property(readonly) float _lastLineBaseline;
@property NSInteger lineSpacing;
@property(getter=isUserInteractionEnabled) BOOL userInteractionEnabled;

+ (id)defaultFont;

- (void)_commonInit;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)dealloc;
- (struct CGSize { float x1; float x2; })textSize;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })textRectForBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 limitedToNumberOfLines:(NSInteger)arg2;
- (void)_invalidateTextSize;
- (void)setText:(id)arg1;
- (id)text;
- (void)setUserInteractionEnabled:(BOOL)arg1;
- (void)setEnabled:(BOOL)arg1;
- (BOOL)isEnabled;
- (void)setTextColor:(id)arg1;
- (id)textColor;
- (void)setAdjustsFontSizeToFitWidth:(BOOL)arg1;
- (BOOL)adjustsFontSizeToFitWidth;
- (void)setMinimumFontSize:(float)arg1;
- (float)minimumFontSize;
- (void)setActualFontSize:(float)arg1;
- (float)actualFontSize;
- (void)setTextAlignment:(NSInteger)arg1;
- (NSInteger)textAlignment;
- (void)setHighlightedTextColor:(id)arg1;
- (id)highlightedTextColor;
- (id)_disabledFontColor;
- (id)currentTextColor;
- (void)setFont:(id)arg1;
- (id)font;
- (void)setShadowColor:(id)arg1;
- (id)shadowColor;
- (void)setShadowOffset:(struct CGSize { float x1; float x2; })arg1;
- (struct CGSize { float x1; float x2; })shadowOffset;
- (void)setHighlighted:(BOOL)arg1;
- (BOOL)isHighlighted;
- (void)setLineBreakMode:(NSInteger)arg1;
- (NSInteger)lineBreakMode;
- (void)setNumberOfLines:(NSInteger)arg1;
- (NSInteger)numberOfLines;
- (void)setLineSpacing:(NSInteger)arg1;
- (NSInteger)lineSpacing;
- (void)setBaselineAdjustment:(NSInteger)arg1;
- (NSInteger)baselineAdjustment;
- (float)_lastLineBaseline;
- (struct CGSize { float x1; float x2; })sizeThatFits:(struct CGSize { float x1; float x2; })arg1;
- (void)drawTextInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)_drawTextInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 baselineCalculationOnly:(BOOL)arg2;
- (void)drawRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)_setWordRoundingEnabled:(BOOL)arg1;
- (void)setColor:(id)arg1;
- (id)color;
- (void)setCentersHorizontally:(BOOL)arg1;
- (BOOL)centersHorizontally;
- (struct CGSize { float x1; float x2; })textSizeForWidth:(float)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })textRectForBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)drawContentsInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setRawSize:(struct CGSize { float x1; float x2; })arg1;
- (struct CGSize { float x1; float x2; })rawSize;
- (id)_scriptingInfo;
- (BOOL)isAccessibilityElementByDefault;
- (BOOL)isElementAccessibilityExposedToInterfaceBuilder;
- (unsigned long long)defaultAccessibilityTraits;

@end
