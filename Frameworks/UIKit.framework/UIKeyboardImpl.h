/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@class <UIKeyboardImplGeometryDelegate>, NSMutableArray, NSString, <UIKeyInput>, NSTimer, UIAlertView, UIDelayedAction, UIResponder<UITextInput>, UIKeyboardInputManager, <UIKeyboardRecording><UIApplicationEventRecording>, UIResponder<UIKeyInput>, <UIKeyboardCandidateList>, NSMutableDictionary, UITextInputTraits, UIResponder<UITextInputPrivate>, UIAutocorrectInlinePrompt, UITextInputArrowKeyHistory, UIKeyboardLayout, UIKeyboardCandidate, <UIKeyboardTypology>, NSArray, NSObject<UIKeyboardRecording><UIApplicationEventRecording>, <UIKeyboardInput>, UIView, UIResponder;

@interface UIKeyboardImpl : UIView <UIKeyboardCandidateListDelegate> {
    struct { 
        NSTimer *timer; 
        struct __GSEvent {} *eventToRepeat; 
        BOOL firstRepeat; 
    struct CGPoint { 
        float x; 
        float y; 
    int _currentAlertReason;
    BOOL committingCandidate;
    BOOL geometryIsChanging;
    UIAlertView *keyboardAlertView;
    BOOL m_acceptingCandidate;
    BOOL m_anotherTouchWaiting;
    UITextInputArrowKeyHistory *m_arrowKeyHistory;
    unsigned int m_autoDeleteCount;
    double m_autoDeleteInterval;
    double m_autoDeleteLastDelete;
    BOOL m_autoDeleteOK;
    unsigned long m_autoDeleteShiftCharacter;
    NSTimer *m_autoDeleteTimer;
    BOOL m_autocapitalizationPreference;
    NSMutableDictionary *m_autocorrectHistoryLists;
    UIAutocorrectInlinePrompt *m_autocorrectPrompt;
    UIDelayedAction *m_autocorrectPromptAction;
    BOOL m_autocorrectPromptTimerFired;
    UIKeyboardCandidate *m_autocorrection;
    BOOL m_autocorrectionPreference;
    BOOL m_autoshift;
    <UIKeyboardCandidateList> *m_candidateList;
    NSArray *m_candidates;
    BOOL m_caretShowingNow;
    int m_changeCount;
    BOOL m_changeNotificationDisabled;
    double m_changeTime;
    id m_changedDelegate;
    BOOL m_changingGeometryWithSameOrientation;
    BOOL m_clientVariantSupportEnabled;
    BOOL m_clientVariantSupportEnabledEver;
    int m_currentDirection;
    NSString *m_currentUsedInputMode;
    UITextInputTraits *m_defaultTraits;
    <UIKeyInput> *m_delegate;
    BOOL m_delegateAdoptsKeyboardInput;
    BOOL m_delegateAdoptsTextInput;
    BOOL m_delegateAdoptsTextInputPrivate;
    BOOL m_delegateIsSMSTextView;
    BOOL m_delegateRequiresKeyEvents;
    BOOL m_doubleSpacePeriodPreference;
    double m_doubleSpacePeriodTime;
    <UIKeyboardImplGeometryDelegate> *m_geometryDelegate;
    BOOL m_hardwareKeyboardAttached;
    } m_hardwareRepeat;
    BOOL m_inDealloc;
    BOOL m_inHardwareKeyboardMode;
    BOOL m_initializationDone;
    UIKeyboardInputManager *m_inputManager;
    NSString *m_inputModeLastChosen;
    } m_inputPoint;
    BOOL m_insideKeyInputDelegateCall;
    NSMutableDictionary *m_keyedLayouts;
    NSMutableArray *m_keyplaneNamesCurrentDelegate;
    NSMutableArray *m_keyplaneNamesPreviousDelegate;
    UIView *m_languageIndicator;
    NSString *m_lastUsedInputMode;
    UIKeyboardLayout *m_layout;
    int m_learnsCorrections;
    BOOL m_longPress;
    UIDelayedAction *m_longPressAction;
    UIView *m_markedTextOverlay;
    BOOL m_needsCandidates;
    struct __CFRunLoopObserver { } *m_observer;
    int m_orientation;
    int m_originalOrientation;
    BOOL m_performDecomposingDelete;
    BOOL m_performanceLoggingEnabled;
    BOOL m_preRotateShift;
    BOOL m_preRotateShiftLocked;
    NSString *m_previousInputString;
    NSMutableArray *m_recentUnacceptedAutocorrections;
    NSObject<UIKeyboardRecording><UIApplicationEventRecording> *m_recorder;
    BOOL m_replacingWord;
    int m_returnKeyState;
    BOOL m_rivenCenterFilled;
    BOOL m_selecting;
    BOOL m_settingShift;
    BOOL m_shift;
    BOOL m_shiftHeldDownNeedsUpdated;
    BOOL m_shiftLocked;
    BOOL m_shiftLockedEnabled;
    BOOL m_shiftNeedsUpdate;
    BOOL m_shiftPreventAutoshift;
    BOOL m_shouldChargeKeys;
    BOOL m_shouldSetInputModeInNextRun;
    BOOL m_shouldSkipCandidateGeneration;
    BOOL m_shouldSkipCandidateSelection;
    BOOL m_shouldUpdateCacheOnInputModesChange;
    BOOL m_showInputModeIndicator;
    BOOL m_showsCandidateBar;
    BOOL m_showsCandidateInline;
    float m_splitProgress;
    BOOL m_suppressGeometryChangeNotifications;
    BOOL m_suppressUpdateCandidateView;
    BOOL m_syntheticInput;
    BOOL m_textInputChangesIgnored;
    unsigned int m_textInputChangingCount;
    BOOL m_textInputChangingDirection;
    BOOL m_textInputChangingText;
    UITextInputTraits *m_traits;
    BOOL m_updateLayoutOnShowKeyboard;
    BOOL m_updatingPreferences;
    BOOL m_userChangedSelection;
    <UIKeyboardTypology> *typologyRecorder;
}

@property(retain) UITextInputArrowKeyHistory * arrowKeyHistory;
@property(readonly) BOOL centerFilled;
@property(retain) id changedDelegate;
@property(retain) id changedDelegate;
@property BOOL committingCandidate;
@property(retain) NSString * currentUsedInputMode;
@property(retain) UIResponder<UIKeyInput> * delegate;
@property(readonly) UIResponder * delegateAsResponder;
@property <UIKeyboardImplGeometryDelegate> * geometryDelegate;
@property BOOL geometryIsChanging;
@property(getter=isInHardwareKeyboardMode) BOOL inHardwareKeyboardMode;
@property(readonly) UIResponder<UITextInput> * inputDelegate;
@property(retain) UIKeyboardInputManager * inputManager;
@property(retain) UIAlertView * keyboardAlertView;
@property(retain) NSString * lastUsedInputMode;
@property(readonly) <UIKeyboardInput> * legacyInputDelegate;
@property(readonly) unsigned int minimumTouchesForTranslation;
@property(readonly) UIResponder<UITextInputPrivate> * privateInputDelegate;
@property(retain) <UIKeyboardRecording><UIApplicationEventRecording> * recorder;
@property BOOL rivenSplitLock;
@property BOOL shouldSetInputModeInNextRun;
@property(readonly) BOOL shouldShowCandidateBar;
@property BOOL shouldSkipCandidateSelection;
@property BOOL showInputModeIndicator;
@property BOOL showsCandidateBar;
@property BOOL showsCandidateInline;
@property(readonly) BOOL splitTransitionInProgress;
@property(retain) <UIKeyboardTypology> * typologyRecorder;

+ (void)_clearHardwareKeyboardMinimizationPreference;
+ (id)activeInstance;
+ (float)additionalInstanceHeight;
+ (void)applicationDidReceiveMemoryWarning:(id)arg1;
+ (void)applicationWillResignActive:(id)arg1;
+ (void)applicationWillSuspend:(id)arg1;
+ (struct CGSize { float x1; float x2; })defaultSize;
+ (struct CGSize { float x1; float x2; })defaultSizeForInterfaceOrientation:(int)arg1;
+ (struct CGSize { float x1; float x2; })defaultSizeForOrientation:(int)arg1;
+ (void)handleSpecificHardwareKeyboard:(id)arg1;
+ (void)hardwareKeyboardAvailabilityChanged;
+ (BOOL)isSplit;
+ (struct CGSize { float x1; float x2; })keyboardSizeForInterfaceOrientation:(int)arg1;
+ (void)markElapsed:(id)arg1;
+ (void)markPerformance:(id)arg1;
+ (id)normalizedInputModesFromPreference;
+ (int)orientationForSize:(struct CGSize { float x1; float x2; })arg1;
+ (int)persistentDictationTargetZone;
+ (struct CGPoint { float x1; float x2; })persistentDictationWindowOffset;
+ (struct CGPoint { float x1; float x2; })persistentOffset;
+ (float)persistentSplitProgress;
+ (void)refreshRivenStateWithTraits:(id)arg1;
+ (void)releaseSharedInstance;
+ (BOOL)rivenInstalled;
+ (BOOL)rivenPreference;
+ (BOOL)rivenTranslationPreference;
+ (void)setParentTestForProfiling:(id)arg1;
+ (void)setPersistentDictationTargetZone:(int)arg1;
+ (void)setPersistentDictationWindowOffset:(struct CGPoint { float x1; float x2; })arg1;
+ (void)setPersistentOffset:(struct CGPoint { float x1; float x2; })arg1;
+ (void)setPersistentSplitProgress:(float)arg1;
+ (id)sharedInstance;
+ (struct CGSize { float x1; float x2; })sizeForInterfaceOrientation:(int)arg1 textInputTraits:(id)arg2;
+ (struct CGSize { float x1; float x2; })sizeForInterfaceOrientation:(int)arg1;
+ (float)splitProgress;
+ (BOOL)supportsSplit;
+ (void)suppressSetPersistentOffset:(BOOL)arg1;

- (id)UILanguagePreference;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_autocorrectPromptRect;
- (id)_getAutocorrection;
- (id)_getCurrentKeyboardName;
- (id)_getCurrentKeyplaneName;
- (id)_getLocalizedInputMode;
- (void)_handleWebKeyEvent:(struct __GSEvent { }*)arg1 withEventType:(int)arg2 withInputString:(id)arg3 withInputStringIgnoringModifiers:(id)arg4;
- (void)_handleWebKeyEvent:(struct __GSEvent { }*)arg1 withInputString:(id)arg2 withInputStringIgnoringModifiers:(id)arg3;
- (void)_handleWebKeyEvent:(struct __GSEvent { }*)arg1 withInputString:(id)arg2;
- (BOOL)_hasCandidates;
- (unsigned int)_inputCountForAutocorrectionCandidate;
- (id)_inputForAutocorrectionCandidate;
- (BOOL)_isShowingCandidateUIWithAvailableCandidates;
- (id)_layout;
- (BOOL)_needsCandidates;
- (int)_positionInCandidateList:(id)arg1;
- (id)_rangeForAutocorrection;
- (void)_releaseInputManager;
- (void)_resetInputLocation;
- (void)_setAutocorrects:(BOOL)arg1;
- (void)_setInputManager:(id)arg1;
- (void)_setNeedsCandidates:(BOOL)arg1;
- (void)_setShiftLockedEnabled:(BOOL)arg1;
- (id)_shortcutConversionCandidateForInput:(id)arg1;
- (BOOL)_shouldMinimizeForHardwareKeyboard;
- (BOOL)_shouldShowCandidateBar:(BOOL)arg1;
- (void)_updateSoundPreheatingForWindow:(id)arg1;
- (void)_willMoveToWindow:(id)arg1 withAncestorView:(id)arg2;
- (void)acceptAutocorrection;
- (void)acceptCandidate:(id)arg1 atIndex:(unsigned int)arg2;
- (void)acceptCurrentCandidate;
- (void)acceptCurrentCandidateIfSelected;
- (BOOL)acceptInputString:(id)arg1;
- (BOOL)acceptWord:(id)arg1 firstDelete:(unsigned int)arg2;
- (id)accessibilityLabelForCandidate:(id)arg1;
- (void)addAutocorrectionRecord:(id)arg1 forTyping:(id)arg2;
- (void)addInputObject:(id)arg1;
- (void)addInputString:(id)arg1 fromVariantKey:(BOOL)arg2;
- (void)addInputString:(id)arg1;
- (void)addTyping:(id)arg1 forAutocorrection:(id)arg2;
- (void)alertView:(id)arg1 clickedButtonAtIndex:(int)arg2;
- (void)animateAutocorrection;
- (void)applicationResumedEventsOnly:(id)arg1;
- (void)applicationSuspendedEventsOnly:(id)arg1;
- (id)arrowKeyHistory;
- (void)autoDeleteTimerFired:(id)arg1;
- (BOOL)autocapitalizationPreference;
- (id)autocorrectHistoryForInputMode:(id)arg1;
- (id)autocorrectPrompt;
- (BOOL)autocorrectSpellingEnabled;
- (void)autocorrectionAnimationDidStop:(id)arg1 finished:(id)arg2 context:(void*)arg3;
- (BOOL)autocorrectionPreference;
- (BOOL)autocorrectionPreferenceForTraits;
- (id)autocorrectionRecordForWord:(id)arg1;
- (BOOL)automaticMinimizationEnabled;
- (void)callChanged;
- (void)callChangedSelection;
- (BOOL)callLayoutIgnoresShiftState;
- (BOOL)callLayoutIsShiftKeyBeingHeld;
- (BOOL)callLayoutIsShiftKeyPlaneChooser;
- (void)callLayoutLongPressAction;
- (void)callLayoutSetAutoshift:(BOOL)arg1;
- (void)callLayoutSetShift:(BOOL)arg1;
- (BOOL)callLayoutShiftKeyRequiresImmediateUpdate;
- (void)callLayoutUpdateAllLocalizedKeys;
- (void)callLayoutUpdateLocalizedKeys;
- (void)callLayoutUpdateReturnKey;
- (BOOL)callLayoutUsesAutoShift;
- (BOOL)callShouldDeleteWithWordCountForRapidDelete:(int)arg1 characterCountForRapidDelete:(int)arg2;
- (BOOL)callShouldInsertText:(id)arg1;
- (BOOL)canHandleKeyHitTest;
- (BOOL)canUseGeometryKeyTouch;
- (void)cancelAllKeyEvents;
- (void)cancelSplitTransition;
- (id)candidateList;
- (void)candidateListAcceptCandidate:(id)arg1;
- (void)candidateListSelectionDidChange:(id)arg1;
- (BOOL)caretBlinks;
- (BOOL)caretVisible;
- (BOOL)centerFilled;
- (int)changeCount;
- (BOOL)changeNotificationDisabled;
- (id)changedDelegate;
- (struct __CFDictionary { }*)chargedKeyProbabilities;
- (BOOL)checkSpellingPreference;
- (BOOL)checkSpellingPreferenceForTraits;
- (void)clearAnimations;
- (void)clearAutocorrectPromptTimer;
- (void)clearChangeTimeAndCount;
- (void)clearDelegate;
- (void)clearEmojiLayout;
- (void)clearInput;
- (void)clearKeyAreas;
- (void)clearLanguageIndicator;
- (void)clearLayouts;
- (void)clearLongPressTimer;
- (void)clearSelection;
- (void)clearShiftState;
- (void)clearTimers;
- (void)clearTransientState;
- (id)clientOverrideForKey:(id)arg1;
- (id)clientVariantDelegate;
- (id)clientVariantsForKey:(id)arg1;
- (BOOL)committingCandidate;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })convertRectToAutocorrectRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 delegateView:(id)arg2 container:(id)arg3;
- (id)currentInputContextFromInputDelegateWithWordRange:(id)arg1;
- (BOOL)currentKeyboardTraitsAllowCandidateBar;
- (float)currentLandscapeHeight;
- (float)currentLandscapeWidth;
- (float)currentPortraitHeight;
- (float)currentPortraitWidth;
- (id)currentUsedInputMode;
- (void)dealloc;
- (void)defaultsDidChange;
- (void)delayedInit;
- (id)delegate;
- (id)delegateAsResponder;
- (BOOL)delegateIsSMSTextView;
- (BOOL)delegateSuggestionsForCurrentInput;
- (BOOL)delegateSupportsCorrectionUI;
- (void)deleteBackward;
- (void)deleteBackwardAndNotify:(BOOL)arg1;
- (void)deleteForwardAndNotify:(BOOL)arg1;
- (void)deleteFromInput;
- (void)detach;
- (void)dismissKeyboard;
- (BOOL)displaysCandidates;
- (BOOL)doubleSpacePeriodPreference;
- (void)enable;
- (void)fadeAnimationDidStop:(id)arg1 finished:(id)arg2;
- (void)fadeAutocorrectPrompt;
- (void)finishSplitTransitionWithProgress:(float)arg1;
- (void)firstHardwareAutoRepeat:(id)arg1;
- (BOOL)flushKeyplaneName:(id)arg1;
- (void)forceShiftUpdate;
- (void)forceShiftUpdateIfKeyboardStateChanged;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })frameForKeylayoutName:(id)arg1;
- (id)generateAutocorrectionReplacements:(id)arg1;
- (void)generateCandidates;
- (void)generateCandidatesWithOptions:(int)arg1;
- (void)geometryChangeDone:(BOOL)arg1;
- (id)geometryDelegate;
- (BOOL)geometryIsChanging;
- (void)groupedCandidatesFromCandidates:(id)arg1 usingSortingMethod:(id)arg2 completion:(id)arg3;
- (id)groupedCandidatesFromCandidates:(id)arg1 usingSortingMethod:(id)arg2;
- (void)handleDelete;
- (void)handleDeleteAsRepeat:(BOOL)arg1;
- (void)handleDeleteWithNonZeroInputCount;
- (void)handleDeleteWithZeroInputCount;
- (BOOL)handleKeyCommand:(struct __GSEvent { }*)arg1 repeatOkay:(BOOL*)arg2;
- (void)handleKeyEvent:(struct __GSEvent { }*)arg1;
- (void)handleObserverCallback;
- (void)handleSpecificHardwareKeyboard:(id)arg1;
- (void)handleStringInput:(id)arg1 fromVariantKey:(BOOL)arg2;
- (void)hardwareAutoRepeat:(id)arg1;
- (void)hardwareKeyboardAvailabilityChanged;
- (id)hardwareKeyboardsSeenPreference;
- (BOOL)hasAutoRepeat;
- (BOOL)hasEditableMarkedText;
- (BOOL)hasMarkedText;
- (BOOL)hideAccessoryViewsDuringSplit;
- (void)hideKeyboard;
- (id)hitTest:(struct CGPoint { float x1; float x2; })arg1 withEvent:(id)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (id)inputDelegate;
- (id)inputManager;
- (id)inputModeFirstPreference;
- (id)inputModeLastChosen;
- (id)inputModeLastChosenPreference;
- (id)inputModeLastUsedForLanguage:(id)arg1;
- (id)inputModeLastUsedPreference;
- (id)inputModePreference;
- (id)inputOverlayContainer;
- (void)insertText:(id)arg1;
- (void)installRecorder;
- (void)installTypology;
- (BOOL)isAllowedInputMode:(id)arg1;
- (BOOL)isAutoDeleteActive;
- (BOOL)isAutoFillMode;
- (BOOL)isAutoShifted;
- (BOOL)isClientVariantSupportEnabled;
- (BOOL)isDesiredInputMode:(id)arg1;
- (BOOL)isInHardwareKeyboardMode;
- (BOOL)isLongPress;
- (BOOL)isMinimized;
- (BOOL)isShiftLocked;
- (BOOL)isShifted;
- (BOOL)isUsingDictationLayout;
- (BOOL)isValidKeyInput:(id)arg1;
- (void)keyActivated;
- (void)keyDeactivated;
- (int)keyHitTest:(struct CGPoint { float x1; float x2; })arg1 touchStage:(int)arg2 atTime:(double)arg3 withTouch:(id)arg4 forceShift:(BOOL)arg5 forcingKey:(int)arg6;
- (BOOL)keySlidIntoSwipe;
- (id)keyboardAlertView;
- (BOOL)keyboardDrawsOpaque;
- (BOOL)keyboardRecordingEnabled;
- (BOOL)keyboardsExpandedPreference;
- (id)keyplaneNameInCurrentDelegateListForIndex:(int)arg1;
- (id)lastUsedInputMode;
- (void)launchTypologyApplication;
- (void)layoutHasChanged;
- (id)legacyInputDelegate;
- (void)longPressAction;
- (id)markedTextOverlay;
- (unsigned int)maximumNumberOfColumnsForSortingMethod:(id)arg1 interfaceOrientation:(int)arg2 isInline:(BOOL)arg3 reducedWidth:(BOOL)arg4;
- (void)mediaKeyDown:(struct __GSEvent { }*)arg1;
- (unsigned int)minimumTouchesForTranslation;
- (void)movePhraseBoundaryToDirection:(int)arg1;
- (BOOL)needsToDeferUpdateTextCandidateView;
- (BOOL)noContent;
- (void)notifyShiftState;
- (int)orientation;
- (void)performClientVariantActionNamed:(id)arg1;
- (BOOL)performanceLoggingPreference;
- (unsigned int)phraseBoundary;
- (BOOL)pointInside:(struct CGPoint { float x1; float x2; })arg1 forEvent:(struct __GSEvent { }*)arg2;
- (BOOL)pointInside:(struct CGPoint { float x1; float x2; })arg1 withEvent:(id)arg2;
- (void)postEmptyDelegateNotificationIfNeeded;
- (void)prepareForGeometryChange;
- (void)prepareForSelectionChange;
- (void)prepareLayoutForInterfaceOrientation:(int)arg1;
- (void)prepareUsedKeyplaneNameListForNewDelegate;
- (id)privateInputDelegate;
- (void)recomputeActiveInputModes;
- (void)recomputeActiveInputModesFromList:(id)arg1;
- (id)recorder;
- (void)refreshRivenPreferences;
- (void)registerKeyArea:(struct CGPoint { float x1; float x2; })arg1 withRadii:(struct CGPoint { float x1; float x2; })arg2 forKeyCode:(unsigned short)arg3 forLowerKey:(id)arg4 forUpperKey:(id)arg5;
- (void)releaseKeyplaneNameFromPreviousDelegateList:(id)arg1;
- (void)releaseSuppressUpdateCandidateView;
- (void)removeAutocorrectPrompt;
- (void)removeAutocorrection;
- (void)removeFromSuperview;
- (void)replaceText:(id)arg1;
- (void)resizeCandidateBarWithDelta:(float)arg1;
- (void)resizeForKeyplaneSize:(struct CGSize { float x1; float x2; })arg1;
- (void)retainKeyplaneNameInCurrentDelegateList:(id)arg1;
- (id)returnKeyDisplayName;
- (BOOL)returnKeyEnabled;
- (int)returnKeyType;
- (BOOL)rivenSplitLock;
- (void)saveInputModesPreference:(id)arg1;
- (void)scheduleReplacementsWithOptions:(unsigned int)arg1;
- (id)searchStringForMarkedText;
- (void)selectionDidChange:(id)arg1;
- (id)selectionView;
- (void)selectionWillChange:(id)arg1;
- (void)setAnotherTouchWaiting:(BOOL)arg1;
- (void)setArrowKeyHistory:(id)arg1;
- (void)setAutocorrectSpellingEnabled:(BOOL)arg1;
- (void)setAutocorrection:(id)arg1;
- (void)setAutomaticMinimizationEnabled:(BOOL)arg1;
- (void)setCandidates:(id)arg1;
- (void)setCaretBlinks:(BOOL)arg1;
- (void)setCaretVisible:(BOOL)arg1;
- (void)setChangeNotificationDisabled:(BOOL)arg1;
- (void)setChanged;
- (void)setChangedDelegate:(id)arg1;
- (void)setCommittingCandidate:(BOOL)arg1;
- (void)setCurrentUsedInputMode:(id)arg1;
- (void)setDefaultTextInputTraits:(id)arg1;
- (void)setDelegate:(id)arg1 force:(BOOL)arg2;
- (void)setDelegate:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setGeometryDelegate:(id)arg1;
- (void)setGeometryIsChanging:(BOOL)arg1;
- (void)setHardwareKeyboardsSeenPreference:(id)arg1;
- (void)setInHardwareKeyboardMode:(BOOL)arg1;
- (void)setInitialDirection;
- (void)setInputManager:(id)arg1;
- (void)setInputMode:(id)arg1 userInitiated:(BOOL)arg2;
- (void)setInputMode:(id)arg1;
- (void)setInputModeFromPreferences;
- (void)setInputModeLastChosenPreference;
- (void)setInputModeToNextASCIICapableInPreferredList;
- (void)setInputModeToNextInPreferredList;
- (void)setInputObject:(id)arg1;
- (void)setInputPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)setKeyboardAlertView:(id)arg1;
- (void)setLastUsedInputMode:(id)arg1;
- (void)setLastUsedInputMode;
- (void)setLearnsCorrections:(int)arg1;
- (void)setLongPress:(BOOL)arg1;
- (void)setMarkedText;
- (void)setOrientationForSize:(struct CGSize { float x1; float x2; })arg1;
- (void)setPhraseBoundary:(unsigned int)arg1;
- (void)setPreviousInputString:(id)arg1;
- (void)setRecorder:(id)arg1;
- (void)setReturnKeyEnabled:(BOOL)arg1;
- (void)setRivenSplitLock:(BOOL)arg1;
- (void)setSelectionWithPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)setShift:(BOOL)arg1 autoshift:(BOOL)arg2;
- (void)setShift:(BOOL)arg1;
- (void)setShiftLocked:(BOOL)arg1;
- (void)setShiftLockedForced:(BOOL)arg1;
- (void)setShiftNeedsUpdate;
- (void)setShiftOffIfNeeded;
- (void)setShiftPreventAutoshift:(BOOL)arg1;
- (void)setShouldChargeKeys:(BOOL)arg1;
- (void)setShouldSetInputModeInNextRun:(BOOL)arg1;
- (void)setShouldSkipCandidateSelection:(BOOL)arg1;
- (void)setShouldUpdateCacheOnInputModesChange:(BOOL)arg1;
- (void)setShowInputModeIndicator:(BOOL)arg1;
- (void)setShowsCandidateBar:(BOOL)arg1;
- (void)setShowsCandidateInline:(BOOL)arg1;
- (void)setSplit:(BOOL)arg1 animated:(BOOL)arg2;
- (void)setSplitProgress:(float)arg1;
- (void)setTypologyRecorder:(id)arg1;
- (void)setUsesCandidateSelection:(BOOL)arg1;
- (unsigned int)shiftFlagsForInputString;
- (BOOL)shiftLockPreference;
- (BOOL)shiftLockedEnabled;
- (BOOL)shouldChargeKeys;
- (BOOL)shouldEnableShiftForDeletedCharacter:(unsigned long)arg1;
- (BOOL)shouldSetInputModeInNextRun;
- (BOOL)shouldShowCandidateBar;
- (BOOL)shouldSkipCandidateSelection;
- (BOOL)shouldSkipCandidateSelectionForPopupVariantString:(id)arg1;
- (BOOL)shouldSwitchInputMode:(id)arg1;
- (void)showInformationalAlertIfNeededForReason:(int)arg1;
- (BOOL)showInputModeIndicator;
- (void)showInternationalKeyInfoAlertIfNeeded;
- (void)showKeyboard;
- (void)showNextCandidates;
- (BOOL)showsCandidateBar;
- (BOOL)showsCandidateInline;
- (id)sortingMethods;
- (BOOL)splitTransitionInProgress;
- (void)startAutoDeleteTimer;
- (void)startCaretBlinkIfNeeded;
- (void)startKeyboardRecording;
- (void)stopAutoDelete;
- (void)stopKeyboardRecording;
- (void)storeDelegateConformance;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })subtractKeyboardFrameFromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (BOOL)suppliesCompletions;
- (BOOL)supportsNumberKeySelection;
- (BOOL)swipeToTabPreference;
- (void)takeTextInputTraitsFromDelegate;
- (void)testAutocorrectionPromptWithCorrection:(id)arg1;
- (void)textChanged:(id)arg1;
- (void)textDidChange:(id)arg1;
- (void)textFrameChanged:(id)arg1;
- (int)textInputChangingCount;
- (id)textInputTraits;
- (void)textWillChange:(id)arg1;
- (void)timeElapsed:(unsigned int)arg1 message:(id)arg2;
- (void)timeMark:(unsigned int)arg1 message:(id)arg2;
- (void)timeMark:(unsigned int)arg1;
- (id)titleForSortingMethod:(id)arg1;
- (void)toggleShift;
- (void)touchAutoDeleteTimerWithThreshold:(double)arg1;
- (void)touchAutocorrectPromptTimer;
- (void)touchLongPressTimer;
- (void)touchLongPressTimerWithDelay:(double)arg1;
- (BOOL)typologyEnabled;
- (id)typologyRecorder;
- (void)updateAutocorrectPrompt:(id)arg1;
- (void)updateAutocorrectPromptAction;
- (void)updateAutocorrectPromptDisplay:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)updateCandidateDisplay;
- (void)updateCandidateDisplayAsyncWithCandidates:(id)arg1 forInputManager:(id)arg2;
- (void)updateChangeTimeAndIncrementCount;
- (void)updateForChangedSelection;
- (void)updateFromTextInputTraits;
- (void)updateInputContextForDeletedText:(id)arg1 toWordRange:(id)arg2;
- (void)updateInputModeIndicatorOnSingleKeyOnly:(BOOL)arg1 preserveIfPossible:(BOOL)arg2;
- (void)updateInputModeIndicatorOnSingleKeyOnly:(BOOL)arg1;
- (void)updateKeyboardEventsLagging:(struct __GSEvent { }*)arg1;
- (void)updateKeysWithDelegates;
- (void)updateLayout;
- (void)updateLayoutAndSetShift;
- (void)updateLayoutIfNeeded;
- (void)updateLayoutToCurrentInterfaceOrientation;
- (void)updateObserverState;
- (void)updateReturnKey:(BOOL)arg1;
- (void)updateReturnKey;
- (void)updateShiftState;
- (void)updateTextCandidateView;

@end
