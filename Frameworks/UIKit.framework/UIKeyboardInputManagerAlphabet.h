/* Generated by RuntimeBrowser on iPhone OS 2.2.1
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */



@interface UIKeyboardInputManagerAlphabet : UIKeyboardInputManager 
{

  /* Error parsing encoded ivar type info: ^{KBInputManagerAlphabet=^^?{StaticDictionaryAlphabet="_vptr$StaticDictionary"^^?"m_trie"{WordTrie="m_index"^{ReadOnlyDataFile}"m_words"^{ReadOnlyDataFile}"m_word_count"I"m_root"{RefPtr<KB::WordTrieNode>="m_ptr"^{WordTrieNode}}"m_search"{WordTrieSearch="m_states"{Vector<WTF::RefPtr<KB::WordTrieNode>,0ul>="m_size"I"m_buffer"{VectorBuffer<WTF::RefPtr<KB::WordTrieNode>,0ul>="m_buffer"^{RefPtr<KB::WordTrieNode>}"m_capacity"I}}"m_type"i"m_string"{String="m_size"S"m_capacity"S"m_length"S"m_sort_key_length"S"m_buffer_type"C"m_buffer"*"m_static_buffer"[16c]}"m_sort_key"{String="m_size"S"m_capacity"S"m_length"S"m_sort_key_length"S"m_buffer_type"C"m_buffer"*"m_static_buffer"[16c]}}"m_saved_search"{WordTrieSearch="m_states"{Vector<WTF::RefPtr<KB::WordTrieNode>,0ul>="m_size"I"m_buffer"{VectorBuffer<WTF::RefPtr<KB::WordTrieNode>,0ul>="m_buffer"^{RefPtr<KB::WordTrieNode>}"m_capacity"I}}"m_type"i"m_string"{String="m_size"S"m_capacity"S"m_length"S"m_sort_key_length"S"m_buffer_type"C"m_buffer"*"m_static_buffer"[16c]}"m_sort_key"{String="m_size"S"m_capacity"S"m_length"S"m_sort_key_length"S"m_buffer_type"C"m_buffer"*"m_static_buffer"[16c]}}"m_returns_words_shorter_than_search"B"m_valid"B"m_root_array_cache"{TrieSiblingSparseArrayCache="m_loaded_from_offset32"I"m_num_tags"i"m_tag_list"[256C]"m_values"[256{PackedTrieSibling="sortNchild"(?="whole"I"fields"{$_96="child_offset32"b21"has_words"b1"has_freq"b1"more_siblings"b1"sort_key"b8}"file_fields"{$_97="child_offset32"b21"has_freq_or_words"b2"more_siblings"b1"sort_key"b8})"freqNword"(?="whole"I"fields"{$_99="word_offset"b23"word_is_0freq"b1"compacted_freq"b8})}]}"m_deep_array_cache"{TrieSiblingSparseArrayCache="m_loaded_from_offset32"I"m_num_tags"i"m_tag_list"[256C]"m_values"[256{PackedTrieSibling="sortNchild"(?="whole"I"fields"{$_96="child_offset32"b21"has_words"b1"has_freq"b1"more_siblings"b1"sort_key"b8}"file_fields"{$_97="child_offset32"b21"has_freq_or_words"b2"more_siblings"b1"sort_key"b8})"freqNword"(?="whole"I"fields"{$_99="word_offset"b23"word_is_0freq"b1"compacted_freq"b8})}]}}"m_log_level"i}{Vector<KB::Input>="m_size"I"m_capacity"I"m_elements"^{Input}}{String="m_size"S"m_capacity"S"m_length"S"m_sort_key_length"S"m_buffer_type"C"m_buffer"*"m_static_buffer"[16c]}{String="m_size"S"m_capacity"S"m_length"S"m_sort_key_length"S"m_buffer_type"C"m_buffer"*"m_static_buffer"[16c]}{Vector<KB::String>="m_size"I"m_capacity"I"m_elements"^{String}}II{Hashmap<KB::String,KB::Word>="m_size"I"m_capacity"I"m_table_size"I"m_extra_size"I"m_extra_index"I"m_rehashing"B"m_traits"{HashTraits<KB::String>=}"m_table"^{Bucket<KB::String,KB::Word>}"m_extra"^{Bucket<KB::String,KB::Word>}}{Vector<KB::Word>="m_size"I"m_capacity"I"m_elements"^{Word}}BBBBi{DynamicDictionary="m_impl"^{DynamicDictionaryImpl}"m_log_level"i}B^{__CFDictionary}^{__CFArray}} */
    struct KBInputManagerAlphabet { int (**x1)(); struct StaticDictionaryAlphabet { 
            int (**_vptr$StaticDictionary)(); 
            struct WordTrie { 
                struct ReadOnlyDataFile {} *m_index; 
                struct ReadOnlyDataFile {} *m_words; 
                NSUInteger m_word_count; 
                struct RefPtr<KB::WordTrieNode> { 
                    struct WordTrieNode {} *m_ptr; 
                } m_root; 
                struct WordTrieSearch { 
                    struct Vector<WTF::RefPtr<KB::WordTrieNode>,0ul> { 
                        NSUInteger m_size; 
                        struct VectorBuffer<WTF::RefPtr<KB::WordTrieNode>,0ul> { 
                            struct RefPtr<KB::WordTrieNode> {} *m_buffer; 
                            NSUInteger m_capacity; 
                        } m_buffer; 
                    } m_states; 
                    NSInteger m_type; 
                    struct String { 
                        unsigned short m_size; 
                        unsigned short m_capacity; 
                        unsigned short m_length; 
                        unsigned short m_sort_key_length; 
                        unsigned char m_buffer_type; 
                        char *m_buffer; 
                        BOOL m_static_buffer[16]; 
                    } m_string; 
                    struct String { 
                        unsigned short m_size; 
                        unsigned short m_capacity; 
                        unsigned short m_length; 
                        unsigned short m_sort_key_length; 
                        unsigned char m_buffer_type; 
                        char *m_buffer; 
                        BOOL m_static_buffer[16]; 
                    } m_sort_key; 
                } m_search; 
                struct WordTrieSearch { 
                    struct Vector<WTF::RefPtr<KB::WordTrieNode>,0ul> { 
                        NSUInteger m_size; 
                        struct VectorBuffer<WTF::RefPtr<KB::WordTrieNode>,0ul> { 
                            struct RefPtr<KB::WordTrieNode> {} *m_buffer; 
                            NSUInteger m_capacity; 
                        } m_buffer; 
                    } m_states; 
                    NSInteger m_type; 
                    struct String { 
                        unsigned short m_size; 
                        unsigned short m_capacity; 
                        unsigned short m_length; 
                        unsigned short m_sort_key_length; 
                        unsigned char m_buffer_type; 
                        char *m_buffer; 
                        BOOL m_static_buffer[16]; 
                    } m_string; 
                    struct String { 
                        unsigned short m_size; 
                        unsigned short m_capacity; 
                        unsigned short m_length; 
                        unsigned short m_sort_key_length; 
                        unsigned char m_buffer_type; 
                        char *m_buffer; 
                        BOOL m_static_buffer[16]; 
                    } m_sort_key; 
                } m_saved_search; 
                /* Warning: Unrecognized filer type: 'B' using 'void*' */ void*m_returns_words_shorter_than_search; 
                void*m_valid; 
                struct TrieSiblingSparseArrayCache { 
                    NSUInteger m_loaded_from_offset32; 
                    NSInteger m_num_tags; 
                    unsigned char m_tag_list[256]; 
                    struct PackedTrieSibling { 
                        union { 
                            NSUInteger whole; 
                            struct $_96 { 
                                unsigned int child_offset32 : 21; 
                                unsigned int has_words : 1; 
                                unsigned int has_freq : 1; 
                                unsigned int more_siblings : 1; 
                                unsigned int sort_key : 8; 
                            } fields; 
                            struct $_97 { 
                                unsigned int child_offset32 : 21; 
                                unsigned int has_freq_or_words : 2; 
                                unsigned int more_siblings : 1; 
                                unsigned int sort_key : 8; 
                            } file_fields; 
                        } sortNchild; 
                        union { 
                            NSUInteger whole; 
                            struct $_99 { 
                                unsigned int word_offset : 23; 
                                unsigned int word_is_0freq : 1; 
                                unsigned int compacted_freq : 8; 
                            } fields; 
                        } freqNword; 
                    } m_values[256]; 
                } m_root_array_cache; 
                struct TrieSiblingSparseArrayCache { 
                    NSUInteger m_loaded_from_offset32; 
                    NSInteger m_num_tags; 
                    unsigned char m_tag_list[256]; 
                    struct PackedTrieSibling { 
                        union { 
                            NSUInteger whole; 
                            struct $_96 { 
                                unsigned int child_offset32 : 21; 
                                unsigned int has_words : 1; 
                                unsigned int has_freq : 1; 
                                unsigned int more_siblings : 1; 
                                unsigned int sort_key : 8; 
                            } fields; 
                            struct $_97 { 
                                unsigned int child_offset32 : 21; 
                                unsigned int has_freq_or_words : 2; 
                                unsigned int more_siblings : 1; 
                                unsigned int sort_key : 8; 
                            } file_fields; 
                        } sortNchild; 
                        union { 
                            NSUInteger whole; 
                            struct $_99 { 
                                unsigned int word_offset : 23; 
                                unsigned int word_is_0freq : 1; 
                                unsigned int compacted_freq : 8; 
                            } fields; 
                        } freqNword; 
                    } m_values[256]; 
                } m_deep_array_cache; 
            } m_trie; 
            NSInteger m_log_level; 
        } x2; struct Vector<KB::Input> { 
            NSUInteger m_size; 
            NSUInteger m_capacity; 
            struct Input {} *m_elements; 
        } x3; struct String { 
            unsigned short m_size; 
            unsigned short m_capacity; 
            unsigned short m_length; 
            unsigned short m_sort_key_length; 
            unsigned char m_buffer_type; 
            char *m_buffer; 
            BOOL m_static_buffer[16]; 
        } x4; struct String { 
            unsigned short m_size; 
            unsigned short m_capacity; 
            unsigned short m_length; 
            unsigned short m_sort_key_length; 
            unsigned char m_buffer_type; 
            char *m_buffer; 
            BOOL m_static_buffer[16]; 
        } x5; struct Vector<KB::String> { 
            NSUInteger m_size; 
            NSUInteger m_capacity; 
            struct String {} *m_elements; 
        } x6; NSUInteger x7; NSUInteger x8; struct Hashmap<KB::String,KB::Word> { 
            NSUInteger m_size; 
            NSUInteger m_capacity; 
            NSUInteger m_table_size; 
            NSUInteger m_extra_size; 
            NSUInteger m_extra_index; 
            void*m_rehashing; 
            struct HashTraits<KB::String> { } m_traits; 
            struct Bucket<KB::String,KB::Word> {} *m_table; 
            struct Bucket<KB::String,KB::Word> {} *m_extra; 
        } x9; struct Vector<KB::Word> { 
            NSUInteger m_size; 
            NSUInteger m_capacity; 
            struct Word {} *m_elements; 
        } x10; void*x11; void*x12; void*x13; void*x14; NSInteger x15; struct DynamicDictionary { 
            struct DynamicDictionaryImpl {} *m_impl; 
            NSInteger m_log_level; 
        } x16; void*x17; struct __CFDictionary {} *x18; struct __CFArray {} *x19; } *m_impl;

}


- (id)init;
- (void)dealloc;
- (struct KBInputManagerAlphabet { int (**x1)(); struct StaticDictionaryAlphabet { int (**x_2_1_1)(); struct WordTrie { struct ReadOnlyDataFile {} *x_2_2_1; struct ReadOnlyDataFile {} *x_2_2_2; NSUInteger x_2_2_3; struct RefPtr<KB::WordTrieNode> { struct WordTrieNode {} *x_4_3_1; } x_2_2_4; struct WordTrieSearch { struct Vector<WTF::RefPtr<KB::WordTrieNode>,0ul> { NSUInteger x_1_4_1; struct VectorBuffer<WTF::RefPtr<KB::WordTrieNode>,0ul> { struct RefPtr<KB::WordTrieNode> {} *x_2_5_1; NSUInteger x_2_5_2; } x_1_4_2; } x_5_3_1; NSInteger x_5_3_2; struct String { unsigned short x_3_4_1; unsigned short x_3_4_2; unsigned short x_3_4_3; unsigned short x_3_4_4; unsigned char x_3_4_5; char *x_3_4_6; BOOL x_3_4_7[16]; } x_5_3_3; struct String { unsigned short x_4_4_1; unsigned short x_4_4_2; unsigned short x_4_4_3; unsigned short x_4_4_4; unsigned char x_4_4_5; char *x_4_4_6; BOOL x_4_4_7[16]; } x_5_3_4; } x_2_2_5; struct WordTrieSearch { struct Vector<WTF::RefPtr<KB::WordTrieNode>,0ul> { NSUInteger x_1_4_1; struct VectorBuffer<WTF::RefPtr<KB::WordTrieNode>,0ul> { struct RefPtr<KB::WordTrieNode> {} *x_2_5_1; NSUInteger x_2_5_2; } x_1_4_2; } x_6_3_1; NSInteger x_6_3_2; struct String { unsigned short x_3_4_1; unsigned short x_3_4_2; unsigned short x_3_4_3; unsigned short x_3_4_4; unsigned char x_3_4_5; char *x_3_4_6; BOOL x_3_4_7[16]; } x_6_3_3; struct String { unsigned short x_4_4_1; unsigned short x_4_4_2; unsigned short x_4_4_3; unsigned short x_4_4_4; unsigned char x_4_4_5; char *x_4_4_6; BOOL x_4_4_7[16]; } x_6_3_4; } x_2_2_6; /* Warning: Unrecognized filer type: 'B' using 'void*' */ void*x_2_2_7; void*x_2_2_8; struct TrieSiblingSparseArrayCache { NSUInteger x_9_3_1; NSInteger x_9_3_2; unsigned char x_9_3_3[256]; struct PackedTrieSibling { union { NSUInteger x_1_5_1; struct $_96 { unsigned int x_2_6_1 : 21; unsigned int x_2_6_2 : 1; unsigned int x_2_6_3 : 1; unsigned int x_2_6_4 : 1; unsigned int x_2_6_5 : 8; } x_1_5_2; struct $_97 { unsigned int x_3_6_1 : 21; unsigned int x_3_6_2 : 2; unsigned int x_3_6_3 : 1; unsigned int x_3_6_4 : 8; } x_1_5_3; } x_4_4_1; union { NSUInteger x_2_5_1; struct $_99 { unsigned int x_2_6_1 : 23; unsigned int x_2_6_2 : 1; unsigned int x_2_6_3 : 8; } x_2_5_2; } x_4_4_2; } x_9_3_4[256]; } x_2_2_9; struct TrieSiblingSparseArrayCache { NSUInteger x_10_3_1; NSInteger x_10_3_2; unsigned char x_10_3_3[256]; struct PackedTrieSibling { union { NSUInteger x_1_5_1; struct $_96 { unsigned int x_2_6_1 : 21; unsigned int x_2_6_2 : 1; unsigned int x_2_6_3 : 1; unsigned int x_2_6_4 : 1; unsigned int x_2_6_5 : 8; } x_1_5_2; struct $_97 { unsigned int x_3_6_1 : 21; unsigned int x_3_6_2 : 2; unsigned int x_3_6_3 : 1; unsigned int x_3_6_4 : 8; } x_1_5_3; } x_4_4_1; union { NSUInteger x_2_5_1; struct $_99 { unsigned int x_2_6_1 : 23; unsigned int x_2_6_2 : 1; unsigned int x_2_6_3 : 8; } x_2_5_2; } x_4_4_2; } x_10_3_4[256]; } x_2_2_10; } x_2_1_2; NSInteger x_2_1_3; } x2; struct Vector<KB::Input> { NSUInteger x_3_1_1; NSUInteger x_3_1_2; struct Input {} *x_3_1_3; } x3; struct String { unsigned short x_4_1_1; unsigned short x_4_1_2; unsigned short x_4_1_3; unsigned short x_4_1_4; unsigned char x_4_1_5; char *x_4_1_6; BOOL x_4_1_7[16]; } x4; struct String { unsigned short x_5_1_1; unsigned short x_5_1_2; unsigned short x_5_1_3; unsigned short x_5_1_4; unsigned char x_5_1_5; char *x_5_1_6; BOOL x_5_1_7[16]; } x5; struct Vector<KB::String> { NSUInteger x_6_1_1; NSUInteger x_6_1_2; struct String {} *x_6_1_3; } x6; NSUInteger x7; NSUInteger x8; struct Hashmap<KB::String,KB::Word> { NSUInteger x_9_1_1; NSUInteger x_9_1_2; NSUInteger x_9_1_3; NSUInteger x_9_1_4; NSUInteger x_9_1_5; void*x_9_1_6; struct HashTraits<KB::String> { } x_9_1_7; struct Bucket<KB::String,KB::Word> {} *x_9_1_8; struct Bucket<KB::String,KB::Word> {} *x_9_1_9; } x9; struct Vector<KB::Word> { NSUInteger x_10_1_1; NSUInteger x_10_1_2; struct Word {} *x_10_1_3; } x10; void*x11; void*x12; void*x13; void*x14; NSInteger x15; struct DynamicDictionary { struct DynamicDictionaryImpl {} *x_16_1_1; NSInteger x_16_1_2; } x16; void*x17; struct __CFDictionary {} *x18; struct __CFArray {} *x19; }*)initImplementation;
     /* Encoded args for previous method: ^{KBInputManagerAlphabet=^^?{StaticDictionaryAlphabet=^^?{WordTrie=^{ReadOnlyDataFile}^{ReadOnlyDataFile}I{RefPtr<KB::WordTrieNode>=^{WordTrieNode}}{WordTrieSearch={Vector<WTF::RefPtr<KB::WordTrieNode>,0ul>=I{VectorBuffer<WTF::RefPtr<KB::WordTrieNode>,0ul>=^{RefPtr<KB::WordTrieNode>}I}}i{String=SSSSC*[16c]}{String=SSSSC*[16c]}}{WordTrieSearch={Vector<WTF::RefPtr<KB::WordTrieNode>,0ul>=I{VectorBuffer<WTF::RefPtr<KB::WordTrieNode>,0ul>=^{RefPtr<KB::WordTrieNode>}I}}i{String=SSSSC*[16c]}{String=SSSSC*[16c]}}BB{TrieSiblingSparseArrayCache=Ii[256C][256{PackedTrieSibling=(?=I{$_96=b21b1b1b1b8}{$_97=b21b2b1b8})(?=I{$_99=b23b1b8})}]}{TrieSiblingSparseArrayCache=Ii[256C][256{PackedTrieSibling=(?=I{$_96=b21b1b1b1b8}{$_97=b21b2b1b8})(?=I{$_99=b23b1b8})}]}}i}{Vector<KB::Input>=II^{Input}}{String=SSSSC*[16c]}{String=SSSSC*[16c]}{Vector<KB::String>=II^{String}}II{Hashmap<KB::String,KB::Word>=IIIIIB{HashTraits<KB::String>=}^{Bucket<KB::String,KB::Word>}^{Bucket<KB::String,KB::Word>}}{Vector<KB::Word>=II^{Word}}BBBBi{DynamicDictionary=^{DynamicDictionaryImpl}i}B^{__CFDictionary}^{__CFArray}}8@0:4 */

- (void)loadDictionaries;
- (void)loadAddressBook;
- (void)setAutoCorrects:(BOOL)arg1;
- (void)setShallowPrediction:(BOOL)arg1;
- (void)setCalculatesChargedKeyProbabilities:(BOOL)arg1;
- (void)clearDynamicDictionary;
- (void)addInput:(id)arg1 flags:(NSUInteger)arg2 point:(struct CGPoint { float x1; float x2; })arg3;
- (void)setInput:(id)arg1;
- (void)deleteFromInput;
- (void)clearInput;
- (void)acceptInput;
- (void)setInputIndex:(NSUInteger)arg1;
- (NSUInteger)inputIndex;
- (NSUInteger)inputCount;
- (id)inputString;
- (id)defaultCandidate;
- (void)addToTypingHistory:(id)arg1;
- (void)textAccepted:(id)arg1;
- (void)increaseUserFrequency:(id)arg1;
- (void)decreaseUserFrequency:(id)arg1;
- (void)inputLocationChanged;
- (id)shadowTyping;
- (void)setShift:(BOOL)arg1;
- (void)setAutoShift:(BOOL)arg1;
- (struct __CFArray { }*)chargeableKeys;
- (struct __CFDictionary { }*)chargedKeyProbabilities;
- (id)composedTyping;
- (id)autocorrection;

@end
