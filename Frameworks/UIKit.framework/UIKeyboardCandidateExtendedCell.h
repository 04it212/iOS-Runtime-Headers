/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@class UIFont, NSString, UIKeyboardCandidate;

@interface UIKeyboardCandidateExtendedCell : UIView  {
    UIKeyboardCandidate *_candidate;
    NSString *_text;
    NSString *_alternativeText;
    int _textAlignment;
    unsigned int _candidateNumber;
    BOOL _showsCandidateNumber;
    struct CGSize { 
        float width; 
        float height; 
    } _size;
    UIFont *_font;
    float _fontSize;
    struct CGSize { 
        float width; 
        float height; 
    } _textSize;
    UIFont *_alternativeTextFont;
    float _alternativeTextFontSize;
    struct CGSize { 
        float width; 
        float height; 
    } _alternativeTextSize;
    struct CGSize { 
        float width; 
        float height; 
    } _candidateNumberSize;
    float _cellPadding;
    float _minimumWidth;
    BOOL _highlighted;
    BOOL _onTopEdge;
    BOOL _onLeftEdge;
    BOOL _onRightEdge;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } _visibleBounds;
    BOOL _usesGroupHeaderAppearance;
    float _rowHeight;
    id _target;
    SEL _action;
    int _visualStyle;
    BOOL _placeholderCell;
}

@property(copy) UIKeyboardCandidate * candidate;
@property(copy) NSString * text;
@property(copy) NSString * alternativeText;
@property unsigned int candidateNumber;
@property BOOL showsCandidateNumber;
@property struct CGSize { float x1; float x2; } size;
@property(getter=isHighlighted) BOOL highlighted;
@property BOOL onTopEdge;
@property BOOL onLeftEdge;
@property BOOL onRightEdge;
@property struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } visibleBounds;
@property BOOL usesGroupHeaderAppearance;
@property float rowHeight;
@property BOOL placeholderCell;
@property id target;
@property SEL action;
@property int textAlignment;
@property(retain) UIFont * font;
@property float fontSize;
@property struct CGSize { float x1; float x2; } textSize;
@property(retain) UIFont * alternativeTextFont;
@property float alternativeTextFontSize;
@property struct CGSize { float x1; float x2; } alternativeTextSize;
@property struct CGSize { float x1; float x2; } candidateNumberSize;
@property float cellPadding;
@property float minimumWidth;
@property int visualStyle;
@property(readonly) BOOL canShowCandidateNumber;

+ (id)groupHeaderCellWithTitle:(id)arg1 visualStyle:(int)arg2;
+ (id)placeholderCellWithVisualStyle:(int)arg1;
+ (id)cellWithCandidate:(id)arg1 visualStyle:(int)arg2;

- (void)setUsesGroupHeaderAppearance:(BOOL)arg1;
- (void)setOnRightEdge:(BOOL)arg1;
- (void)setOnLeftEdge:(BOOL)arg1;
- (BOOL)onLeftEdge;
- (void)setOnTopEdge:(BOOL)arg1;
- (void)setCellPadding:(float)arg1;
- (void)setAlternativeTextFontSize:(float)arg1;
- (void)setAlternativeTextFont:(id)arg1;
- (void)setVisibleBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setShowsCandidateNumber:(BOOL)arg1;
- (void)setCandidateNumber:(unsigned int)arg1;
- (float)alternativeTextFontSize;
- (void)calculateCandidateNumberSize;
- (BOOL)placeholderCell;
- (void)drawText;
- (void)drawTextWithCandidateNumber;
- (void)drawBackgroundAndBorders;
- (BOOL)showsCandidateNumber;
- (void)adjustFontForFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (BOOL)usesGroupHeaderAppearance;
- (BOOL)onRightEdge;
- (BOOL)onTopEdge;
- (struct CGSize { float x1; float x2; })candidateNumberSize;
- (BOOL)canShowCandidateNumber;
- (float)cellPadding;
- (struct CGSize { float x1; float x2; })alternativeTextSize;
- (void)setCandidateNumberSize:(struct CGSize { float x1; float x2; })arg1;
- (unsigned int)candidateNumber;
- (void)setAlternativeTextSize:(struct CGSize { float x1; float x2; })arg1;
- (id)alternativeTextFont;
- (void)setTextSize:(struct CGSize { float x1; float x2; })arg1;
- (void)setPlaceholderCell:(BOOL)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 candidate:(id)arg2 text:(id)arg3 alternativeText:(id)arg4 groupHeader:(BOOL)arg5 visualStyle:(int)arg6;
- (void)calculateSize;
- (void)calculateTextSize;
- (void)setCandidate:(id)arg1;
- (void)setAlternativeText:(id)arg1;
- (id)alternativeText;
- (int)visualStyle;
- (void)setVisualStyle:(int)arg1;
- (float)fontSize;
- (void)setFontSize:(float)arg1;
- (int)textAlignment;
- (void)setTextAlignment:(int)arg1;
- (BOOL)isHighlighted;
- (float)rowHeight;
- (float)minimumWidth;
- (void)setMinimumWidth:(float)arg1;
- (void)setHighlighted:(BOOL)arg1;
- (void)setAction:(SEL)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })visibleBounds;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)setSize:(struct CGSize { float x1; float x2; })arg1;
- (id)font;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (struct CGSize { float x1; float x2; })textSize;
- (id)text;
- (void)setFont:(id)arg1;
- (void)setText:(id)arg1;
- (void)setRowHeight:(float)arg1;
- (void)drawRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (struct CGSize { float x1; float x2; })size;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setTarget:(id)arg1;
- (SEL)action;
- (id)target;
- (id)candidate;
- (void)dealloc;

@end
