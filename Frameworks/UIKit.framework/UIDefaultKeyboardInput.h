/* Generated by RuntimeBrowser on iPhone OS 4.0
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@class UITextInputTraits;



@interface UIDefaultKeyboardInput : UIView <UIKeyboardInput>
{
    UITextInputTraits *m_traits;
}

@property NSInteger selectionAffinity;
@property(readonly) UIView *textInputView;
@property(readonly) <UITextInputTokenizer> *tokenizer;
@property <UITextInputDelegate> *inputDelegate;
@property(readonly) UITextPosition *endOfDocument;
@property(readonly) UITextPosition *beginningOfDocument;
@property(copy) NSDictionary *markedTextStyle;
@property(readonly) UITextRange *markedTextRange;
@property(copy) UITextRange *selectedTextRange;
@property BOOL returnKeyGoesToNextResponder;
@property NSInteger emptyContentReturnKeyType;
@property(getter=isEditing,readonly) BOOL editing;
@property(getter=isEditable,readonly) BOOL editable;
@property(readonly) UIView<UITextSelectingContent> *content;
@property(readonly) UITextInteractionAssistant *interactionAssistant;
@property(readonly) UITextSelectionView *selectionView;
@property BOOL acceptsEmoji;
@property BOOL contentsIsSingleValue;
@property id textSuggestionDelegate;
@property NSInteger textSelectionBehavior;
@property NSInteger textLoupeVisibility;
@property NSUInteger insertionPointWidth;
@property(retain) UIColor *insertionPointColor;
@property __CFCharacterSet *textTrimmingSet;
@property(getter=isSecureTextEntry) BOOL secureTextEntry;
@property BOOL enablesReturnKeyAutomatically;
@property NSInteger returnKeyType;
@property NSInteger keyboardAppearance;
@property NSInteger keyboardType;
@property NSInteger autocorrectionType;
@property NSInteger autocapitalizationType;


- (void)replaceRange:(id)arg1 withText:(id)arg2;
- (id)positionFromPosition:(id)arg1 toBoundary:(NSInteger)arg2 inDirection:(NSInteger)arg3;
- (id)textRangeFromPosition:(id)arg1 toPosition:(id)arg2;
- (BOOL)hasContent;
- (void)detachSelectionView;
- (BOOL)hasSelection;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })caretRect;
- (id)wordContainingCaretSelection;
- (void)setSelectionWithPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (id)beginningOfDocument;
- (void)takeTraitsFrom:(id)arg1;
- (void)setupPlaceholderTextIfNeeded;
- (unsigned short)characterBeforeCaretSelection;
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg2;
- (void)expandSelectionToStartOfWordContainingCaretSelection;
- (BOOL)selectionAtDocumentStart;
- (void)selectAll;
- (BOOL)isShowingPlaceholder;
- (id)editingDelegate;
- (void)updateSelection;
- (id)rangeEnclosingPosition:(id)arg1 withGranularity:(NSInteger)arg2 inDirection:(NSInteger)arg3;
- (id)tokenizer;
- (void)setInputDelegate:(id)arg1;
- (BOOL)isSecure;
- (id)content;
- (void)replaceRangeWithTextWithoutClosingTyping:(id)arg1 replacementText:(id)arg2;
- (void)confirmMarkedText:(id)arg1;
- (unsigned short)characterInRelationToCaretSelection:(NSInteger)arg1;
- (unsigned short)characterAfterCaretSelection;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })rectContainingCaretSelection;
- (id)wordRangeContainingCaretSelection;
- (BOOL)shouldEnableAutoShift;
- (NSInteger)wordOffsetInRange:(id)arg1;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })selectionRange;
- (id)rangeByMovingCurrentSelection:(NSInteger)arg1;
- (id)rangeByExtendingCurrentSelection:(NSInteger)arg1;
- (void)extendCurrentSelection:(NSInteger)arg1;
- (void)moveForward:(NSUInteger)arg1;
- (void)forwardInvocation:(id)arg1;
- (void)detachInteractionAssistant;
- (NSInteger)selectionState;
- (id)selectedTextRange;
- (void)setSelectedTextRange:(id)arg1;
- (id)markedTextRange;
- (id)textInRange:(id)arg1;
- (id)positionFromPosition:(id)arg1 offset:(NSInteger)arg2;
- (void)setBaseWritingDirection:(NSInteger)arg1 forRange:(id)arg2;
- (void)replaceRangeWithText:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg1 replacementText:(id)arg2;
- (void)replaceCurrentWordWithText:(id)arg1;
- (id)rectsForNSRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg1;
- (BOOL)selectionAtWordStart;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })convertCaretRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setSecure:(BOOL)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })firstRectForRange:(id)arg1;
- (BOOL)isPosition:(id)arg1 atBoundary:(NSInteger)arg2 inDirection:(NSInteger)arg3;
- (BOOL)isPosition:(id)arg1 withinTextUnit:(NSInteger)arg2 inDirection:(NSInteger)arg3;
- (id)positionFromPosition:(id)arg1 inDirection:(NSInteger)arg2 offset:(NSInteger)arg3;
- (NSInteger)comparePosition:(id)arg1 toPosition:(id)arg2;
- (id)positionWithinRange:(id)arg1 farthestInDirection:(NSInteger)arg2;
- (id)characterRangeByExtendingPosition:(id)arg1 inDirection:(NSInteger)arg2;
- (NSInteger)baseWritingDirectionForPosition:(id)arg1 inDirection:(NSInteger)arg2;
- (id)closestPositionToPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)closestPositionToPoint:(struct CGPoint { float x1; float x2; })arg1 withinRange:(id)arg2;
- (id)characterRangeAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)endOfDocument;
- (id)markedTextStyle;
- (void)setMarkedTextStyle:(id)arg1;
- (void)setAcceptsEmoji:(BOOL)arg1;
- (id)interactionAssistant;
- (void)beginSelectionChange;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })rectForNSRange:(struct _NSRange { NSUInteger x1; NSUInteger x2; })arg1;
- (id)wordInRange:(id)arg1;
- (void)setSelectedDOMRange:(id)arg1 affinityDownstream:(BOOL)arg2;
- (void)setMarkedText:(id)arg1;
- (id)fontForCaretSelection;
- (BOOL)acceptsEmoji;
- (void)unmarkText;
- (NSInteger)offsetFromPosition:(id)arg1 toPosition:(id)arg2;
- (void)deleteBackward;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })caretRectForPosition:(id)arg1;
- (void)moveBackward:(NSUInteger)arg1;
- (id)markedText;
- (BOOL)hasText;
- (void)setText:(id)arg1;
- (id)selectedDOMRange;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })selectionClipRect;
- (id)textInputTraits;
- (BOOL)becomesEditableWithGestures;
- (void)setBecomesEditableWithGestures:(BOOL)arg1;
- (void)endSelectionChange;
- (void)setEditingDelegate:(id)arg1;
- (id)textColorForCaretSelection;
- (id)text;
- (struct _NSRange { NSUInteger x1; NSUInteger x2; })_markedTextNSRange;
- (id)inputDelegate;
- (id)selectionView;
- (void)insertText:(id)arg1;
- (void)dealloc;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })visibleBounds;
- (id)delegate;

@end
