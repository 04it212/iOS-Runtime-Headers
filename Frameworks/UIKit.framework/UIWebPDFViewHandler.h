/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@class UIHighlightView, NSObject<UIWebPDFViewHandlerDelegate>, UIDocumentPasswordView, UIWebPDFSearchController, UIWebPDFView, UIView, WebPDFNSNumberFormatter, UIColor, UIWebPDFLabelView;

@interface UIWebPDFViewHandler : NSObject <UIWebPDFViewPrivateDelegate, UIDocumentPasswordViewDelegate, UIWebPDFViewDelegate> {
    UIWebPDFView *_pdfView;
    BOOL _scalesPageToFit;
    float _initialZoomScale;
    NSObject<UIWebPDFViewHandlerDelegate> *_pdfHandlerDelegate;
    UIHighlightView *_linkHighlightView;
    UIWebPDFLabelView *_pageLabelView;
    BOOL _showPageLabels;
    BOOL _showsShadowsForHTMLContent;
    BOOL _cachedScrollViewShadowsState;
    UIDocumentPasswordView *_passwordEntryView;
    UIWebPDFSearchController *_searchController;
    UIColor *_backgroundColorForUnRenderedContent;
    BOOL _hideActivityIndicatorForUnRenderedContent;
    BOOL _hidePageViewsUntilReadyToRender;
    WebPDFNSNumberFormatter *_labelViewFormatter;
    struct _PDFHistoryItem { 
        BOOL restorePending; 
        BOOL isInitialScale; 
        float zoomScale; 
        struct CGPoint { 
            float x; 
            float y; 
        } contentOffset; 
    } _pendingHistoryItemRestore;
}

@property(readonly) UIWebPDFView * pdfView;
@property(readonly) UIView * frontView;
@property BOOL scalesPageToFit;
@property BOOL showPageLabels;
@property NSObject<UIWebPDFViewHandlerDelegate> * pdfHandlerDelegate;
@property(readonly) UIWebPDFSearchController * searchController;
@property(retain) UIColor * backgroundColorForUnRenderedContent;
@property BOOL hideActivityIndicatorForUnRenderedContent;
@property BOOL hidePageViewsUntilReadyToRender;


- (id)pdfHandlerDelegate;
- (BOOL)showPageLabels;
- (void)revealSearchResult:(id)arg1 andZoomIn:(BOOL)arg2;
- (void)updateViewHierarchyForDocumentViewTabSwitch:(id)arg1;
- (void)removeViewFromSuperview;
- (id)searchController;
- (void)didEndEditingPassword:(id)arg1 inView:(id)arg2;
- (void)didBeginEditingPassword:(id)arg1 inView:(id)arg2;
- (void)userDidEnterPassword:(id)arg1 forPasswordView:(id)arg2;
- (void)_resultRects:(id)arg1 andResultViews:(id)arg2 forSearchResult:(id)arg3 inViewCoordinates:(id)arg4;
- (void)scrollToPageNumber:(int)arg1 animate:(BOOL)arg2;
- (id)createPageLabel;
- (id)_getLabelViewFormatter;
- (void)updateViewHierarchyForDocumentViewTabSwitch:(id)arg1 restoringZoomScale:(float)arg2 andScrollPt:(struct CGPoint { float x1; float x2; })arg3;
- (void)_updateViewHierarchyForDocumentView:(id)arg1 ignoreIfSame:(BOOL)arg2;
- (void)updatePageNumberLabelWithUserScrolling:(BOOL)arg1 animated:(BOOL)arg2;
- (void)_showPasswordEntryViewForFile:(id)arg1;
- (void)highlightRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (BOOL)_handleAnnotationClick:(struct CGPDFDictionary { }*)arg1;
- (void)_postdidDetermineDocumentBounds;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_frameForDocumentBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)restoreStateFromPendingHistoryItem;
- (void)adjustZoomScalesForScrollView;
- (void)_adjustContentOffsetForKeyboardIfNeeded;
- (void)_showPasswordErrorAlert;
- (BOOL)_handleLinkActionClick:(struct CGPDFDictionary { }*)arg1;
- (BOOL)_handleURIActionClick:(struct CGPDFDictionary { }*)arg1 uriKey:(const char *)arg2;
- (BOOL)_handleDestinationActionClick:(struct CGPDFDictionary { }*)arg1 destinationKey:(const char *)arg2;
- (void)_notifyDelegateOfLinkClick:(id)arg1;
- (id)createLinkHighlight;
- (void)_adjustZoomScalesForScrollViewInternal:(id)arg1;
- (void)_ensurePDFViewInHierarchyForWebDocView:(id)arg1;
- (void)_createPDFViewIfNeeded:(id)arg1;
- (void)_removePDFViewIfWebDocViewIsNotSamePDF:(id)arg1;
- (void)_removePDFViewIfWebDocViewIsNotPDF:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_rectForPasswordView:(id)arg1;
- (void)_replacePDFViewIfPresentWithWebDocView:(id)arg1;
- (id)_getPDFDocumentViewForWebView:(id)arg1;
- (id)_scroller:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_rectForPdfView:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)clearLinkHighlight;
- (void)clearAllViews;
- (void)_setSearchControllerDocumentToSearch;
- (void)clearPageLabel;
- (void)setHideActivityIndicatorForUnRenderedContent:(BOOL)arg1;
- (BOOL)hideActivityIndicatorForUnRenderedContent;
- (id)backgroundColorForUnRenderedContent;
- (void)setHidePageViewsUntilReadyToRender:(BOOL)arg1;
- (BOOL)hidePageViewsUntilReadyToRender;
- (void)pdfView:(id)arg1 willClickAnnotation:(struct CGPDFDictionary { }*)arg2 inRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3;
- (void)shouldResetZoom:(id)arg1;
- (void)pdfView:(id)arg1 shouldZoomToRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (void)didDetermineDocumentBounds:(id)arg1;
- (id)passwordForPDFView:(id)arg1;
- (void)ensureCorrectPagesAreInstalled;
- (void)setBackgroundColorForUnRenderedContent:(id)arg1;
- (void)didScroll:(id)arg1;
- (id)frontView;
- (void)_keyboardDidShow:(id)arg1;
- (void)didReceiveMemoryWarning:(id)arg1;
- (void)handleScrollToAnchor:(id)arg1;
- (void)updateViewHierarchyForDocumentViewLoadComplete:(id)arg1;
- (void)updateViewHierarchyForDocumentViewNewLoad:(id)arg1;
- (void)updateViewHierarchyForFirstNonEmptyLayoutInFrame:(id)arg1;
- (void)setShowPageLabels:(BOOL)arg1;
- (void)setPdfHandlerDelegate:(id)arg1;
- (void)setScalesPageToFit:(BOOL)arg1;
- (void)updateViewSettings;
- (id)pdfView;
- (BOOL)scalesPageToFit;
- (void)restoreStateFromHistoryItem:(id)arg1 forWebView:(id)arg2;
- (void)saveStateToHistoryItem:(id)arg1 forWebView:(id)arg2;
- (id)init;
- (void)dealloc;

@end
