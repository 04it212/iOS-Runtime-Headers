/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AVFoundation.framework/AVFoundation
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class AVWeakReference, NSMutableDictionary, AVPropertyStorage, NSError, AVPlayerItem, AVAsset, NSDate, AVVideoComposition, NSArray, NSObject<OS_dispatch_queue>, AVPlayerConnection, NSDictionary, NSString, AVAudioMix, NSMutableArray, NSURL;

@interface AVPlayerItemInternal : NSObject {
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    NSURL *URL;
    AVAsset *asset;
    AVAsset *assetWithFigPlaybackItem;
    NSDictionary *audibleDRMInfo;
    AVAudioMix *audioMix;
    NSString *dataYouTubeID;
    BOOL didApplyInitialAudioMix;
    BOOL didBecomeReadyForInspectionOfMediaSelectionOptions;
    BOOL didBecomeReadyForInspectionOfPresentationSize;
    BOOL didBecomeReadyForInspectionOfTracks;
    BOOL didFireKVOForAssetForNonStreamingItem;
    BOOL didInformObserversAboutAvailabilityOfTracks;
    BOOL didSetAssetToAssetWithFigPlaybackItem;
    int eqPreset;
    NSError *error;
    BOOL externalProtectionRequested;
    BOOL externalSubtitlesEnabled;
    struct OpaqueFigCPEProtector { } *figCPEProtector;
    struct OpaqueFigPlaybackItem { } *figPlaybackItem;
    struct OpaqueCMTimebase { } *figTimebase;
    NSDictionary *gaplessInfo;
    NSMutableArray *handlersToCallWhenReadyForEnqueueing;
    BOOL haveCPEProtector;
    BOOL haveInitialSamples;
    BOOL initialAlwaysMonitorsPlayability;
    double initialBufferingTargetMaximum;
    double initialBufferingTargetMinimum;
    BOOL initialContinuesPlayingDuringPrerollForRateChange;
    BOOL initialContinuesPlayingDuringPrerollForSeek;
    NSDate *initialDate;
    NSDate *initialEstimatedDate;
    struct __CFString { } *initialFigTimePitchAlgorithm;
    } initialForwardPlaybackEndTime;
    BOOL initialLimitReadAhead;
    int initialPlaybackLikelyToKeepUpTrigger;
    } initialReversePlaybackEndTime;
    } initialTime;
    } initialToleranceAfter;
    } initialToleranceBefore;
    BOOL initialWillNeverSeekBackwardsHint;
    BOOL isCurrentPlayerItem;
    NSMutableArray *itemOutputs;
    NSMutableArray *itemVideoOutputs;
    NSMutableDictionary *mediaOptionsSelectedByClient;
    BOOL needTimedMetadataNotification;
    AVPlayerItem *nextItem;
    int nextSeekIDToGenerate;
    BOOL nonForcedSubtitleDisplayEnabled;
    int pendingSeekID;
    AVPlayerConnection *playerConnection;
    AVWeakReference *playerReference;
    AVPlayerItem *previousItem;
    AVPropertyStorage *propertyStorage;
    NSDictionary *rampInOutInfo;
    id seekCompletionHandler;
    struct OpaqueFigSimpleMutex { } *seekIDMutex;
    BOOL seekingWaitsForVideoCompositionRendering;
    float soundCheckVolumeNormalization;
    NSObject<OS_dispatch_queue> *stateDispatchQueue;
    int status;
    NSMutableArray *syncLayers;
    NSObject<OS_dispatch_queue> *syncLayersQ;
    NSArray *textStyleRules;
    NSArray *timedMetadata;
    NSArray *trackIDsForAssetWithFigPlaybackItem;
    NSMutableDictionary *tracksSelectedByClientViaAlternateTrackGroupSPI;
    AVVideoComposition *videoComposition;
    float volumeAdjustment;
    BOOL wasInitializedWithURL;
    AVWeakReference *weakReference;
}

@end
